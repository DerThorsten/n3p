language: generic
dist: trusty
sudo: required
# cache:
#   directories:
#   - $HOME/.cache/pip
# addons:
#   apt:
#     sources:
#       - ubuntu-toolchain-r-test
#       - deadsnakes
#       #- boost-latest/ppa
#       #- george-edison55/precise-backports #cmake-3.x
#       #- kubuntu-backports # cmake 2.8.12
#     packages:
#       - g++-4.8
#       - g++-4.8-multilib
#       - gcc-6
#       - g++-6
#       - g++-multilib
#       - python-nose
#       - python3-nose
#       - python3.5
#       - python3.5-dev
#       - python3.5-venv
#       - libhdf5-serial-dev
#       - libboost-all-dev
#       - libglpk-dev
#       - cmake
#       - libboost-test-dev 

matrix:
  include:
  
    # gcc 6     from some ubuntu ppa's
    # python3.5 from some ubuntu ppa's
    # calls C++ test
    # NO python tests (do not work yet)
    - os: linux
      compiler: gcc
      cache:
        directories:
        - $HOME/.cache/pip
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
            #- boost-latest/ppa
            #- george-edison55/precise-backports #cmake-3.x
            #- kubuntu-backports # cmake 2.8.12
          packages:
            - g++-4.8
            - g++-4.8-multilib
            - gcc-6
            - g++-6
            - g++-multilib
            - python-nose
            - python3-nose
            - python3.5
            - python3.5-dev
            - python3.5-venv
            - libhdf5-serial-dev
            - libboost-dev
            - libglpk-dev
            - cmake
      script:


        # Link gcc-6 and g++-6 to their standard commands
        - sudo ln -s /usr/bin/gcc-6 /usr/local/bin/gcc
        - sudo ln -s /usr/bin/g++-6 /usr/local/bin/g++
        # Export CC and CXX to tell cmake which compiler to use
        - export CC=/usr/bin/gcc-6
        - export CXX=/usr/bin/g++-6
        # Check versions of gcc, g++ and cmake
        - gcc -v && g++ -v && cmake --version

        - pyvenv-3.5 venv
        - source venv/bin/activate
        - pip install numpy
        - pip install nose
        - cmake 
          -DWITHIN_TRAVIS=ON 
          -DBUILD_CPP_TEST=ON 
          -DBUILD_PYTHON_TEST=ON 
          -DWITH_GLPK=ON 
          -DWITH_HDF5=ON 
          -DBUILD_NIFTY_PYTHON=ON 
          -DPYTHON_EXECUTABLE:FILEPATH=`pwd`/venv/bin/python3.5
        - make -j2
        - CTEST_OUTPUT_ON_FAILURE=TRUE make test

    # gcc 4.8     from some ubuntu ppa's
    # python3.5 from some ubuntu ppa's
    # calls C++ test
    # NO python tests (do not work yet)
    - os: linux
      compiler: gcc-4.8
      cache:
        directories:
        - $HOME/.cache/pip
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - deadsnakes
            #- boost-latest/ppa
            #- george-edison55/precise-backports #cmake-3.x
            #- kubuntu-backports # cmake 2.8.12
          packages:
            - g++-4.8
            - g++-4.8-multilib
            - gcc-6
            - g++-6
            - g++-multilib
            - python-nose
            - python3-nose
            - python3.5
            - python3.5-dev
            - python3.5-venv
            - libhdf5-serial-dev
            - libboost-dev
            - libglpk-dev
            - cmake
      script:
        - pyvenv-3.5 venv

        - source venv/bin/activate
        - pip install numpy
        - cmake 
          -DWITHIN_TRAVIS=ON 
          -DBUILD_CPP_TEST=ON 
          -DBUILD_PYTHON_TEST=ON 
          -DWITH_GLPK=ON 
          -DWITH_HDF5=ON 
          -DBUILD_NIFTY_PYTHON=ON 
          -DCMAKE_CXX_COMPILER=g++-4.8 
          -DPYBIND11_PYTHON_VERSION=3.5 
          -DPYTHON_INCLUDE_DIR:PATH=/usr/include/python3.5m 
          -DPYTHON_LIBRARY:FILEPATH=/usr/lib/x86_64-linux-gnu/libpython3.5m.so 
          -DPYTHON_EXECUTABLE:FILEPATH=`pwd`/venv/bin/python3.5 
        - make -j2
        #- CTEST_OUTPUT_ON_FAILURE=TRUE make test
        #- pip install numpy
        #- sudo make install
        #- make python-test
        #- CTEST_OUTPUT_ON_FAILURE=TRUE make test

    # osx clang
    # python 2.7
    # calls C++ test
    # NO python tests (do not work yet)
    - os: osx
      compiler: clang
      script:
        - cmake 
            -DWITHIN_TRAVIS=ON 
            -DBUILD_CPP_TEST=ON 
            -DBUILD_PYTHON_TEST=ON 
            -DWITH_GLPK=OFF 
            -DBUILD_NIFTY_PYTHON=ON 
            -DPYBIND_ELEVEN_INCLUDE_DIR=pybind11-master/include 
            -DPYBIND11_PYTHON_VERSION=2.7
        - make -j 2
        - sudo make install
        - CTEST_OUTPUT_ON_FAILURE=TRUE make test

    # conda linux python gcc4 python 2.7
    # C++ test
    # CALLS python tests by hand 
    # (make python test does not work yet)
    - os: linux
      env: 
        - USE_CONDA=true
        - CONDA_PYTHON_VERSION=2.7
        - COMPILER=gcc
      before_script:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH";
        - hash -r;
        - conda config --set always_yes yes --set changeps1 no;
        - conda update -q conda;
        - conda info -a;
        #
        - conda create -q -n dev python=$CONDA_PYTHON_VERSION numpy nose boost hdf5 scikit-image
        - source activate dev
        - conda install -c anaconda cmake=3.2
        - conda install gcc
        - conda install -c conda-forge glpk pybind11 xtensor xtensor-python
        - conda install futures;

      script:

        ###############################################
        # shortcuts
        ###############################################
        - export PATH="$HOME/miniconda/bin:$PATH"
        - source activate dev
        - export ENV_ROOT="$HOME/miniconda/envs/dev"
        - export ENV_INCLUDE="$ENV_ROOT/include"
        - export ENV_BIN=$ENV_ROOT/bin
        - export ROOT_BIN="$HOME/miniconda/bin"
        


        ###############################################
        # setup compiler
        ###############################################
        - export CXX="$ENV_BIN/g++";
        - export CC="$ENV_BIN/gcc";
        
        #-DCMAKE_C_COMPILER=$C_COMPILER_PATH
        #-DCMAKE_CXX_COMPILER=$COMPILER_PATH
        ###############################################
        # configure cmake
        ###############################################
        - $ENV_BIN/cmake 
                -DWITHIN_TRAVIS=ON 
                -DWITH_QPBO=ON
                -DWITH_HDF5=OFF
                -DWITH_QPBO=ON
                -DWITH_GLPK=OFF 
                -DWITH_CPLEX=OFF 
                -DWITH_GUROBI=OFF
                -DBUILD_CPP_TEST=ON 
                -DBUILD_PYTHON_TEST=ON 
                -DBUILD_NIFTY_PYTHON=ON 
                -DNOSETESTS_PATH=$ENV_BIN 
                -DHDF5_INCLUDE_DIR=$ENV_INCLUDE 
                -DGLPK_INCLUDE_DIR=$ENV_INCLUDE 
                -DBoost_INCLUDE_DIR=$ENV_INCLUDE  
                -DPYTHON_EXECUTABLE=$ENV_BIN/python$CONDA_PYTHON_VERSION
                -DPYTHON_NUMPY_INCLUDE_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/numpy/core/include
                -DPYTHON_MODULE_INSTALL_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/

        ###############################################
        # the actual build
        ###############################################
        - make -j 2
        ###############################################
        # cpp tests
        ############################################### 
        - CTEST_OUTPUT_ON_FAILURE=TRUE make test
        ###############################################
        # install and test the project
        ###############################################

        - sudo make install
        - cd src/python/test
        # this is a fucked up way of running python test
        # pls, if someone could fix this =)
        - nosetests  cgp/*.py
        - nosetests  graph/lifted_multicut/*.py
        - nosetests  graph/multicut/*.py
        - nosetests  graph/mincut/*.py
        - nosetests  graph/agglo/*.py
        - nosetests  hdf5/*.py
        - nosetests  tools/*.py

        # back to the root
        - cd ../../..
        
        # run the python examples with nose?
        - python src/python/examples/nifty_configuration.py
        # this example uses plotting...
        #- python src/python/examples/graph/plot_edge_contraction_graph.py

    # conda linux python gcc6 python 3.6
    # NO C++ test
    # CALLS python tests by hand 
    # (make python test does not work yet)
    - os: linux
      env: 
        - USE_CONDA=true
        - CONDA_PYTHON_VERSION=3.6
        - COMPILER=gcc6
      before_script:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH";
        - hash -r;
        - conda config --set always_yes yes --set changeps1 no;
        - conda update -q conda;
        - conda info -a;
        #
        - conda create -q -n dev python=$CONDA_PYTHON_VERSION numpy nose boost hdf5 scikit-image
        - source activate dev
        - conda install -c conda-forge glpk pybind11 xtensor xtensor-python
        - conda install -c anaconda cmake=3.2
        - conda install -c rdonnelly gcc-6=6.1.0;
        - conda install -c conda-forge glpk

      script:

        ###############################################
        # shortcuts
        ###############################################
        - export PATH="$HOME/miniconda/bin:$PATH"
        - source activate dev
        - export ENV_ROOT="$HOME/miniconda/envs/dev"
        - export ENV_INCLUDE="$ENV_ROOT/include"
        - export ENV_BIN=$ENV_ROOT/bin
        - export ROOT_BIN="$HOME/miniconda/bin"
        


        ###############################################
        # setup compiler
        ###############################################
        - export CXX="$ENV_BIN/g++";
        - export CC="$ENV_BIN/gcc";
        
        #-DCMAKE_C_COMPILER=$C_COMPILER_PATH
        #-DCMAKE_CXX_COMPILER=$COMPILER_PATH
        ###############################################
        # configure cmake
        ###############################################
        - $ENV_BIN/cmake 
                -DWITHIN_TRAVIS=ON 
                -DWITH_QPBO=ON
                -DWITH_HDF5=OFF
                -DWITH_QPBO=ON
                -DWITH_GLPK=OFF 
                -DWITH_CPLEX=OFF 
                -DWITH_GUROBI=OFF
                -DBUILD_CPP_TEST=OFF
                -DBUILD_PYTHON_TEST=ON 
                -DBUILD_NIFTY_PYTHON=ON 
                -DNOSETESTS_PATH=$ENV_BIN 
                -DHDF5_INCLUDE_DIR=$ENV_INCLUDE 
                -DGLPK_INCLUDE_DIR=$ENV_INCLUDE 
                -DBoost_INCLUDE_DIR=$ENV_INCLUDE  
                -DPYTHON_EXECUTABLE=$ENV_BIN/python$CONDA_PYTHON_VERSION
                -DPYTHON_NUMPY_INCLUDE_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/numpy/core/include
                -DPYTHON_MODULE_INSTALL_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/

        ###############################################
        # the actual build
        ###############################################
        - make -j 2
        ###############################################
        # cpp tests
        ###############################################
        - CTEST_OUTPUT_ON_FAILURE=TRUE make test
        ###############################################
        # install and test the project
        ###############################################
        
        - sudo make install
        - cd src/python/test
        # this is a fucked up way of running python test
        # pls, if someone could fix this =)
        - nosetests  cgp/*.py
        - nosetests  graph/lifted_multicut/*.py
        - nosetests  graph/multicut/*.py
        - nosetests  graph/mincut/*.py
        - nosetests  graph/agglo/*.py
        - nosetests  hdf5/*.py
        - nosetests  tools/*.py

        # back to the root
        - cd ../../..
        
        # run the python examples with nose?
        - python src/python/examples/nifty_configuration.py
        # this example uses plotting...
        #- python src/python/examples/graph/plot_edge_contraction_graph.py
    
    # conda linux python gcc4 python 3.5
    # NO C++ test
    # CALLS python tests by hand 
    # (make python test does not work yet)
    - os: osx
      env: 
        - USE_CONDA=true
        - CONDA_PYTHON_VERSION=3.5
        - COMPILER=gcc
      before_script:
        - wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
        - bash miniconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH";
        - hash -r;
        - conda config --set always_yes yes --set changeps1 no;
        - conda update -q conda;
        - conda info -a;
        #
        - conda create -q -n dev python=$CONDA_PYTHON_VERSION numpy nose boost hdf5 scikit-image
        - source activate dev
        - conda install -c conda-forge glpk pybind11 xtensor xtensor-python
        - conda install -c anaconda cmake=3.2
        - conda install gcc;
        - conda install -c conda-forge glpk

      script:

        ###############################################
        # shortcuts
        ###############################################
        - export PATH="$HOME/miniconda/bin:$PATH"
        - source activate dev
        - export ENV_ROOT="$HOME/miniconda/envs/dev"
        - export ENV_INCLUDE="$ENV_ROOT/include"
        - export ENV_BIN=$ENV_ROOT/bin
        - export ROOT_BIN="$HOME/miniconda/bin"
        


        ###############################################
        # setup compiler
        ###############################################
        - export CXX="$ENV_BIN/g++";
        - export CC="$ENV_BIN/gcc";

        
        #-DCMAKE_C_COMPILER=$C_COMPILER_PATH
        #-DCMAKE_CXX_COMPILER=$COMPILER_PATH
        ###############################################
        # configure cmake
        ###############################################
        - $ENV_BIN/cmake 
                -DWITHIN_TRAVIS=ON 
                -DWITH_QPBO=ON
                -DWITH_HDF5=OFF
                -DWITH_QPBO=OFF
                -DWITH_GLPK=OFF 
                -DWITH_CPLEX=OFF 
                -DWITH_GUROBI=OFF
                -DBUILD_CPP_TEST=ON 
                -DBUILD_PYTHON_TEST=ON 
                -DBUILD_NIFTY_PYTHON=ON 
                -DNOSETESTS_PATH=$ENV_BIN 
                -DHDF5_INCLUDE_DIR=$ENV_INCLUDE 
                -DGLPK_INCLUDE_DIR=$ENV_INCLUDE 
                -DBoost_INCLUDE_DIR=$ENV_INCLUDE  
                -DPYTHON_EXECUTABLE=$ENV_BIN/python$CONDA_PYTHON_VERSION
                -DPYTHON_NUMPY_INCLUDE_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/numpy/core/include
                #-DPYTHON_MODULE_INSTALL_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/

        ###############################################
        # the actual build
        ###############################################

        - make -j 2
        - CTEST_OUTPUT_ON_FAILURE=TRUE make test
        ###############################################
        # install and test the project
        ###############################################
        #- mkdir -p =/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/nifty
        - sudo make install 
        - cd src/python/test
        # this is a fucked up way of running python test
        # pls, if someone could fix this =)
        - nosetests  cgp/*.py
        - nosetests  graph/lifted_multicut/*.py
        - nosetests  graph/multicut/*.py
        - nosetests  graph/mincut/*.py
        - nosetests  graph/agglo/*.py
        - nosetests  hdf5/*.py
        - nosetests  tools/*.py

        # back to the root
        - cd ../../..
        
        # run the python examples with nose?
        - python src/python/examples/nifty_configuration.py
        # this example uses plotting...
        #- python src/python/examples/graph/plot_edge_contraction_graph.py


