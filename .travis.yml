#language: python
dist: trusty
sudo: required


matrix:
  include:

    # - os: linux
    #   language: python
    #   python: "2.7"
    # - os: linux
    #   language: python
    #   python: "3.2"
    - os: linux
      language: python
      python: "3.5"
      env: CONDA_PYTHON_VERSION=3.5
    # - os: linux
    #   language: python
    #   python: "3.6"

    - os: osx
      osx_image: xcode7.3
      env: CONDA_PYTHON_VERSION=3.5







# we try to avoid to use
# the travis addon mechanism
# and use conda instead
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - deadsnakes
    packages:
      - cmake

before_script:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      export PATH="/usr/local/bin:${PATH}"; 
    fi
  - sudo apt-get update
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];  then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  # create an environment and install dependencies
  # In this build we try to add all optional dependencies we can
  # to get a 'complete' build (TODO, also try a minimal build)
  - conda create -q -n dev python=$CONDA_PYTHON_VERSION numpy nose boost hdf5
  - source activate dev
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];  then
      echo 1;
    else
        conda install -c rdonnelly gcc-6=6.1.0 -v;
    fi
  - conda install -c conda-forge glpk
  # for a python 2.7 we need concurrent futures
  - if [[ "$CONDA_PYTHON_VERSION" == "2.7" ]]; then
      conda install futures;
    fi
  #- python setup.py install

script:
  #- chmod +x /home/travis/miniconda/envs/dev/bin/sh
  #- chmod +x /home/travis/miniconda/envs/dev/bin/nosetests
  # Your test script goes here
  
  # compiler to use
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];  then
      export CONDA_PYTHON_VERSION=3.5;
      export COMPILER=$ENV_BIN/clang;
    else
      export COMPILER=$ENV_BIN/g++;
    fi



  - export PATH="$HOME/miniconda/bin:$PATH"
  - source activate dev
  - export ENV_ROOT="$HOME/miniconda/envs/dev"
  - export ENV_INCLUDE="$ENV_ROOT/include"
  - export ENV_BIN="$ENV_ROOT/bin"
  # 
  # configure cmake
  - cmake -DWITHIN_TRAVIS=ON 
          -DWITH_QPBO=ON
          -DWITH_HDF5=OFF
          -DWITH_QPBO=ON
          -DWITH_GLPK=OFF 
          -DWITH_CPLEX=OFF 
          -DWITH_GUROBI=OFF
          -DBUILD_CPP_TEST=OFF 
          -DBUILD_PYTHON_TEST=ON 
          -DBUILD_NIFTY_PYTHON=ON 
          -DNOSETESTS_PATH=$ENV_BIN 
          -DHDF5_INCLUDE_DIR=$ENV_INCLUDE 
          -DGLPK_INCLUDE_DIR=$ENV_INCLUDE 
          -DBoost_INCLUDE_DIR=$ENV_INCLUDE 
          -DCMAKE_CXX_COMPILER=$COMPILER
          -DPYTHON_EXECUTABLE=$ENV_BIN/python$CONDA_PYTHON_VERSION
          -DPYTHON_MODULE_INSTALL_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/
  #
  # build everything
  - make -j 2

  # install the probject
  - sudo make install
  - cd src/python/test
  # this is a fucked up way of running python test
  # pls, if someone could fix this =)
  - nosetests  cgp/*.py
  - nosetests  graph/lifted_multicut/*.py
  - nosetests  graph/multicut/*.py
  - nosetests  graph/mincut/*.py
  - nosetests  graph/agglo/*.py
  - nosetests  hdf5/*.py
  - nosetests  tools/*.py

  # back to the root
  - cd ../../..
  
  # run the python examples with nose?
  - python src/python/examples/nifty_configuration.py
  - python src/python/examples/graph/plot_edge_contraction_graph.py