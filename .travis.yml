#language: python
dist: trusty
sudo: required


matrix:
  include:
    
    - os: linux
      language: python
      env: 
        - CONDA_PYTHON_VERSION=2.7
        - COMPILER=gcc

    - os: linux
      language: python
      env: 
        - CONDA_PYTHON_VERSION=3.5
        - COMPILER=gcc

    - os: linux
      language: python
      env: 
        - CONDA_PYTHON_VERSION=3.6
        - COMPILER=gcc

    - os: osx
      osx_image: xcode7.3
      env: 
        - CONDA_PYTHON_VERSION=2.7
        - COMPILER=gcc

    - os: osx
      osx_image: xcode7.3
      env: 
        - CONDA_PYTHON_VERSION=3.5
        - COMPILER=gcc

    - os: osx
      osx_image: xcode7.3
      env: 
        - CONDA_PYTHON_VERSION=3.6
        - COMPILER=gcc







# # we try to avoid to use
# # the travis addon mechanism
# # and use conda instead
# addons:
#   apt:
#     sources:
#       - ubuntu-toolchain-r-test
#       - deadsnakes
#     packages:
#       - cmake

before_script:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then 
      export PATH="/usr/local/bin:${PATH}"; 
    fi

  ###############################################
  # download conda  and conda 
  ###############################################
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]];  then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

  ###############################################
  # download conda  packages
  ###############################################
  - conda create -q -n dev python=$CONDA_PYTHON_VERSION numpy nose boost hdf5
  - source activate dev
  
  # cmake
  - conda install -c anaconda cmake=3.2

  # download compiler
  #- conda install gcc

  #- if [ "$COMPILER" == "clang" ];  then
  #    conda install -c gulag clang;
  #  fi

  - if [["$TRAVIS_OS_NAME" == "linux"]]  ;  then
      conda install -c rdonnelly gcc-6=6.1.0 -f;
    fi

  - if [["$TRAVIS_OS_NAME" == "osx"]] ;  then
      conda install gcc;
    fi

  # glpk
  - conda install -c conda-forge glpk

  # for a python 2.7 we need concurrent futures
  - if [[ "$CONDA_PYTHON_VERSION" == "2.7" ]]; then
      conda install futures;
    fi

script:

  ###############################################
  # shortcuts
  ###############################################
  - export PATH="$HOME/miniconda/bin:$PATH"
  - source activate dev
  - export ENV_ROOT="$HOME/miniconda/envs/dev"
  - export ENV_INCLUDE="$ENV_ROOT/include"
  - export ENV_BIN=$ENV_ROOT/bin
  - export ROOT_BIN="$HOME/miniconda/bin"
  


  ###############################################
  # setup compiler
  ###############################################
  - if [ "$COMPILER" == "gcc" ];  then
      export COMPILER_PATH=$ENV_BIN/g++;
      export C_COMPILER_PATH=$ENV_BIN/gcc;
      export CXX="$ENV_BIN/g++";
      export CC="$ENV_BIN/gcc";
    else
      export COMPILER_PATH=$ENV_BIN/clang++;
      export C_COMPILER_PATH=$ENV_BIN/clang;
      export CXX="$ENV_BIN/clang++";
      export CC="$ENV_BIN/clang";
    fi

  #- find $HOME/miniconda -print | grep -i gcc
  #- find $HOME/miniconda -print | grep -i g++
  #- find $HOME/miniconda -print | grep -i clang
  #- find $HOME/miniconda -print | grep -i clang++
  #- ls $ROOT_BIN
  - ls $ENV_BIN
  #- echo "COMPILER PATH"
  #- echo $COMPILER_PATH
  #- echo "C_COMPILER PATH"
  #- echo $C_COMPILER_PATH
  ###############################################
  # configure cmake
  ###############################################
  - $ENV_BIN/cmake 
          -DCMAKE_C_COMPILER=$C_COMPILER_PATH
          -DCMAKE_CXX_COMPILER=$COMPILER_PATH
          -DWITHIN_TRAVIS=ON 
          -DWITH_QPBO=ON
          -DWITH_HDF5=OFF
          -DWITH_QPBO=ON
          -DWITH_GLPK=OFF 
          -DWITH_CPLEX=OFF 
          -DWITH_GUROBI=OFF
          -DBUILD_CPP_TEST=OFF 
          -DBUILD_PYTHON_TEST=ON 
          -DBUILD_NIFTY_PYTHON=ON 
          -DNOSETESTS_PATH=$ENV_BIN 
          -DHDF5_INCLUDE_DIR=$ENV_INCLUDE 
          -DGLPK_INCLUDE_DIR=$ENV_INCLUDE 
          -DBoost_INCLUDE_DIR=$ENV_INCLUDE  
          -DPYTHON_EXECUTABLE=$ENV_BIN/python$CONDA_PYTHON_VERSION
          -DPYTHON_MODULE_INSTALL_DIR=/home/travis/miniconda/envs/dev/lib/python$CONDA_PYTHON_VERSION/site-packages/

  ###############################################
  # the actual build
  ###############################################
  - make -j 2

  ###############################################
  # install and test the project
  ###############################################
  - sudo make install
  - cd src/python/test
  # this is a fucked up way of running python test
  # pls, if someone could fix this =)
  - nosetests  cgp/*.py
  - nosetests  graph/lifted_multicut/*.py
  - nosetests  graph/multicut/*.py
  - nosetests  graph/mincut/*.py
  - nosetests  graph/agglo/*.py
  - nosetests  hdf5/*.py
  - nosetests  tools/*.py

  # back to the root
  - cd ../../..
  
  # run the python examples with nose?
  - python src/python/examples/nifty_configuration.py
  - python src/python/examples/graph/plot_edge_contraction_graph.py