<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4" kind="class" language="C++" prot="public">
    <compoundname>std::numeric_limits&lt; half_float::half &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">numeric_limits&lt; float &gt;</basecompoundref>
    <includes refid="half_8hpp" local="no">half.hpp</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a259bf36384293f18c4fbd40011b75107" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::is_signed</definition>
        <argsstring></argsstring>
        <name>is_signed</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Supports signed values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2956" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a503b8e3d6c6828c85b21c17fda0e2bf2" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::is_exact</definition>
        <argsstring></argsstring>
        <name>is_exact</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Is not exact. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2959" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2959" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a77ce83e1744e781334a6c7f68e2b7e38" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::is_modulo</definition>
        <argsstring></argsstring>
        <name>is_modulo</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Doesn&apos;t provide modulo arithmetic. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2962" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2962" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1acdf5541f7eda3f27d4537c1e4c4528ad" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::is_iec559</definition>
        <argsstring></argsstring>
        <name>is_iec559</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>IEEE conformant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2965" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2965" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a808d88d6c6782112d8c8ce51ee77c4dd" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::has_infinity</definition>
        <argsstring></argsstring>
        <name>has_infinity</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Supports infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2968" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a83611ff822d78d69ed6fd58c4ba48c33" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> bool</type>
        <definition>HALF_CONSTEXPR_CONST bool std::numeric_limits&lt; half_float::half &gt;::has_quiet_NaN</definition>
        <argsstring></argsstring>
        <name>has_quiet_NaN</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Supports quiet NaNs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2971" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2971" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a120d8b8b5e5c5d5ba0d7d3802859ee4f" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> float_denorm_style</type>
        <definition>HALF_CONSTEXPR_CONST float_denorm_style std::numeric_limits&lt; half_float::half &gt;::has_denorm</definition>
        <argsstring></argsstring>
        <name>has_denorm</name>
        <initializer>= denorm_present</initializer>
        <briefdescription>
<para>Supports subnormal values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2974" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a17a70ce9e02f8b890a0ebf5eb04c385b" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> float_round_style</type>
        <definition>HALF_CONSTEXPR_CONST float_round_style std::numeric_limits&lt; half_float::half &gt;::round_style</definition>
        <argsstring></argsstring>
        <name>round_style</name>
        <initializer>= (std::numeric_limits&lt;float&gt;::round_style==
			half_float::half::round_style) ? half_float::half::round_style : round_indeterminate</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rounding mode. Due to the mix of internal single-precision computations (using the rounding mode of the underlying single-precision implementation) with the rounding mode of the single-to-half conversions, the actual rounding mode might be <computeroutput>std::round_indeterminate</computeroutput> if the default half-precision rounding mode doesn&apos;t match the single-precision rounding mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2981" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a25dd523e9495b75166757d5f73197068" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::digits</definition>
        <argsstring></argsstring>
        <name>digits</name>
        <initializer>= 11</initializer>
        <briefdescription>
<para>Significant digits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2985" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1adb8ec10ec96a1c60db49b40554fb13ef" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::digits10</definition>
        <argsstring></argsstring>
        <name>digits10</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>Significant decimal digits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2988" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a07d190feb781f88a0d6190afd1d5279a" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::max_digits10</definition>
        <argsstring></argsstring>
        <name>max_digits10</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>Required decimal digits to represent all possible values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2991" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1af8a3c3c34ae601c519a4e5be73b81998" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::radix</definition>
        <argsstring></argsstring>
        <name>radix</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Number base. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2994" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2994" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae545fa9d20d845ae1bf55bb6ce6b7e1d" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::min_exponent</definition>
        <argsstring></argsstring>
        <name>min_exponent</name>
        <initializer>= -13</initializer>
        <briefdescription>
<para>One more than smallest exponent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2997" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ac8e5727691c06e4ee4fc124e7567edc3" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::min_exponent10</definition>
        <argsstring></argsstring>
        <name>min_exponent10</name>
        <initializer>= -4</initializer>
        <briefdescription>
<para>Smallest normalized representable power of 10. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3000" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a41f49d6fa628325afbe7870b0ce945c2" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::max_exponent</definition>
        <argsstring></argsstring>
        <name>max_exponent</name>
        <initializer>= 16</initializer>
        <briefdescription>
<para>One more than largest exponent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3003" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1aed5c9a3c44d6e9e6949926674648d7ce" prot="public" static="yes" mutable="no">
        <type><ref refid="half_8hpp_1a5df92c245e5d4e45d35fad7b6de73354" kindref="member">HALF_CONSTEXPR_CONST</ref> int</type>
        <definition>HALF_CONSTEXPR_CONST int std::numeric_limits&lt; half_float::half &gt;::max_exponent10</definition>
        <argsstring></argsstring>
        <name>max_exponent10</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>Largest finitely representable power of 10. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3006" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3006" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a52dd448e009c0a1a7e463c773cbd8f9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::min</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>min</name>
        <briefdescription>
<para>Smallest positive normal value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3009" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3009" bodyend="3009"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1abe8e9622711ffafb029c35b349d18af4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::lowest</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>lowest</name>
        <briefdescription>
<para>Smallest finite value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3012" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3012" bodyend="3012"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a18dff56a912af3306b967a49a7a1a859" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::max</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>max</name>
        <briefdescription>
<para>Largest finite value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3015" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3015" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ab0a429948d6c6be91abbd36f4d73eb08" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::epsilon</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>epsilon</name>
        <briefdescription>
<para>Difference between one and next representable value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3018" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3018" bodyend="3018"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a93220b59e5afbdb473c87f7046a95b06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::round_error</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>round_error</name>
        <briefdescription>
<para>Maximum rounding error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3021" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3021" bodyend="3022"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1aafcca31b982e48b928c1e6cc318f6e6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::infinity</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>infinity</name>
        <briefdescription>
<para>Positive infinity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3025" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3025" bodyend="3025"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a4583df9bd2b496cb47e7c0fa7d1fe7eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::quiet_NaN</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>quiet_NaN</name>
        <briefdescription>
<para>Quiet NaN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3028" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3028" bodyend="3028"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae0451fbc23a2d62bfd9f6bbf7956b4f3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::signaling_NaN</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>signaling_NaN</name>
        <briefdescription>
<para>Signalling NaN. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3031" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3031" bodyend="3031"/>
      </memberdef>
      <memberdef kind="function" id="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae6c0f9e198bc76d3edd0565e11c63664" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="half_8hpp_1ace3116a3e2cd66dd15780b92060987c7" kindref="member">HALF_CONSTEXPR</ref> <ref refid="classhalf__float_1_1half" kindref="compound">half_float::half</ref></type>
        <definition>static HALF_CONSTEXPR half_float::half std::numeric_limits&lt; half_float::half &gt;::denorm_min</definition>
        <argsstring>() HALF_NOTHROW</argsstring>
        <name>denorm_min</name>
        <briefdescription>
<para>Smallest positive subnormal value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="3034" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="3034" bodyend="3034"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Numeric limits for half-precision floats. Because of the underlying single-precision implementation of many operations, it inherits some properties from <computeroutput>std::numeric_limits&lt;float&gt;</computeroutput>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="819">
        <label>numeric_limits&lt; float &gt;</label>
      </node>
      <node id="818">
        <label>std::numeric_limits&lt; half_float::half &gt;</label>
        <link refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4"/>
        <childnode refid="819" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="821">
        <label>numeric_limits&lt; float &gt;</label>
      </node>
      <node id="820">
        <label>std::numeric_limits&lt; half_float::half &gt;</label>
        <link refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4"/>
        <childnode refid="821" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/tbeier/src/nifty/include/nifty/external/half.hpp" line="2953" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/external/half.hpp" bodystart="2952" bodyend="3035"/>
    <listofallmembers>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae6c0f9e198bc76d3edd0565e11c63664" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>denorm_min</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a25dd523e9495b75166757d5f73197068" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>digits</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1adb8ec10ec96a1c60db49b40554fb13ef" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>digits10</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ab0a429948d6c6be91abbd36f4d73eb08" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>epsilon</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a120d8b8b5e5c5d5ba0d7d3802859ee4f" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>has_denorm</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a808d88d6c6782112d8c8ce51ee77c4dd" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>has_infinity</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a83611ff822d78d69ed6fd58c4ba48c33" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>has_quiet_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1aafcca31b982e48b928c1e6cc318f6e6f" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>infinity</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a503b8e3d6c6828c85b21c17fda0e2bf2" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>is_exact</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1acdf5541f7eda3f27d4537c1e4c4528ad" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>is_iec559</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a77ce83e1744e781334a6c7f68e2b7e38" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>is_modulo</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a259bf36384293f18c4fbd40011b75107" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>is_signed</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1abe8e9622711ffafb029c35b349d18af4" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>lowest</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a18dff56a912af3306b967a49a7a1a859" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>max</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a07d190feb781f88a0d6190afd1d5279a" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>max_digits10</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a41f49d6fa628325afbe7870b0ce945c2" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>max_exponent</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1aed5c9a3c44d6e9e6949926674648d7ce" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>max_exponent10</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a52dd448e009c0a1a7e463c773cbd8f9e" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>min</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae545fa9d20d845ae1bf55bb6ce6b7e1d" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>min_exponent</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ac8e5727691c06e4ee4fc124e7567edc3" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>min_exponent10</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a4583df9bd2b496cb47e7c0fa7d1fe7eb" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>quiet_NaN</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1af8a3c3c34ae601c519a4e5be73b81998" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>radix</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a93220b59e5afbdb473c87f7046a95b06" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>round_error</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1a17a70ce9e02f8b890a0ebf5eb04c385b" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>round_style</name></member>
      <member refid="classstd_1_1numeric__limits_3_01half__float_1_1half_01_4_1ae0451fbc23a2d62bfd9f6bbf7956b4f3" prot="public" virt="non-virtual"><scope>std::numeric_limits&lt; half_float::half &gt;</scope><name>signaling_NaN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
