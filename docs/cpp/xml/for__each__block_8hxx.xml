<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="for__each__block_8hxx" kind="file" language="C++">
    <compoundname>for_each_block.hxx</compoundname>
    <includes local="no">sstream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">array</includes>
    <includes refid="arithmetic__array_8hxx" local="yes">nifty/array/arithmetic_array.hxx</includes>
    <includes refid="for__each__coordinate_8hxx" local="yes">nifty/tools/for_each_coordinate.hxx</includes>
    <includedby refid="compute__grid__rag__hdf5_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/graph/rag/detail_rag/compute_grid_rag_hdf5.hxx</includedby>
    <includedby refid="grid__rag__accumulate_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_accumulate.hxx</includedby>
    <incdepgraph>
      <node id="12386">
        <label>atomic</label>
      </node>
      <node id="12384">
        <label>functional</label>
      </node>
      <node id="12389">
        <label>queue</label>
      </node>
      <node id="12380">
        <label>limits</label>
      </node>
      <node id="12378">
        <label>cstdint</label>
      </node>
      <node id="12382">
        <label>nifty/tools/for_each_coordinate.hxx</label>
        <link refid="for__each__coordinate_8hxx"/>
        <childnode refid="12372" relation="include">
        </childnode>
        <childnode refid="12373" relation="include">
        </childnode>
        <childnode refid="12374" relation="include">
        </childnode>
        <childnode refid="12383" relation="include">
        </childnode>
        <childnode refid="12375" relation="include">
        </childnode>
      </node>
      <node id="12381">
        <label>cmath</label>
      </node>
      <node id="12391">
        <label>boost/iterator/transform_iterator.hpp</label>
      </node>
      <node id="12379">
        <label>stdexcept</label>
      </node>
      <node id="12392">
        <label>boost/iterator/counting_iterator.hpp</label>
      </node>
      <node id="12390">
        <label>condition_variable</label>
      </node>
      <node id="12387">
        <label>future</label>
      </node>
      <node id="12376">
        <label>vector</label>
      </node>
      <node id="12375">
        <label>nifty/array/arithmetic_array.hxx</label>
        <link refid="arithmetic__array_8hxx"/>
        <childnode refid="12374" relation="include">
        </childnode>
        <childnode refid="12376" relation="include">
        </childnode>
        <childnode refid="12377" relation="include">
        </childnode>
      </node>
      <node id="12374">
        <label>array</label>
      </node>
      <node id="12372">
        <label>sstream</label>
      </node>
      <node id="12377">
        <label>nifty/tools/runtime_check.hxx</label>
        <link refid="runtime__check_8hxx"/>
        <childnode refid="12378" relation="include">
        </childnode>
        <childnode refid="12379" relation="include">
        </childnode>
        <childnode refid="12372" relation="include">
        </childnode>
        <childnode refid="12376" relation="include">
        </childnode>
        <childnode refid="12380" relation="include">
        </childnode>
        <childnode refid="12381" relation="include">
        </childnode>
      </node>
      <node id="12383">
        <label>nifty/parallel/threadpool.hxx</label>
        <link refid="threadpool_8hxx"/>
        <childnode refid="12384" relation="include">
        </childnode>
        <childnode refid="12385" relation="include">
        </childnode>
        <childnode refid="12386" relation="include">
        </childnode>
        <childnode refid="12376" relation="include">
        </childnode>
        <childnode refid="12387" relation="include">
        </childnode>
        <childnode refid="12388" relation="include">
        </childnode>
        <childnode refid="12389" relation="include">
        </childnode>
        <childnode refid="12390" relation="include">
        </childnode>
        <childnode refid="12379" relation="include">
        </childnode>
        <childnode refid="12381" relation="include">
        </childnode>
        <childnode refid="12391" relation="include">
        </childnode>
        <childnode refid="12392" relation="include">
        </childnode>
        <childnode refid="12377" relation="include">
        </childnode>
      </node>
      <node id="12388">
        <label>mutex</label>
      </node>
      <node id="12371">
        <label>/home/tbeier/src/nifty/include/nifty/tools/for_each_block.hxx</label>
        <link refid="for_each_block.hxx"/>
        <childnode refid="12372" relation="include">
        </childnode>
        <childnode refid="12373" relation="include">
        </childnode>
        <childnode refid="12374" relation="include">
        </childnode>
        <childnode refid="12375" relation="include">
        </childnode>
        <childnode refid="12382" relation="include">
        </childnode>
      </node>
      <node id="12373">
        <label>chrono</label>
      </node>
      <node id="12385">
        <label>thread</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12395">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_hdf5.hxx</label>
        <link refid="grid__rag__hdf5_8hxx"/>
      </node>
      <node id="12396">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_stacked_2d_hdf5.hxx</label>
        <link refid="grid__rag__stacked__2d__hdf5_8hxx"/>
      </node>
      <node id="12397">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_accumulate.hxx</label>
        <link refid="grid__rag__accumulate_8hxx"/>
      </node>
      <node id="12393">
        <label>/home/tbeier/src/nifty/include/nifty/tools/for_each_block.hxx</label>
        <link refid="for_each_block.hxx"/>
        <childnode refid="12394" relation="include">
        </childnode>
        <childnode refid="12397" relation="include">
        </childnode>
      </node>
      <node id="12394">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/detail_rag/compute_grid_rag_hdf5.hxx</label>
        <link refid="compute__grid__rag__hdf5_8hxx"/>
        <childnode refid="12395" relation="include">
        </childnode>
        <childnode refid="12396" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacenifty">nifty</innernamespace>
    <innernamespace refid="namespacenifty_1_1tools">nifty::tools</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arithmetic__array_8hxx" kindref="compound">nifty/array/arithmetic_array.hxx</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="for__each__coordinate_8hxx" kindref="compound">nifty/tools/for_each_coordinate.hxx</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacenifty" kindref="compound">nifty</ref>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">tools{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DIM,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE_T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BLOCK_SHAPE_T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="16" refid="namespacenifty_1_1tools_1ac5e8d4b06486a3d603cdbb7314f8dd75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacenifty_1_1tools_1ac5e8d4b06486a3d603cdbb7314f8dd75" kindref="member">parallelForEachBlock</ref>(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnifty_1_1parallel_1_1ThreadPool" kindref="compound">parallel::ThreadPool</ref><sp/>&amp;<sp/>threadpool,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;BLOCK_SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/>blockShape,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>&amp;&amp;<sp/>f</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;int64_t, DIM&gt;</ref><sp/>Coord;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coord<sp/>blocksPerAxis,<sp/>actualblocksShape;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d=0;<sp/>d&lt;DIM;<sp/>++d){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualblocksShape[d]<sp/>=<sp/>std::min(int64_t(blockShape[d]),<sp/>int64_t(shape[d]));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocksPerAxis[d]<sp/>=<sp/>shape[d]<sp/>/<sp/>actualblocksShape[d];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenifty_1_1tools_1a34595523082dffa3f21d4b40cc13cfae" kindref="member">parallelForEachCoordinate</ref>(threadpool,<sp/>blocksPerAxis,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Coord<sp/>&amp;<sp/>blockCoord){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coord<sp/>blockBegin,<sp/>blockEnd;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d=0;<sp/>d&lt;DIM;<sp/>++d){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockBegin[d]<sp/>=<sp/>blockCoord[d]<sp/>*<sp/>actualblocksShape[d];</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockEnd[d]<sp/>=<sp/><sp/>std::min(shape[d],<sp/>(blockCoord[d]<sp/>+<sp/>1)<sp/>*<sp/>blockShape[d]);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(tid,<sp/>blockBegin,<sp/>blockEnd);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DIM,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>SHAPE_T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BLOCK_SHAPE_T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OVERLAP_SHAPE_T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="43" refid="namespacenifty_1_1tools_1af942eef6747790a4f8d6868b1f95c3ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacenifty_1_1tools_1af942eef6747790a4f8d6868b1f95c3ee" kindref="member">parallelForEachBlockWithOverlap</ref>(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classnifty_1_1parallel_1_1ThreadPool" kindref="compound">parallel::ThreadPool</ref><sp/>&amp;<sp/>threadpool,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/><sp/><sp/><sp/>shape,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;BLOCK_SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/>blockShape,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;OVERLAP_SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/>overlapBegin,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;OVERLAP_SHAPE_T, DIM&gt;</ref><sp/>&amp;<sp/>overlapEnd,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F<sp/>&amp;&amp;<sp/>f</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classnifty_1_1array_1_1ArrayExtender" kindref="compound">array::StaticArray&lt;int64_t, DIM&gt;</ref><sp/>Coord;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coord<sp/>blocksPerAxis,<sp/>actualblocksShape;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d=0;<sp/>d&lt;DIM;<sp/>++d){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actualblocksShape[d]<sp/>=<sp/>std::min(int64_t(blockShape[d]),<sp/>int64_t(shape[d]));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocksPerAxis[d]<sp/>=<sp/>shape[d]<sp/>/<sp/>actualblocksShape[d];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(actualblocksShape[d]*blocksPerAxis[d]<sp/>&lt;<sp/>shape[d]){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++blocksPerAxis[d];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacenifty_1_1tools_1a34595523082dffa3f21d4b40cc13cfae" kindref="member">parallelForEachCoordinate</ref>(threadpool,<sp/>blocksPerAxis,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Coord<sp/>&amp;<sp/>blockCoord){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Coord<sp/>blockBegin,<sp/>blockEnd,<sp/>blockWithOlBegin,<sp/>blockWithOlEnd;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d=0;<sp/>d&lt;DIM;<sp/>++d){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>bc<sp/>=<sp/>blockCoord[d];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>bs<sp/>=<sp/>actualblocksShape[d];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockBegin[d]<sp/>=<sp/>blockCoord[d]<sp/>*<sp/>bs;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockEnd[d]<sp/>=<sp/><sp/>std::min(shape[d],<sp/>(blockCoord[d]<sp/>+<sp/>1)<sp/>*<sp/>bs);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>bBegin<sp/>=<sp/>blockBegin[d]<sp/><sp/>-<sp/>int64_t(overlapBegin[d]);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>bEnd<sp/>=<sp/><sp/><sp/>blockEnd[d]<sp/>+<sp/>int64_t(overlapEnd[d]);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockWithOlBegin[d]<sp/>=<sp/><sp/>std::max(int64_t(0),<sp/>bBegin);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockWithOlEnd[d]<sp/>=<sp/><sp/>std::min(shape[d],<sp/>bEnd);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(tid,<sp/>blockBegin,<sp/>blockEnd,<sp/>blockWithOlBegin,<sp/>blockWithOlEnd);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>nifty::tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>nifty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tbeier/src/nifty/include/nifty/tools/for_each_block.hxx"/>
  </compounddef>
</doxygen>
