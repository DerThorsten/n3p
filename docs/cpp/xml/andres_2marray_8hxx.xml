<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="andres_2marray_8hxx" kind="file" language="C++">
    <compoundname>marray.hxx</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iterator</includes>
    <includes local="no">vector</includes>
    <includes local="no">set</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">numeric</includes>
    <includes local="no">functional</includes>
    <includedby refid="marray-fftw_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/marray/andres/marray-fftw.hxx</includedby>
    <includedby refid="marray-hdf5_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/marray/andres/marray-hdf5.hxx</includedby>
    <includedby refid="marray_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/marray/marray.hxx</includedby>
    <includedby refid="marray__hdf5_8hxx" local="yes">/home/tbeier/src/nifty/include/nifty/marray/marray_hdf5.hxx</includedby>
    <incdepgraph>
      <node id="11411">
        <label>functional</label>
      </node>
      <node id="11401">
        <label>limits</label>
      </node>
      <node id="11405">
        <label>iterator</label>
      </node>
      <node id="11398">
        <label>cassert</label>
      </node>
      <node id="11400">
        <label>stdexcept</label>
      </node>
      <node id="11410">
        <label>numeric</label>
      </node>
      <node id="11402">
        <label>string</label>
      </node>
      <node id="11397">
        <label>/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx</label>
        <link refid="andres/marray.hxx"/>
        <childnode refid="11398" relation="include">
        </childnode>
        <childnode refid="11399" relation="include">
        </childnode>
        <childnode refid="11400" relation="include">
        </childnode>
        <childnode refid="11401" relation="include">
        </childnode>
        <childnode refid="11402" relation="include">
        </childnode>
        <childnode refid="11403" relation="include">
        </childnode>
        <childnode refid="11404" relation="include">
        </childnode>
        <childnode refid="11405" relation="include">
        </childnode>
        <childnode refid="11406" relation="include">
        </childnode>
        <childnode refid="11407" relation="include">
        </childnode>
        <childnode refid="11408" relation="include">
        </childnode>
        <childnode refid="11409" relation="include">
        </childnode>
        <childnode refid="11410" relation="include">
        </childnode>
        <childnode refid="11411" relation="include">
        </childnode>
      </node>
      <node id="11406">
        <label>vector</label>
      </node>
      <node id="11403">
        <label>sstream</label>
      </node>
      <node id="11408">
        <label>iostream</label>
      </node>
      <node id="11399">
        <label>cstddef</label>
      </node>
      <node id="11407">
        <label>set</label>
      </node>
      <node id="11404">
        <label>cstring</label>
      </node>
      <node id="11409">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11435">
        <label>/home/tbeier/src/nifty/include/nifty/graph/agglo/cluster_policies/node_and_edge_weighted_cluster_policy.hxx</label>
        <link refid="node__and__edge__weighted__cluster__policy_8hxx"/>
      </node>
      <node id="11461">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/multicut/multicut_objective.hxx</label>
        <link refid="python_2graph_2optimization_2multicut_2multicut__objective_8hxx"/>
        <childnode refid="11462" relation="include">
        </childnode>
      </node>
      <node id="11420">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_hdf5.hxx</label>
        <link refid="grid__rag__hdf5_8hxx"/>
      </node>
      <node id="11460">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/perturb_and_map.hxx</label>
        <link refid="perturb__and__map_8hxx"/>
      </node>
      <node id="11456">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/cc_fusion_move_based.hxx</label>
        <link refid="cc__fusion__move__based_8hxx"/>
      </node>
      <node id="11424">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/features/geometric_features.hxx</label>
        <link refid="geometric__features_8hxx"/>
      </node>
      <node id="11489">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_stacked_2d.hxx</label>
        <link refid="grid__rag__stacked__2d_8hxx"/>
        <childnode refid="11421" relation="include">
        </childnode>
      </node>
      <node id="11471">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/detail/lifted_twocut_kernighan_lin.hxx</label>
        <link refid="lifted__twocut__kernighan__lin_8hxx"/>
        <childnode refid="11472" relation="include">
        </childnode>
      </node>
      <node id="11476">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/mincut/mincut_greedy_additive.hxx</label>
        <link refid="mincut__greedy__additive_8hxx"/>
      </node>
      <node id="11426">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/features.hxx</label>
        <link refid="features_8hxx"/>
      </node>
      <node id="11444">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/lifted_multicut/export_lifted_multicut_solver.hxx</label>
        <link refid="export__lifted__multicut__solver_8hxx"/>
      </node>
      <node id="11477">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/multicut_greedy_additive.hxx</label>
        <link refid="multicut__greedy__additive_8hxx"/>
        <childnode refid="11478" relation="include">
        </childnode>
        <childnode refid="11455" relation="include">
        </childnode>
        <childnode refid="11479" relation="include">
        </childnode>
      </node>
      <node id="11464">
        <label>/home/tbeier/src/nifty/include/nifty/graph/edge_contraction_graph.hxx</label>
        <link refid="graph_2edge__contraction__graph_8hxx"/>
        <childnode refid="11465" relation="include">
        </childnode>
        <childnode refid="11466" relation="include">
        </childnode>
        <childnode refid="11468" relation="include">
        </childnode>
        <childnode refid="11469" relation="include">
        </childnode>
        <childnode refid="11435" relation="include">
        </childnode>
        <childnode refid="11470" relation="include">
        </childnode>
        <childnode refid="11471" relation="include">
        </childnode>
        <childnode refid="11441" relation="include">
        </childnode>
        <childnode refid="11473" relation="include">
        </childnode>
        <childnode refid="11474" relation="include">
        </childnode>
        <childnode refid="11475" relation="include">
        </childnode>
        <childnode refid="11472" relation="include">
        </childnode>
        <childnode refid="11476" relation="include">
        </childnode>
        <childnode refid="11449" relation="include">
        </childnode>
        <childnode refid="11477" relation="include">
        </childnode>
        <childnode refid="11480" relation="include">
        </childnode>
      </node>
      <node id="11458">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/kernighan_lin.hxx</label>
        <link refid="kernighan__lin_8hxx"/>
      </node>
      <node id="11465">
        <label>/home/tbeier/src/nifty/include/nifty/graph/agglo/cluster_policies/edge_weighted_cluster_policy.hxx</label>
        <link refid="edge__weighted__cluster__policy_8hxx"/>
      </node>
      <node id="11474">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_andres_kernighan_lin.hxx</label>
        <link refid="lifted__multicut__andres__kernighan__lin_8hxx"/>
      </node>
      <node id="11440">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/fusion_move.hxx</label>
        <link refid="lifted__multicut_2fusion__move_8hxx"/>
        <childnode refid="11441" relation="include">
        </childnode>
      </node>
      <node id="11449">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/cgc.hxx</label>
        <link refid="cgc_8hxx"/>
      </node>
      <node id="11470">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/common/cc_fusion_move_based_impl.hxx</label>
        <link refid="cc__fusion__move__based__impl_8hxx"/>
        <childnode refid="11448" relation="include">
        </childnode>
        <childnode refid="11456" relation="include">
        </childnode>
      </node>
      <node id="11455">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/fusion_move.hxx</label>
        <link refid="multicut_2fusion__move_8hxx"/>
        <childnode refid="11456" relation="include">
        </childnode>
        <childnode refid="11457" relation="include">
        </childnode>
      </node>
      <node id="11436">
        <label>/home/tbeier/src/nifty/include/nifty/graph/directed_graph_base.hxx</label>
        <link refid="directed__graph__base_8hxx"/>
        <childnode refid="11437" relation="include">
        </childnode>
        <childnode refid="11438" relation="include">
        </childnode>
      </node>
      <node id="11494">
        <label>/home/tbeier/src/nifty/include/nifty/ground_truth/overlap.hxx</label>
        <link refid="overlap_8hxx"/>
      </node>
      <node id="11492">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_labels.hxx</label>
        <link refid="grid__rag__labels_8hxx"/>
        <childnode refid="11485" relation="include">
        </childnode>
        <childnode refid="11486" relation="include">
        </childnode>
      </node>
      <node id="11428">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/filled_topological_grid.hxx</label>
        <link refid="filled__topological__grid_8hxx"/>
      </node>
      <node id="11417">
        <label>/home/tbeier/src/nifty/include/nifty/hdf5/hdf5_array.hxx</label>
        <link refid="hdf5__array_8hxx"/>
        <childnode refid="11418" relation="include">
        </childnode>
      </node>
      <node id="11446">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/common/cc_fusion_move_impl.hxx</label>
        <link refid="cc__fusion__move__impl_8hxx"/>
      </node>
      <node id="11463">
        <label>/home/tbeier/src/nifty/include/nifty/graph/undirected_graph_base.hxx</label>
        <link refid="undirected__graph__base_8hxx"/>
        <childnode refid="11464" relation="include">
        </childnode>
        <childnode refid="11482" relation="include">
        </childnode>
        <childnode refid="11484" relation="include">
        </childnode>
      </node>
      <node id="11457">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/fusion_move_based.hxx</label>
        <link refid="multicut_2fusion__move__based_8hxx"/>
      </node>
      <node id="11451">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/mincut/export_mincut_solver.hxx</label>
        <link refid="export__mincut__solver_8hxx"/>
      </node>
      <node id="11495">
        <label>/home/tbeier/src/nifty/include/nifty/ground_truth/seg_to_edges.hxx</label>
        <link refid="seg__to__edges_8hxx"/>
      </node>
      <node id="11442">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_mp.hxx</label>
        <link refid="lifted__multicut__mp_8hxx"/>
      </node>
      <node id="11425">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/features/topological_features.hxx</label>
        <link refid="topological__features_8hxx"/>
      </node>
      <node id="11452">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/multicut_objective.hxx</label>
        <link refid="graph_2optimization_2multicut_2multicut__objective_8hxx"/>
        <childnode refid="11439" relation="include">
        </childnode>
        <childnode refid="11453" relation="include">
        </childnode>
        <childnode refid="11449" relation="include">
        </childnode>
        <childnode refid="11454" relation="include">
        </childnode>
        <childnode refid="11455" relation="include">
        </childnode>
        <childnode refid="11458" relation="include">
        </childnode>
        <childnode refid="11459" relation="include">
        </childnode>
        <childnode refid="11460" relation="include">
        </childnode>
        <childnode refid="11461" relation="include">
        </childnode>
      </node>
      <node id="11421">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_stacked_2d_hdf5.hxx</label>
        <link refid="grid__rag__stacked__2d__hdf5_8hxx"/>
      </node>
      <node id="11448">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/mincut/mincut_cc_fusion_move_based.hxx</label>
        <link refid="mincut__cc__fusion__move__based_8hxx"/>
      </node>
      <node id="11475">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_greedy_additive.hxx</label>
        <link refid="lifted__multicut__greedy__additive_8hxx"/>
        <childnode refid="11440" relation="include">
        </childnode>
        <childnode refid="11442" relation="include">
        </childnode>
      </node>
      <node id="11433">
        <label>/home/tbeier/src/nifty/include/nifty/filters/gaussian_curvature.hxx</label>
        <link refid="gaussian__curvature_8hxx"/>
        <childnode refid="11424" relation="include">
        </childnode>
        <childnode refid="11425" relation="include">
        </childnode>
      </node>
      <node id="11498">
        <label>/home/tbeier/src/nifty/include/nifty/tools/block_access.hxx</label>
        <link refid="block__access_8hxx"/>
        <childnode refid="11492" relation="include">
        </childnode>
        <childnode refid="11418" relation="include">
        </childnode>
        <childnode refid="11416" relation="include">
        </childnode>
        <childnode refid="11417" relation="include">
        </childnode>
        <childnode refid="11497" relation="include">
        </childnode>
      </node>
      <node id="11479">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/proposal_generators/greedy_additive_proposals.hxx</label>
        <link refid="greedy__additive__proposals_8hxx"/>
      </node>
      <node id="11412">
        <label>/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx</label>
        <link refid="andres/marray.hxx"/>
        <childnode refid="11413" relation="include">
        </childnode>
        <childnode refid="11414" relation="include">
        </childnode>
        <childnode refid="11422" relation="include">
        </childnode>
        <childnode refid="11415" relation="include">
        </childnode>
      </node>
      <node id="11488">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_features.hxx</label>
        <link refid="grid__rag__features_8hxx"/>
      </node>
      <node id="11490">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/undirected_list_graph.hxx</label>
        <link refid="python_2graph_2undirected__list__graph_8hxx"/>
        <childnode refid="11491" relation="include">
        </childnode>
        <childnode refid="11481" relation="include">
        </childnode>
      </node>
      <node id="11468">
        <label>/home/tbeier/src/nifty/include/nifty/graph/agglo/cluster_policies/mala_cluster_policy.hxx</label>
        <link refid="mala__cluster__policy_8hxx"/>
      </node>
      <node id="11459">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/multicut_decomposer.hxx</label>
        <link refid="multicut__decomposer_8hxx"/>
      </node>
      <node id="11491">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/agglo/export_agglomerative_clustering.hxx</label>
        <link refid="export__agglomerative__clustering_8hxx"/>
      </node>
      <node id="11480">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/edge_contraction_graph.hxx</label>
        <link refid="python_2graph_2edge__contraction__graph_8hxx"/>
        <childnode refid="11481" relation="include">
        </childnode>
      </node>
      <node id="11418">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_labels_hdf5.hxx</label>
        <link refid="grid__rag__labels__hdf5_8hxx"/>
        <childnode refid="11419" relation="include">
        </childnode>
        <childnode refid="11420" relation="include">
        </childnode>
        <childnode refid="11421" relation="include">
        </childnode>
      </node>
      <node id="11485">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/detail_rag/compute_grid_rag.hxx</label>
        <link refid="compute__grid__rag_8hxx"/>
        <childnode refid="11486" relation="include">
        </childnode>
      </node>
      <node id="11454">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/chained_solvers.hxx</label>
        <link refid="chained__solvers_8hxx"/>
      </node>
      <node id="11496">
        <label>/home/tbeier/src/nifty/include/nifty/ground_truth/seg_to_lifted_edges.hxx</label>
        <link refid="seg__to__lifted__edges_8hxx"/>
      </node>
      <node id="11437">
        <label>/home/tbeier/src/nifty/include/nifty/graph/directed_graph_view.hxx</label>
        <link refid="directed__graph__view_8hxx"/>
      </node>
      <node id="11493">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/project_to_pixels.hxx</label>
        <link refid="project__to__pixels_8hxx"/>
      </node>
      <node id="11487">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag_accumulate.hxx</label>
        <link refid="grid__rag__accumulate_8hxx"/>
      </node>
      <node id="11483">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/undirected_grid_graph.hxx</label>
        <link refid="python_2graph_2undirected__grid__graph_8hxx"/>
      </node>
      <node id="11453">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/multicut/block_multicut.hxx</label>
        <link refid="block__multicut_8hxx"/>
      </node>
      <node id="11423">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/bounds.hxx</label>
        <link refid="bounds_8hxx"/>
        <childnode refid="11424" relation="include">
        </childnode>
        <childnode refid="11425" relation="include">
        </childnode>
        <childnode refid="11426" relation="include">
        </childnode>
      </node>
      <node id="11427">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/cgp.hxx</label>
        <link refid="cgp_8hxx"/>
      </node>
      <node id="11441">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/fusion_move_based.hxx</label>
        <link refid="lifted__multicut_2fusion__move__based_8hxx"/>
      </node>
      <node id="11431">
        <label>/home/tbeier/src/nifty/include/nifty/features/fastfilters_wrapper.hxx</label>
        <link refid="fastfilters__wrapper_8hxx"/>
      </node>
      <node id="11414">
        <label>/home/tbeier/src/nifty/include/nifty/marray/andres/marray-hdf5.hxx</label>
        <link refid="marray-hdf5_8hxx"/>
        <childnode refid="11415" relation="include">
        </childnode>
      </node>
      <node id="11450">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/mincut/mincut_objective.hxx</label>
        <link refid="python_2graph_2optimization_2mincut_2mincut__objective_8hxx"/>
        <childnode refid="11451" relation="include">
        </childnode>
      </node>
      <node id="11447">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/mincut/mincut_cc_fusion_move.hxx</label>
        <link refid="mincut__cc__fusion__move_8hxx"/>
        <childnode refid="11448" relation="include">
        </childnode>
      </node>
      <node id="11466">
        <label>/home/tbeier/src/nifty/include/nifty/graph/agglo/cluster_policies/lifted_graph_edge_weighted_cluster_policy.hxx</label>
        <link refid="lifted__graph__edge__weighted__cluster__policy_8hxx"/>
        <childnode refid="11467" relation="include">
        </childnode>
      </node>
      <node id="11486">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/grid_rag.hxx</label>
        <link refid="grid__rag_8hxx"/>
        <childnode refid="11487" relation="include">
        </childnode>
        <childnode refid="11488" relation="include">
        </childnode>
        <childnode refid="11420" relation="include">
        </childnode>
        <childnode refid="11489" relation="include">
        </childnode>
      </node>
      <node id="11481">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/common/export_solver_factory.hxx</label>
        <link refid="export__solver__factory_8hxx"/>
      </node>
      <node id="11473">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_andres_greedy_additive.hxx</label>
        <link refid="lifted__multicut__andres__greedy__additive_8hxx"/>
      </node>
      <node id="11482">
        <label>/home/tbeier/src/nifty/include/nifty/graph/undirected_grid_graph.hxx</label>
        <link refid="graph_2undirected__grid__graph_8hxx"/>
        <childnode refid="11483" relation="include">
        </childnode>
      </node>
      <node id="11434">
        <label>/home/tbeier/src/nifty/include/nifty/graph/graph_maps.hxx</label>
        <link refid="graph__maps_8hxx"/>
        <childnode refid="11435" relation="include">
        </childnode>
        <childnode refid="11436" relation="include">
        </childnode>
        <childnode refid="11439" relation="include">
        </childnode>
        <childnode refid="11445" relation="include">
        </childnode>
        <childnode refid="11452" relation="include">
        </childnode>
        <childnode refid="11463" relation="include">
        </childnode>
      </node>
      <node id="11439">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_objective.hxx</label>
        <link refid="graph_2optimization_2lifted__multicut_2lifted__multicut__objective_8hxx"/>
        <childnode refid="11440" relation="include">
        </childnode>
        <childnode refid="11442" relation="include">
        </childnode>
        <childnode refid="11443" relation="include">
        </childnode>
      </node>
      <node id="11472">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_multicut_kernighan_lin.hxx</label>
        <link refid="lifted__multicut__kernighan__lin_8hxx"/>
        <childnode refid="11442" relation="include">
        </childnode>
      </node>
      <node id="11415">
        <label>/home/tbeier/src/nifty/include/nifty/marray/marray_hdf5.hxx</label>
        <link refid="marray__hdf5_8hxx"/>
        <childnode refid="11416" relation="include">
        </childnode>
        <childnode refid="11417" relation="include">
        </childnode>
      </node>
      <node id="11445">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/mincut/mincut_objective.hxx</label>
        <link refid="graph_2optimization_2mincut_2mincut__objective_8hxx"/>
        <childnode refid="11446" relation="include">
        </childnode>
        <childnode refid="11447" relation="include">
        </childnode>
        <childnode refid="11449" relation="include">
        </childnode>
        <childnode refid="11450" relation="include">
        </childnode>
      </node>
      <node id="11430">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/topological_grid.hxx</label>
        <link refid="topological__grid_8hxx"/>
        <childnode refid="11423" relation="include">
        </childnode>
        <childnode refid="11427" relation="include">
        </childnode>
        <childnode refid="11428" relation="include">
        </childnode>
        <childnode refid="11429" relation="include">
        </childnode>
      </node>
      <node id="11484">
        <label>/home/tbeier/src/nifty/include/nifty/graph/undirected_list_graph.hxx</label>
        <link refid="graph_2undirected__list__graph_8hxx"/>
        <childnode refid="11446" relation="include">
        </childnode>
        <childnode refid="11440" relation="include">
        </childnode>
        <childnode refid="11439" relation="include">
        </childnode>
        <childnode refid="11447" relation="include">
        </childnode>
        <childnode refid="11449" relation="include">
        </childnode>
        <childnode refid="11455" relation="include">
        </childnode>
        <childnode refid="11459" relation="include">
        </childnode>
        <childnode refid="11485" relation="include">
        </childnode>
        <childnode refid="11419" relation="include">
        </childnode>
        <childnode refid="11486" relation="include">
        </childnode>
        <childnode refid="11490" relation="include">
        </childnode>
      </node>
      <node id="11422">
        <label>/home/tbeier/src/nifty/include/nifty/marray/marray.hxx</label>
        <link refid="marray_8hxx"/>
        <childnode refid="11423" relation="include">
        </childnode>
        <childnode refid="11427" relation="include">
        </childnode>
        <childnode refid="11424" relation="include">
        </childnode>
        <childnode refid="11425" relation="include">
        </childnode>
        <childnode refid="11426" relation="include">
        </childnode>
        <childnode refid="11428" relation="include">
        </childnode>
        <childnode refid="11429" relation="include">
        </childnode>
        <childnode refid="11430" relation="include">
        </childnode>
        <childnode refid="11431" relation="include">
        </childnode>
        <childnode refid="11432" relation="include">
        </childnode>
        <childnode refid="11433" relation="include">
        </childnode>
        <childnode refid="11434" relation="include">
        </childnode>
        <childnode refid="11485" relation="include">
        </childnode>
        <childnode refid="11419" relation="include">
        </childnode>
        <childnode refid="11486" relation="include">
        </childnode>
        <childnode refid="11487" relation="include">
        </childnode>
        <childnode refid="11488" relation="include">
        </childnode>
        <childnode refid="11492" relation="include">
        </childnode>
        <childnode refid="11418" relation="include">
        </childnode>
        <childnode refid="11493" relation="include">
        </childnode>
        <childnode refid="11494" relation="include">
        </childnode>
        <childnode refid="11495" relation="include">
        </childnode>
        <childnode refid="11496" relation="include">
        </childnode>
        <childnode refid="11415" relation="include">
        </childnode>
        <childnode refid="11497" relation="include">
        </childnode>
        <childnode refid="11498" relation="include">
        </childnode>
        <childnode refid="11499" relation="include">
        </childnode>
      </node>
      <node id="11413">
        <label>/home/tbeier/src/nifty/include/nifty/marray/andres/marray-fftw.hxx</label>
        <link refid="marray-fftw_8hxx"/>
      </node>
      <node id="11462">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/multicut/export_multicut_solver.hxx</label>
        <link refid="export__multicut__solver_8hxx"/>
      </node>
      <node id="11429">
        <label>/home/tbeier/src/nifty/include/nifty/cgp/geometry.hxx</label>
        <link refid="geometry_8hxx"/>
        <childnode refid="11424" relation="include">
        </childnode>
        <childnode refid="11425" relation="include">
        </childnode>
      </node>
      <node id="11438">
        <label>/home/tbeier/src/nifty/include/nifty/graph/simple_directed_graph.hxx</label>
        <link refid="simple__directed__graph_8hxx"/>
      </node>
      <node id="11419">
        <label>/home/tbeier/src/nifty/include/nifty/graph/rag/detail_rag/compute_grid_rag_hdf5.hxx</label>
        <link refid="compute__grid__rag__hdf5_8hxx"/>
        <childnode refid="11420" relation="include">
        </childnode>
        <childnode refid="11421" relation="include">
        </childnode>
      </node>
      <node id="11497">
        <label>/home/tbeier/src/nifty/include/nifty/python/converter.hxx</label>
        <link refid="converter_8hxx"/>
        <childnode refid="11491" relation="include">
        </childnode>
        <childnode refid="11481" relation="include">
        </childnode>
      </node>
      <node id="11469">
        <label>/home/tbeier/src/nifty/include/nifty/graph/agglo/cluster_policies/minimum_node_size_cluster_policy.hxx</label>
        <link refid="minimum__node__size__cluster__policy_8hxx"/>
      </node>
      <node id="11432">
        <label>/home/tbeier/src/nifty/include/nifty/filters/affinities.hxx</label>
        <link refid="affinities_8hxx"/>
      </node>
      <node id="11467">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/lifted_multicut/lifted_graph_features.hxx</label>
        <link refid="lifted__graph__features_8hxx"/>
      </node>
      <node id="11478">
        <label>/home/tbeier/src/nifty/include/nifty/graph/optimization/common/proposal_generators/greedy_additive_multicut_proposal_generator.hxx</label>
        <link refid="greedy__additive__multicut__proposal__generator_8hxx"/>
      </node>
      <node id="11416">
        <label>/home/tbeier/src/nifty/include/nifty/hdf5/hdf5.hxx</label>
        <link refid="hdf5_8hxx"/>
      </node>
      <node id="11499">
        <label>/home/tbeier/src/nifty/include/nifty/tools/make_dense.hxx</label>
        <link refid="make__dense_8hxx"/>
      </node>
      <node id="11443">
        <label>/home/tbeier/src/nifty/include/nifty/python/graph/optimization/lifted_multicut/lifted_multicut_objective.hxx</label>
        <link refid="python_2graph_2optimization_2lifted__multicut_2lifted__multicut__objective_8hxx"/>
        <childnode refid="11444" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structandres_1_1InitializationSkipping" prot="public">andres::InitializationSkipping</innerclass>
    <innerclass refid="classandres_1_1ViewExpression" prot="public">andres::ViewExpression</innerclass>
    <innerclass refid="classandres_1_1View" prot="public">andres::View</innerclass>
    <innerclass refid="classandres_1_1Iterator" prot="public">andres::Iterator</innerclass>
    <innerclass refid="classandres_1_1Marray" prot="public">andres::Marray</innerclass>
    <innerclass refid="classandres_1_1View" prot="public">andres::View</innerclass>
    <innerclass refid="classandres_1_1Iterator" prot="public">andres::Iterator</innerclass>
    <innerclass refid="classandres_1_1Marray" prot="public">andres::Marray</innerclass>
    <innerclass refid="classandres_1_1ViewExpression" prot="public">andres::ViewExpression</innerclass>
    <innernamespace refid="namespaceandres">andres</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="andres_2marray_8hxx_1aa5ba9d328165a1e7ce5e9b52ddd593e5" prot="public" static="no">
        <name>NIFTY_ANDRES_MARRAY_HXX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Marray: Fast Runtime-Flexible Multi-dimensional Arrays and Views in C++. </para><para>Copyright (c) 2013 by Bjoern Andres, <ulink url="mailto:bjoern@andres.sc">bjoern@andres.sc</ulink></para><sect1 id="andres_2marray_8hxx_1section_abstract">
<title>Short Description</title>
<para>Marray is a single header file for fast multi-dimensional arrays and views in C++. Unlike in other implementations such as boost MultiArray and Blitz++, the dimension of Marray views and arrays can be set and changed at runtime. Dimension is not a template parameter in Marray. Arrays and views that have the same type of entries but different dimension are therefore of the same C++ type. In conjunction with the comprehensive and convenient Marray interface, this brings some of the flexibility known from high-level languages such as Python, R and MATLAB to C++.</para></sect1>
<sect1 id="andres_2marray_8hxx_1section_features">
<title>Features</title>
<para><itemizedlist>
<listitem><para>Multi-dimensional arrays and views whose dimension, shape, size and indexing order (first or last coordinate major order) can be set and changed at runtime.</para></listitem><listitem><para>Access to entries via coordinates, scalar indices, STL-compliant random access iterators and C++11 initializer lists.</para></listitem><listitem><para>Arithmetic operators with expression templates and automatic type promotion.</para></listitem><listitem><para>Support for STL-compliant allocators.</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="andres_2marray_8hxx_1section_tutorial">
<title>Tutorial</title>
<para><itemizedlist>
<listitem><para>An introductory tutorial can be found at src/tutorial/tutorial.cxx</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="andres_2marray_8hxx_1section_cpp0x">
<title>C++11 Extensions</title>
<para><itemizedlist>
<listitem><para>C++11 extensions are enabled by defining<itemizedlist>
<listitem><para>HAVE_CPP11_VARIADIC_TEMPLATES</para></listitem><listitem><para>HAVE_CPP11_INITIALIZER_LISTS</para></listitem><listitem><para>HAVE_CPP11_TEMPLATE_ALIASES</para></listitem><listitem><para>HAVE_CPP11_STD_ARRAY</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="andres_2marray_8hxx_1section_license">
<title>License</title>
<para>Copyright (c) 2013 by Bjoern Andres.</para><para>This software was developed by Bjoern Andres. Enquiries shall be directed to <ulink url="mailto:bjoern@andres.sc">bjoern@andres.sc</ulink>.</para><para>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:<itemizedlist>
<listitem><para>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</para></listitem><listitem><para>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</para></listitem><listitem><para>The name of the author must not be used to endorse or promote products derived from this software without specific prior written permission.</para></listitem></itemizedlist>
</para><para>THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS&apos;&apos; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. </para></sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="66" column="9" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" prot="public" static="no">
        <name>MARRAY_UNARY_OPERATOR</name>
        <param><defname>datatype</defname></param>
        <param><defname>operation</defname></param>
        <param><defname>functorname</defname></param>
        <initializer>template&lt;class T, class A&gt; \
inline View&lt;T, false, A&gt;&amp; \
operator operation \
( \
    View&lt;T, false, A&gt;&amp; v, \
    const datatype&amp; x \
) \
{ \
    marray_detail::operate(v, static_cast&lt;T&gt;(x), marray_detail:: functorname &lt;T, T&gt;()); \
    return v; \
} \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="3191" column="9" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="andres_2marray_8hxx_1a04763cb28713ff1fbe9ee688981a8d73" prot="public" static="no">
        <name>MARRAY_UNARY_OPERATOR_ALL_TYPES</name>
        <param><defname>op</defname></param>
        <param><defname>functorname</defname></param>
        <initializer><ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(char, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(unsigned char, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(short, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(unsigned short, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(int, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(unsigned int, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(long, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(unsigned long, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(float, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(double, op, functorname) \
    <ref refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" kindref="member">MARRAY_UNARY_OPERATOR</ref>(long double, op, functorname) \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="3204" column="9" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" prot="public" static="no">
        <name>MARRAY_BINARY_OPERATOR</name>
        <param><defname>datatype</defname></param>
        <param><defname>operation</defname></param>
        <param><defname>functorname</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="3278" column="9" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="andres_2marray_8hxx_1a77c7c3614a2ac1f709b44d5cc149afd0" prot="public" static="no">
        <name>MARRAY_BINARY_OPERATOR_ALL_TYPES</name>
        <param><defname>op</defname></param>
        <param><defname>functorname</defname></param>
        <initializer><ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(char, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(unsigned char, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(short, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(unsigned short, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(int, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(unsigned int, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(long, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(unsigned long, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(float, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(double, op, functorname) \
    <ref refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" kindref="member">MARRAY_BINARY_OPERATOR</ref>(long double, op, functorname) \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="3320" column="9" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NIFTY_ANDRES_MARRAY_HXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="andres_2marray_8hxx_1aa5ba9d328165a1e7ce5e9b52ddd593e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NIFTY_ANDRES_MARRAY_HXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>runtime_error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>reverse_iterator,<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>accumulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>std::multiplies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_STD_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceandres" kindref="compound">andres</ref><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa162a419d5299010966e7cc6a74e7b014" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281f" kindref="member">StringStyle</ref><sp/>{<ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa162a419d5299010966e7cc6a74e7b014" kindref="member">TableStyle</ref>,<sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa8b1efd8fc40539ba5b5255b46440eeaf" kindref="member">MatrixStyle</ref>};<sp/></highlight></codeline>
<codeline lineno="92" refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref><sp/>{<ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>,<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>};<sp/></highlight></codeline>
<codeline lineno="93" refid="structandres_1_1InitializationSkipping" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref><sp/>{<sp/>};<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Const<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Mutable<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref><sp/>defaultOrder<sp/>=<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>;<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref><sp/>SkipInitialization<sp/>=<sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>();<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="101" refid="classandres_1_1ViewExpression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>UnaryFunctor&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnaryViewExpression;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpression;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarFirst;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarSecond;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\endcond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst<sp/>=<sp/>false,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>std::allocator&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="113" refid="classandres_1_1View" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_TEMPLATE_ALIASES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ConstView<sp/>=<sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>std::allocator&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="118" refid="classandres_1_1Iterator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref>;</highlight></codeline>
<codeline lineno="119" refid="classandres_1_1Marray" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>std::allocator&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/>&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assertion<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MARRAY_NO_DEBUG<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MARRAY_NO_ARG_TEST<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>static<sp/>const<sp/>bool<sp/>MARRAY_NO_DEBUG<sp/>=<sp/>false;<sp/>///&lt;<sp/>General<sp/>assertion<sp/>testing<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>static<sp/>const<sp/>bool<sp/>MARRAY_NO_ARG_TEST<sp/>=<sp/>false;<sp/>///&lt;<sp/>Argument<sp/>testing<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">marray_detail<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>meta-programming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PREDICATE,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRUECASE,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FALSECASE&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfBool;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRUECASE,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FALSECASE&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfBool&lt;true,<sp/>TRUECASE,<sp/>FALSECASE&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TRUECASE<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TRUECASE,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FALSECASE&gt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IfBool&lt;false,<sp/>TRUECASE,<sp/>FALSECASE&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>FALSECASE<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IsEqual</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IsEqual&lt;T,<sp/>T&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>255;<sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;char&gt;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>0;<sp/>};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;unsigned<sp/>char&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>1;<sp/>};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;short&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>2;<sp/>};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;unsigned<sp/>short&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>3;<sp/>};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;int&gt;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>4;<sp/>};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;unsigned<sp/>int&gt;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>5;<sp/>};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;long&gt;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>6;<sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;unsigned<sp/>long&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>7;<sp/>};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;float&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>8;<sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;double&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>9;<sp/>};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TypeTraits&lt;long<sp/>double&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>10;<sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>B&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PromoteType</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IfBool&lt;TypeTraits&lt;A&gt;::position<sp/>&gt;=<sp/>TypeTraits&lt;B&gt;::position,<sp/>A,<sp/>B&gt;::type<sp/>type;<sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Assert(A<sp/>assertion)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!assertion)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Assertion<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>geometry<sp/>of<sp/>views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>std::allocator&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;<sp/>&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Geometry;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">esIterator&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stridesFromShape(ShapeIterator,<sp/>ShapeIterator,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StridesIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations<sp/>on<sp/>entries<sp/>of<sp/>views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate(View&lt;T,<sp/>false,<sp/>A&gt;&amp;,<sp/>Functor);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate(View&lt;T,<sp/>false,<sp/>A&gt;&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/>Functor);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate(View&lt;T1,<sp/>false,<sp/>A&gt;&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T2,<sp/>isConst,<sp/>A&gt;&amp;,<sp/>Functor);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate(View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,<sp/>T2&gt;&amp;<sp/>expression,<sp/>Functor<sp/>f);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>helper<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperUnary;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinaryScalar;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A2&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinary;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ATo&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssignmentOperatorHelper;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isIntegral&gt;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AccessOperatorHelper;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unary<sp/>in-place<sp/>functors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Negative<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T&amp;<sp/>x)<sp/>{<sp/>x<sp/>=<sp/>-x;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PrefixIncrement<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T&amp;<sp/>x)<sp/>{<sp/>++x;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PostfixIncrement<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T&amp;<sp/>x)<sp/>{<sp/>x++;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PrefixDecrement<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T&amp;<sp/>x)<sp/>{<sp/>--x;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PostfixDecrement<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T&amp;<sp/>x)<sp/>{<sp/>x--;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>in-place<sp/>functors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Assign<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)<sp/>{<sp/>x<sp/>=<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">PlusEqual<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)<sp/>{<sp/>x<sp/>+=<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MinusEqual<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)<sp/>{<sp/>x<sp/>-=<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TimesEqual<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)<sp/>{<sp/>x<sp/>*=<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DividedByEqual<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)<sp/>{<sp/>x<sp/>/=<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unary<sp/>functors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Negate<sp/>{<sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-x;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>functors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Plus<sp/>{<sp/>U<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Minus<sp/>{<sp/>U<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>-<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Times<sp/>{<sp/>U<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>*<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DividedBy<sp/>{<sp/>U<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>/<sp/>y;<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\endcond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">View</highlight></codeline>
<codeline lineno="270"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ViewExpression&lt;View&lt;T,<sp/>isConst,<sp/>A&gt;,<sp/>T&gt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273" refid="classandres_1_1View_1aa80ab78f6e3a32ead389d657f6ec7308" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1aa80ab78f6e3a32ead389d657f6ec7308" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="274" refid="classandres_1_1View_1abe3d48ac2b0d65536e54dbfad0a44929" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classandres_1_1View_1abe3d48ac2b0d65536e54dbfad0a44929" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="275" refid="classandres_1_1View_1a9a201594c82be89fccd0fe644ea2f09c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>T*,<sp/>T*&gt;::type<sp/><ref refid="classandres_1_1View_1a9a201594c82be89fccd0fe644ea2f09c" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="276" refid="classandres_1_1View_1a947d02064bced23437b804a8050e6ccb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classandres_1_1View_1a947d02064bced23437b804a8050e6ccb" kindref="member">const_pointer</ref>;</highlight></codeline>
<codeline lineno="277" refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>T&amp;,<sp/>T&amp;&gt;::type<sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="278" refid="classandres_1_1View_1a69e3d49e3d8242a33c03d42dd5ecc5b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1View_1a69e3d49e3d8242a33c03d42dd5ecc5b8" kindref="member">const_reference</ref>;</highlight></codeline>
<codeline lineno="279" refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/><ref refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="280" refid="classandres_1_1View_1a7b6f125a7b3830f30cd34887b61858a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, true, A&gt;</ref><sp/><ref refid="classandres_1_1View_1a7b6f125a7b3830f30cd34887b61858a7" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="281" refid="classandres_1_1View_1aab07af42756759420211d114bb705547" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;iterator&gt;<sp/><ref refid="classandres_1_1View_1aab07af42756759420211d114bb705547" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="282" refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::reverse_iterator&lt;const_iterator&gt;<sp/><ref refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" kindref="member">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="283" refid="classandres_1_1View_1ac9b2563b59f4fe1d90144bc4be2a2008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;View&lt;T, isConst, A&gt;</ref>,<sp/>T&gt;<sp/><ref refid="classandres_1_1View_1ac9b2563b59f4fe1d90144bc4be2a2008" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="284" refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A::template<sp/>rebind&lt;value_type&gt;::other<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/>pointer,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/>StrideIterator,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(std::initializer_list&lt;std::size_t&gt;,<sp/>pointer,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(std::initializer_list&lt;std::size_t&gt;,<sp/>std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;);<sp/></highlight><highlight class="comment">//<sp/>over-write<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;);<sp/></highlight><highlight class="comment">//<sp/>over-write<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">assign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">assign</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/>pointer,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">assign</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/>StrideIterator,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">assign</ref>(std::initializer_list&lt;std::size_t&gt;,<sp/>pointer,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">assign</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;,<sp/>pointer,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1View_1a175e5862a7133a937e7901e5894c2e10" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">dimension</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1View_1ad43d1b74245d56970176c75746c7c88b" kindref="member">shapeBegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1View_1ac56e049443673fe1311b312030fadc2d" kindref="member">shapeEnd</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1a3c4b2cee088b6cf8232289cbb50bd2b4" kindref="member">strides</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1View_1a44f545270b7e66a749c2a8988a5dcd92" kindref="member">stridesBegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1View_1ab4ee3379ba0903bb14645c397d2a85b6" kindref="member">stridesEnd</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/><ref refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" kindref="member">coordinateOrder</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" kindref="member">isSimple</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1afa268e37459476d9ca233d741e4bc63c" kindref="member">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>element<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_STD_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>1&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0]);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>2&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>3&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2]);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>4&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2],<sp/>c[3]);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>5&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2],<sp/>c[3],<sp/>c[4]);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DIM,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>DIM&gt;<sp/>&amp;<sp/>c){</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c.begin());</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>1&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>2&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1]);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>3&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2]);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>4&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2],<sp/>c[3]);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>5&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c[0],<sp/>c[1],<sp/>c[2],<sp/>c[3],<sp/>c[4]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>DIM,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>COORD_T&gt;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;COORD_T,<sp/>DIM&gt;<sp/>&amp;<sp/>c)</highlight><highlight class="keyword">const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(c.begin());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(U);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;<sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(U)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>HAVE_CPP11_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>elementAccessHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>elementAccessHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>elementAccessHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>elementAccessHelper(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sub-views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(BaseIterator,<sp/>ShapeIterator,<sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(BaseIterator,<sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(BaseIterator,<sp/>ShapeIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(BaseIterator,<sp/>ShapeIterator,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(BaseIterator,<sp/>ShapeIterator,<sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(BaseIterator,<sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(BaseIterator,<sp/>ShapeIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(BaseIterator,<sp/>ShapeIterator,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;,<sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">view</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;,<sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">constView</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/><ref refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" kindref="member">end</ref>();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/><ref refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" kindref="member">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>const_iterator<sp/><ref refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" kindref="member">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>reverse_iterator<sp/><ref refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" kindref="member">rbegin</ref>();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>reverse_iterator<sp/><ref refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" kindref="member">rend</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/><ref refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" kindref="member">rbegin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>const_reverse_iterator<sp/><ref refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" kindref="member">rend</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordinate<sp/>transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" kindref="member">reshape</ref>(ShapeIterator,<sp/>ShapeIterator);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" kindref="member">permute</ref>(CoordinateIterator);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" kindref="member">transpose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" kindref="member">transpose</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a476957393b3b21333bc665e852da47ad" kindref="member">shift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a922763728fb80d24c32a5e5964537bdb" kindref="member">squeeze</ref>();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" kindref="member">reshapedView</ref>(ShapeIterator,<sp/>ShapeIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a278c77d7b10642fffc9ca8b3bc292cd1" kindref="member">permutedView</ref>(CoordinateIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" kindref="member">transposedView</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" kindref="member">transposedView</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a267a57ffddb437e19d0a15d342aeebc9" kindref="member">shiftedView</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1ab39dae59df5589ec0311ad67a3c7d000" kindref="member">boundView</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>=<sp/>0)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a4d454242ebde77898963b7bc41208bb5" kindref="member">squeezedView</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" kindref="member">reshape</ref>(std::initializer_list&lt;std::size_t&gt;);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" kindref="member">permute</ref>(std::initializer_list&lt;std::size_t&gt;);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" kindref="member">reshapedView</ref>(std::initializer_list&lt;std::size_t&gt;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;<sp/><ref refid="classandres_1_1View_1a278c77d7b10642fffc9ca8b3bc292cd1" kindref="member">permutedView</ref>(std::initializer_list&lt;std::size_t&gt;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>between<sp/>coordinates,<sp/>index<sp/>and<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" kindref="member">coordinatesToIndex</ref>(CoordinateIterator,<sp/>std::size_t&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" kindref="member">coordinatesToOffset</ref>(CoordinateIterator,<sp/>std::size_t&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" kindref="member">indexToCoordinates</ref>(std::size_t,<sp/>CoordinateIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1abe37dcbd69af25882d45bdff5745e95f" kindref="member">indexToOffset</ref>(std::size_t,<sp/>std::size_t&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" kindref="member">coordinatesToIndex</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" kindref="member">coordinatesToOffset</ref>(std::initializer_list&lt;std::size_t&gt;,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output<sp/>as<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classandres_1_1View_1a2c1774da3d066b97932ea861f845d95c" kindref="member">asString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281f" kindref="member">StringStyle</ref>&amp;<sp/>=<sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa8b1efd8fc40539ba5b5255b46440eeaf" kindref="member">MatrixStyle</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::Geometry&lt;A&gt;<sp/>geometry_type;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View</ref>(pointer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_type&amp;);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInvariant()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unsafe<sp/>direct<sp/>memory<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>and<sp/>memory<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data_;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_type<sp/>geometry_;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="559" refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="561" refid="classandres_1_1View_1aa5a68966149f255e52d7902758b0e002" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ATo&gt;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">marray_detail::AssignmentOperatorHelper;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">marray_detail::AccessOperatorHelper&lt;true&gt;;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">marray_detail::AccessOperatorHelper&lt;false&gt;;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>UnaryFunctor&gt;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnaryViewExpression;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpression;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarFirst;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarSecond;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>marray_detail::operate(<ref refid="classandres_1_1View" kindref="compound">View&lt;T1, false, Alocal&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, T2&gt;</ref>&amp;<sp/>expression,<sp/>Functor<sp/>f);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\endcond<sp/>end<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref></highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STL<sp/>random<sp/>access<sp/>iterator<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594" refid="classandres_1_1Iterator_1a36e37107724fb0c9265f8d3f41f93309" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::random_access_iterator_tag<sp/><ref refid="classandres_1_1Iterator_1a36e37107724fb0c9265f8d3f41f93309" kindref="member">iterator_category</ref>;</highlight></codeline>
<codeline lineno="595" refid="classandres_1_1Iterator_1a3fd8a072268f4ad5c55963a6ea6d7a65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classandres_1_1Iterator_1a3fd8a072268f4ad5c55963a6ea6d7a65" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="596" refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ptrdiff_t<sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>;</highlight></codeline>
<codeline lineno="597" refid="classandres_1_1Iterator_1adf2ba3f1a3cc9c98bff9c544afdb22f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>T*,<sp/>T*&gt;::type<sp/><ref refid="classandres_1_1Iterator_1adf2ba3f1a3cc9c98bff9c544afdb22f9" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="598" refid="classandres_1_1Iterator_1a9805f26813688f04c33e798f7999e5f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>T&amp;,<sp/>T&amp;&gt;::type<sp/><ref refid="classandres_1_1Iterator_1a9805f26813688f04c33e798f7999e5f7" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-standard<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>View&lt;T,<sp/>true,<sp/>A&gt;*,</highlight></codeline>
<codeline lineno="602" refid="classandres_1_1Iterator_1a937adfd36b5e7b01be53d16bd823af12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>*&gt;::type<sp/><ref refid="classandres_1_1Iterator_1a937adfd36b5e7b01be53d16bd823af12" kindref="member">view_pointer</ref>;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::IfBool&lt;isConst,<sp/>const<sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;,</highlight></codeline>
<codeline lineno="604" refid="classandres_1_1Iterator_1aba3b6dd25a055f0aaa7a931657f86a89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;&gt;::type<sp/><ref refid="classandres_1_1Iterator_1aba3b6dd25a055f0aaa7a931657f86a89" kindref="member">view_reference</ref>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator</ref>();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator</ref>(<ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, false, A&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>from<sp/>mutable<sp/>to<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STL<sp/>random<sp/>access<sp/>iterator<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1Iterator_1a2ea1f1bf8a9d61241f6ab9e68d051663" kindref="member">operator*</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/><ref refid="classandres_1_1Iterator_1a41397c945f86104d4553e264f360862b" kindref="member">operator-&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>reference<sp/><ref refid="classandres_1_1Iterator_1a3dda3a1f02423997143ed405766ed26d" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Iterator_1ad35d9bf0e2f5079c444353292f5def0c" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>difference_type&amp;);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Iterator_1a2d9d6f6b6b9c3e1843f00b3162f9dfeb" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>difference_type&amp;);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Iterator_1aa25f91324c261608591f0d072afa8ac2" kindref="member">operator++</ref>();<sp/></highlight><highlight class="comment">//<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Iterator_1a2e7a4ffd36e64600b7a785dd5fcf9920" kindref="member">operator--</ref>();<sp/></highlight><highlight class="comment">//<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/><ref refid="classandres_1_1Iterator_1aa25f91324c261608591f0d072afa8ac2" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/><ref refid="classandres_1_1Iterator_1a2e7a4ffd36e64600b7a785dd5fcf9920" kindref="member">operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/><ref refid="classandres_1_1Iterator_1ac11e0481263bcc5b0d9b6d85d5d35cee" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>difference_type&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/><ref refid="classandres_1_1Iterator_1a397e725017a0c85f3625c4cca9c78f19" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>difference_type&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>difference_type<sp/><ref refid="classandres_1_1Iterator_1a397e725017a0c85f3625c4cca9c78f19" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1ad5ffd4771bc3865c3d97943a0eddf96c" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1ad0006aa63862a839230521e571642b9e" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(const<sp/>Iterator&lt;T,<sp/>isConstLocal,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a0ddb701b0ac1b721eee2348e016050fc" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;=(const<sp/>Iterator&lt;T,<sp/>isConstLocal,<sp/>A&gt;&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a8ab389dea14eeceb8bbee9a9d7d6a04a" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations<sp/>beyond<sp/>the<sp/>STL<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1aa00e98e48b060ec6de7593d473643ef7" kindref="member">hasMore</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classandres_1_1Iterator_1a2f5bd43ca080a25450423d5f874b3cdd" kindref="member">index</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6b0076e5b74f548e820cbfa6fb7681d7" kindref="member">coordinate</ref>(CoordinateIterator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInvariant()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>view_pointer<sp/>view_;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>pointer_;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>index_;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>coordinates_;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="classandres_1_1Iterator_1ad7bf464de20a2e1bbc38644d8615fba8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt;T,<sp/>A&gt;;</highlight></codeline>
<codeline lineno="658" refid="classandres_1_1Iterator_1a3a5905d3e8cc40712f6a818a92e94c3b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref>&lt;T,<sp/>!isConst,<sp/>A&gt;;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>comparison<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal">};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref></highlight></codeline>
<codeline lineno="664"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View</ref>&lt;T,<sp/>false,<sp/>A&gt;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="667" refid="classandres_1_1Marray_1ad954a5c638124bd4cbfdedf8fed54f0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref><sp/><ref refid="classandres_1_1Marray_1ad954a5c638124bd4cbfdedf8fed54f0c" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="668" refid="classandres_1_1Marray_1a902cba550c99fb1db7b6b95edb0ca4df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression_1aad128b08207a68e92797aa2c7342feff" kindref="member">base::value_type</ref><sp/><ref refid="classandres_1_1Marray_1a902cba550c99fb1db7b6b95edb0ca4df" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="669" refid="classandres_1_1Marray_1a42f16cbe0ebc93347dd9eed78484e951" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a9a201594c82be89fccd0fe644ea2f09c" kindref="member">base::pointer</ref><sp/><ref refid="classandres_1_1Marray_1a42f16cbe0ebc93347dd9eed78484e951" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="670" refid="classandres_1_1Marray_1a6e9d79616cdeed14221d96431ab5f678" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a947d02064bced23437b804a8050e6ccb" kindref="member">base::const_pointer</ref><sp/><ref refid="classandres_1_1Marray_1a6e9d79616cdeed14221d96431ab5f678" kindref="member">const_pointer</ref>;</highlight></codeline>
<codeline lineno="671" refid="classandres_1_1Marray_1a20b76b3ff5480625dfad98caf0ec9649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">base::reference</ref><sp/><ref refid="classandres_1_1Marray_1a20b76b3ff5480625dfad98caf0ec9649" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="672" refid="classandres_1_1Marray_1ae5ecc2e9f1b747ffaaff04ab15568783" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a69e3d49e3d8242a33c03d42dd5ecc5b8" kindref="member">base::const_reference</ref><sp/><ref refid="classandres_1_1Marray_1ae5ecc2e9f1b747ffaaff04ab15568783" kindref="member">const_reference</ref>;</highlight></codeline>
<codeline lineno="673" refid="classandres_1_1Marray_1afa294c08fe2bf282f9c3b65ac8da1622" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" kindref="member">base::iterator</ref><sp/><ref refid="classandres_1_1Marray_1afa294c08fe2bf282f9c3b65ac8da1622" kindref="member">iterator</ref>;</highlight></codeline>
<codeline lineno="674" refid="classandres_1_1Marray_1a9125dfa109e0a43ccd18081fd64ed65e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aab07af42756759420211d114bb705547" kindref="member">base::reverse_iterator</ref><sp/><ref refid="classandres_1_1Marray_1a9125dfa109e0a43ccd18081fd64ed65e" kindref="member">reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="675" refid="classandres_1_1Marray_1a0b3be7ebc2bd3a247b59a8ed7be24102" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a7b6f125a7b3830f30cd34887b61858a7" kindref="member">base::const_iterator</ref><sp/><ref refid="classandres_1_1Marray_1a0b3be7ebc2bd3a247b59a8ed7be24102" kindref="member">const_iterator</ref>;</highlight></codeline>
<codeline lineno="676" refid="classandres_1_1Marray_1a03aa08b455a9fcb7c3ba9072799cad92" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" kindref="member">base::const_reverse_iterator</ref><sp/><ref refid="classandres_1_1Marray_1a03aa08b455a9fcb7c3ba9072799cad92" kindref="member">const_reverse_iterator</ref>;</highlight></codeline>
<codeline lineno="677" refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A::template<sp/>rebind&lt;value_type&gt;::other<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructors<sp/>and<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>=<sp/>T(),</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>&amp;,<sp/>ShapeIterator,<sp/>ShapeIterator,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(std::initializer_list&lt;std::size_t&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>=<sp/>T(),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray_1a6b900bedc740214e8b60684a8b0ad621" kindref="member">~Marray</ref>();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;);<sp/></highlight><highlight class="comment">//<sp/>over-write<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/><ref refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray_1a680a02cc61393dddb44fb88e337f29b7" kindref="member">assign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(ShapeIterator,<sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>=<sp/>T());</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>&amp;,<sp/>ShapeIterator,<sp/>ShapeIterator);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(std::initializer_list&lt;std::size_t&gt;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>=<sp/>T());</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>&amp;,<sp/>std::initializer_list&lt;std::size_t&gt;);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>base::geometry_type<sp/>geometry_type;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testInvariant()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SKIP_INITIALIZATION,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resizeHelper(ShapeIterator,<sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>=<sp/>T());</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator_type<sp/>dataAllocator_;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>View</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><ref refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" kindref="member">View&lt;T, isConst, A&gt;::coordinatesToIndex</ref></highlight></codeline>
<codeline lineno="745"><highlight class="normal">(</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>coordinate,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>out</highlight></codeline>
<codeline lineno="748"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="749"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinatesToIndex(coordinate.begin(),<sp/>out);</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><ref refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" kindref="member">View&lt;T, isConst, A&gt;::coordinatesToIndex</ref></highlight></codeline>
<codeline lineno="764" refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>it,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>out</highlight></codeline>
<codeline lineno="767"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;dimension();<sp/>++j,<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>static_cast&lt;std::size_t&gt;(*it)<sp/>&lt;<sp/>shape(j));</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it)<sp/>*<sp/>geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><ref refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" kindref="member">View&lt;T, isConst, A&gt;::coordinatesToOffset</ref></highlight></codeline>
<codeline lineno="787"><highlight class="normal">(</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>coordinate,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>out</highlight></codeline>
<codeline lineno="790"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="791"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinatesToOffset(coordinate.begin(),<sp/>out);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" kindref="member">View&lt;T, isConst, A&gt;::coordinatesToOffset</ref></highlight></codeline>
<codeline lineno="806" refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>it,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>out</highlight></codeline>
<codeline lineno="809"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;dimension();<sp/>++j,<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>static_cast&lt;std::size_t&gt;(*it)<sp/>&lt;<sp/>shape(j));</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it)<sp/>*<sp/>strides(j);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><ref refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" kindref="member">View&lt;T, isConst, A&gt;::indexToCoordinates</ref></highlight></codeline>
<codeline lineno="830" refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>index,<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>to<sp/>work<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>outit</highlight></codeline>
<codeline lineno="833"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>this-&gt;dimension()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>&lt;<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;dimension();<sp/>++j,<sp/>++outit)<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outit<sp/>=<sp/>std::size_t(index<sp/>/<sp/>geometry_.shapeStrides(j));</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>%<sp/>geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>last<sp/>major<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>this-&gt;dimension()-1;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outit<sp/>+=<sp/>j;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outit<sp/>=<sp/>std::size_t(index<sp/>/<sp/>geometry_.shapeStrides(j));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>%<sp/>geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--outit;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><ref refid="classandres_1_1View_1abe37dcbd69af25882d45bdff5745e95f" kindref="member">View&lt;T, isConst, A&gt;::indexToOffset</ref></highlight></codeline>
<codeline lineno="870" refid="classandres_1_1View_1abe37dcbd69af25882d45bdff5745e95f" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>index,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>out</highlight></codeline>
<codeline lineno="873"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>&lt;<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isSimple())<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>geometry_.strides(j)<sp/>*<sp/>(index<sp/>/<sp/>geometry_.shapeStrides(j));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>%<sp/>geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>last<sp/>major<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>this-&gt;dimension()-1;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>geometry_.strides(j)<sp/>*<sp/>(index<sp/>/<sp/>geometry_.shapeStrides(j));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>index<sp/>%<sp/>geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="920" refid="classandres_1_1View_1a4368fd5dbfc08a75115341bfa7123a87" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="922"><highlight class="normal">)</highlight></codeline>
<codeline lineno="923"><highlight class="normal">:<sp/>data_(0),</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>geometry_(geometry_type(allocator))</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="933"><highlight class="normal">(</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_type&amp;<sp/>geometry</highlight></codeline>
<codeline lineno="936"><highlight class="normal">)</highlight></codeline>
<codeline lineno="937"><highlight class="normal">:<sp/>data_(data),</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>geometry_(geometry)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="951" refid="classandres_1_1View_1af4519c20472df4ed36905b3b6574cc46" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="954"><highlight class="normal">)</highlight></codeline>
<codeline lineno="955"><highlight class="normal">:<sp/>data_(data),</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>geometry_(geometry_type(0,<sp/>defaultOrder,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>allocator))</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="968" refid="classandres_1_1View_1ae2969a649e8ced36cb05e79985f4656f" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="970"><highlight class="normal">)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">:<sp/>data_(in.data_),</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>geometry_(in.geometry_)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="994" refid="classandres_1_1View_1ad7ee18ef33ab6e92138ba0ded346086d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">:<sp/><sp/><sp/>data_(data),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_(begin,<sp/>end,<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder,<sp/>allocator)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="1025" refid="classandres_1_1View_1a3abf83b3422d78b41560e6f87ecb542e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>StrideIterator<sp/>it,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">:<sp/>data_(data),</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>geometry_(begin,<sp/>end,<sp/>it,<sp/>internalCoordinateOrder,<sp/>allocator)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="1053"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">:<sp/><sp/><sp/>data_(data),</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_(shape.begin(),<sp/>shape.end(),<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder,<sp/>allocator)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><ref refid="classandres_1_1View_1a2658181be4befdf722462ab951ba8a67" kindref="member">View&lt;T, isConst, A&gt;::View</ref></highlight></codeline>
<codeline lineno="1078"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>strides,</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">:<sp/><sp/><sp/>data_(data),</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_(shape.begin(),<sp/>shape.end(),<sp/>strides.begin(),</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder,<sp/>allocator)</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">View&lt;T, isConst, A&gt;::assign</ref></highlight></codeline>
<codeline lineno="1103" refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_<sp/>=<sp/>geometry_type(allocator);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">View&lt;T, isConst, A&gt;::assign</ref></highlight></codeline>
<codeline lineno="1128" refid="classandres_1_1View_1ab227fd41b348249cbc149b5cff2cee49" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>invariant<sp/>is<sp/>not<sp/>tested<sp/>as<sp/>a<sp/>pre-condition<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>allow<sp/>for<sp/>unsafe<sp/>manipulations<sp/>prior<sp/>to<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::Geometry&lt;A&gt;(begin,<sp/>end,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>externalCoordinateOrder,<sp/>internalCoordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">View&lt;T, isConst, A&gt;::assign</ref></highlight></codeline>
<codeline lineno="1162" refid="classandres_1_1View_1a0bee9a9e389a0d9af1c8cc4bbe85aeb7" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>StrideIterator<sp/>it,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>invariant<sp/>is<sp/>not<sp/>tested<sp/>as<sp/>a<sp/>pre-condition<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>to<sp/>allow<sp/>for<sp/>unsafe<sp/>manipulations<sp/>prior<sp/>to<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::Geometry&lt;A&gt;(begin,<sp/>end,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it,<sp/>internalCoordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">View&lt;T, isConst, A&gt;::assign</ref></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(shape.begin(),<sp/>shape.end(),<sp/>data,<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">View&lt;T, isConst, A&gt;::assign</ref></highlight></codeline>
<codeline lineno="1219"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>strides,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer<sp/>data,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(shape.begin(),<sp/>shape.end(),<sp/>strides.begin(),<sp/>data,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator()</highlight></codeline>
<codeline lineno="1243" refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>U<sp/>u</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>marray_detail::AccessOperatorHelper&lt;std::numeric_limits&lt;U&gt;::is_integer&gt;::execute(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>u);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1261" refid="classandres_1_1View_1ae06586b90683457833c4f76ac6bc714e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>U<sp/>u</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>marray_detail::AccessOperatorHelper&lt;std::numeric_limits&lt;U&gt;::is_integer&gt;::execute(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>u);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_CPP11_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1281" refid="classandres_1_1View_1a216831a61d22edc3b74cf09df8e537f3" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)));</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)];</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1303" refid="classandres_1_1View_1aea4e4eddd7cd0b1fc5ac97dee672b031" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>2));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)];</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1326" refid="classandres_1_1View_1a46b12868d2aa22f89f65d604885dc1eb" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>3));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)];</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1351" refid="classandres_1_1View_1a50af7993da2ae2efad8a250ce51bb416" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>3));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1377" refid="classandres_1_1View_1acd5927bb3d8203e4811c6f17872b1c84" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>4));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)));</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)];</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1405" refid="classandres_1_1View_1ad7c89152e0d8d06c5ccf4377b9684d14" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>4));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)));</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)];</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1434" refid="classandres_1_1View_1aee5664db40d9e07abe0dd57262b5191e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>5));</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)<sp/>&amp;&amp;<sp/>c4<sp/>&lt;<sp/>shape(4)));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)<sp/>+<sp/>c4*strides(4)];</highlight></codeline>
<codeline lineno="1448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1464" refid="classandres_1_1View_1ac188ed9042fce60401acd72ac489fed9" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>5));</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)<sp/>&amp;&amp;<sp/>c4<sp/>&lt;<sp/>shape(4)));</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)<sp/>+<sp/>c4*strides(4)];</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"></codeline>
<codeline lineno="1497"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1500" refid="classandres_1_1View_1a2be86ccd328fc276f37686fb1872cb9c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c5,</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c6,</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c7,</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c8,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c9</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>10));</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)<sp/>&amp;&amp;<sp/>c4<sp/>&lt;<sp/>shape(4)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c5<sp/>&lt;<sp/>shape(5)<sp/>&amp;&amp;<sp/>c6<sp/>&lt;<sp/>shape(6)<sp/>&amp;&amp;<sp/>c7<sp/>&lt;<sp/>shape(7)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c8<sp/>&lt;<sp/>shape(8)<sp/>&amp;&amp;<sp/>c9<sp/>&lt;<sp/>shape(9)));</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)<sp/>+<sp/>c4*strides(4)<sp/>+<sp/>c5*strides(5)<sp/>+<sp/>c6*strides(6)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c7*strides(7)<sp/>+<sp/>c8*strides(8)<sp/>+<sp/>c9*strides(9)];</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">View&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>()</highlight></codeline>
<codeline lineno="1543" refid="classandres_1_1View_1aa9fa791b4f14b9c8b8c15aea0f53527e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4,</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c5,</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c6,</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c7,</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c8,</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c9</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dimension()<sp/>==<sp/>10));</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(c0<sp/>&lt;<sp/>shape(0)<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>shape(1)</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>shape(2)<sp/>&amp;&amp;<sp/>c3<sp/>&lt;<sp/>shape(3)<sp/>&amp;&amp;<sp/>c4<sp/>&lt;<sp/>shape(4)</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c5<sp/>&lt;<sp/>shape(5)<sp/>&amp;&amp;<sp/>c6<sp/>&lt;<sp/>shape(6)<sp/>&amp;&amp;<sp/>c7<sp/>&lt;<sp/>shape(7)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>c8<sp/>&lt;<sp/>shape(8)<sp/>&amp;&amp;<sp/>c9<sp/>&lt;<sp/>shape(9)));</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[c0*strides(0)<sp/>+<sp/>c1*strides(1)<sp/>+<sp/>c2*strides(2)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c3*strides(3)<sp/>+<sp/>c4*strides(4)<sp/>+<sp/>c5*strides(5)<sp/>+<sp/>c6*strides(6)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>c7*strides(7)<sp/>+<sp/>c8*strides(8)<sp/>+<sp/>c9*strides(9)];</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::elementAccessHelper</ref></highlight></codeline>
<codeline lineno="1572"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>Dim,</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value</highlight></codeline>
<codeline lineno="1575"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(value<sp/>&lt;<sp/>shape(Dim-1)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides(Dim-1)<sp/>*<sp/>value;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::elementAccessHelper</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>Dim,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1588"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(value<sp/>&lt;<sp/>shape(Dim-1)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides(Dim-1)<sp/>*<sp/>value;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1596"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::elementAccessHelper</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>Dim,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(value<sp/>&lt;<sp/>shape(Dim-1-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args))<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>*<sp/>strides(Dim-1-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args))<sp/>+<sp/>elementAccessHelper(Dim,<sp/>args...);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::elementAccessHelper</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>Dim,</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1616"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(value<sp/>&lt;<sp/>shape(Dim-1-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args))<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>*<sp/>strides(Dim-1-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args))<sp/>+<sp/>elementAccessHelper(Dim,<sp/>args...);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="1623"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator()</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>value<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[0];</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexToOffset(value,<sp/>offset);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[offset];</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator()</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>value<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[0];</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexToOffset(value,<sp/>offset);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[offset];</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator()</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value,</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(<sp/>MARRAY_NO_DEBUG<sp/>||<sp/>(<sp/>data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)+1<sp/>==<sp/>dimension()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[strides(0)*value<sp/>+<sp/>elementAccessHelper(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)+1,<sp/>args...)<sp/>];</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator()</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value,</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args...<sp/>args</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(<sp/>MARRAY_NO_DEBUG<sp/>||<sp/>(<sp/>data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)+1<sp/>==<sp/>dimension()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[<sp/>strides(0)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value)</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>static_cast&lt;std::size_t&gt;(elementAccessHelper(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(args)+1,<sp/>args...))<sp/>];</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>#ifndef<sp/>HAVE_CPP11_VARIADIC_TEMPLATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1696" refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">View&lt;T, isConst, A&gt;::size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1697"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.size();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1709" refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">View&lt;T, isConst, A&gt;::dimension</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1710"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>this-&gt;data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.dimension();</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">View&lt;T, isConst, A&gt;::shape</ref></highlight></codeline>
<codeline lineno="1723" refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension</highlight></codeline>
<codeline lineno="1725"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>dimension<sp/>&lt;<sp/>this-&gt;dimension());</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.shape(dimension);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="1740" refid="classandres_1_1View_1ad43d1b74245d56970176c75746c7c88b" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1ad43d1b74245d56970176c75746c7c88b" kindref="member">View&lt;T, isConst, A&gt;::shapeBegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1741"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.shapeBegin();</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="1754" refid="classandres_1_1View_1ac56e049443673fe1311b312030fadc2d" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1ac56e049443673fe1311b312030fadc2d" kindref="member">View&lt;T, isConst, A&gt;::shapeEnd</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1755"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.shapeEnd();</highlight></codeline>
<codeline lineno="1759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><ref refid="classandres_1_1View_1a3c4b2cee088b6cf8232289cbb50bd2b4" kindref="member">View&lt;T, isConst, A&gt;::strides</ref></highlight></codeline>
<codeline lineno="1769" refid="classandres_1_1View_1a3c4b2cee088b6cf8232289cbb50bd2b4" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>dimension<sp/>&lt;<sp/>this-&gt;dimension());</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.strides(dimension);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="1786" refid="classandres_1_1View_1a44f545270b7e66a749c2a8988a5dcd92" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a44f545270b7e66a749c2a8988a5dcd92" kindref="member">View&lt;T, isConst, A&gt;::stridesBegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1787"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.stridesBegin();</highlight></codeline>
<codeline lineno="1791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="1800" refid="classandres_1_1View_1ab4ee3379ba0903bb14645c397d2a85b6" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1ab4ee3379ba0903bb14645c397d2a85b6" kindref="member">View&lt;T, isConst, A&gt;::stridesEnd</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1801"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.stridesEnd();</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;</highlight></codeline>
<codeline lineno="1813" refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" kindref="member">View&lt;T, isConst, A&gt;::coordinateOrder</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1814"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.coordinateOrder();</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825" refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" kindref="member">View&lt;T, isConst, A&gt;::isSimple</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1826"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geometry_.isSimple();</highlight></codeline>
<codeline lineno="1829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::operator</ref>=</highlight></codeline>
<codeline lineno="1873" refid="classandres_1_1View_1a604e4fe802e5d712a4e99ae44e496a3f" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::AssignmentOperatorHelper&lt;isConst,<sp/>T,<sp/>T,<sp/>A,<sp/>A&gt;::execute(in,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="1888" refid="classandres_1_1View_1a24aacc568e0bd3a5c69fe1d9550d03f7" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::AssignmentOperatorHelper&lt;isConst,<sp/>T,<sp/>T,<sp/>A,<sp/>A&gt;::execute(in,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="1904" refid="classandres_1_1View_1a56d4233c4be9807ff750039ade3ae4d3" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="1906"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::AssignmentOperatorHelper&lt;isConst,<sp/>TLocal,<sp/>T,<sp/>ALocal,<sp/>A&gt;::execute(in,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="1922"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="1923" refid="classandres_1_1View_1a398b0af0619bbfca644c0a2a53b598e9" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isSimple())<sp/>{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;geometry_.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_[j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;1,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;2,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;3,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;4,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;5,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;6,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;7,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;8,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;9,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinaryScalar&lt;10,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;,<sp/>T,<sp/>T,<sp/>A&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>value,<sp/>marray_detail::Assign&lt;T,<sp/>T&gt;(),<sp/>data_);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iterator<sp/>it<sp/>=<sp/>begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="1965" refid="classandres_1_1View_1a719e584cdfc9bbf38417dadb8362610e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;<sp/>expression</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>expression,<sp/>marray_detail::Assign&lt;T,<sp/>Te&gt;());</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="1985" refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/>out</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/>view(bit,<sp/>sit,<sp/>coordinateOrder(),<sp/>out);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="2008" refid="classandres_1_1View_1a81d4d44cfe0b4373f5488d6b01346189" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/>out</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinatesToOffset(bit,<sp/>offset);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>out.assign(sit,<sp/>sit+dimension(),<sp/>geometry_.stridesBegin(),</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_+offset,<sp/>internalCoordinateOrder);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="2034" refid="classandres_1_1View_1a4da55e4518bb93761e275b5340373ccd" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit</highlight></codeline>
<codeline lineno="2037"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;view(bit,<sp/>sit,<sp/>v);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="2058" refid="classandres_1_1View_1a6ec3e4ec58da8405e3e8b4bf6d4912e4" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder</highlight></codeline>
<codeline lineno="2062"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;view(bit,<sp/>sit,<sp/>internalCoordinateOrder,<sp/>v);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2082" refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;<sp/>out</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/>constView(bit,<sp/>sit,<sp/>coordinateOrder(),<sp/>out);</highlight></codeline>
<codeline lineno="2089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2105" refid="classandres_1_1View_1a331568a945dc85ab30f03de5f993b792" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;<sp/>out</highlight></codeline>
<codeline lineno="2110"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinatesToOffset(bit,<sp/>offset);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>out.assign(sit,<sp/>sit+dimension(),</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.stridesBegin(),</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data_)<sp/>+<sp/>offset,</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder);</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2134" refid="classandres_1_1View_1ab329255f0d1c9f7acaa4460482ca1fe1" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;constView(bit,<sp/>sit,<sp/>v);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BaseIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2158" refid="classandres_1_1View_1ab3bfeed6e84bccb0669497f64eb88557" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseIterator<sp/>bit,</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>sit,</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder</highlight></codeline>
<codeline lineno="2162"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref><sp/>v;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;constView(bit,<sp/>sit,<sp/>internalCoordinateOrder,<sp/>v);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="2182"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>b,</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>s,</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref>&amp;<sp/>out</highlight></codeline>
<codeline lineno="2187"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2188"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/>view(b.begin(),<sp/>s.begin(),<sp/>internalCoordinateOrder,<sp/>out);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><ref refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" kindref="member">View&lt;T, isConst, A&gt;::view</ref></highlight></codeline>
<codeline lineno="2203"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>b,</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>s,</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;<sp/>out</highlight></codeline>
<codeline lineno="2207"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2208"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>view(b.begin(),<sp/>s.begin(),<sp/>coordinateOrder(),<sp/>out);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2224"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>b,</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>s,</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;<sp/>out</highlight></codeline>
<codeline lineno="2229"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2230"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>constView(b.begin(),<sp/>s.begin(),<sp/>internalCoordinateOrder,<sp/>out);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><ref refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" kindref="member">View&lt;T, isConst, A&gt;::constView</ref></highlight></codeline>
<codeline lineno="2246"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>b,</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>s,</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;&amp;<sp/>out</highlight></codeline>
<codeline lineno="2250"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2251"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>constView(b.begin(),<sp/>s.begin(),<sp/>coordinateOrder(),<sp/>out);</highlight></codeline>
<codeline lineno="2253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><ref refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" kindref="member">View&lt;T, isConst, A&gt;::reshape</ref></highlight></codeline>
<codeline lineno="2273" refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>isSimple());</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>size<sp/>=<sp/>std::accumulate(begin,<sp/>end,<sp/>static_cast&lt;std::size_t&gt;(1),</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;std::size_t&gt;());</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(size<sp/>==<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>assign(begin,<sp/>end,<sp/>data_,<sp/>coordinateOrder(),<sp/>coordinateOrder());</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><ref refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" kindref="member">View&lt;T, isConst, A&gt;::reshapedView</ref></highlight></codeline>
<codeline lineno="2306" refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end</highlight></codeline>
<codeline lineno="2309"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/>out.reshape(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><ref refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" kindref="member">View&lt;T, isConst, A&gt;::reshape</ref></highlight></codeline>
<codeline lineno="2331"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape</highlight></codeline>
<codeline lineno="2333"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/>reshape(shape.begin(),<sp/>shape.end());</highlight></codeline>
<codeline lineno="2336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><ref refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" kindref="member">View&lt;T, isConst, A&gt;::reshapedView</ref></highlight></codeline>
<codeline lineno="2352"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape</highlight></codeline>
<codeline lineno="2354"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2355"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reshapedView(shape.begin(),<sp/>shape.end());</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><ref refid="classandres_1_1View_1ab39dae59df5589ec0311ad67a3c7d000" kindref="member">View&lt;T, isConst, A&gt;::boundView</ref></highlight></codeline>
<codeline lineno="2373" refid="classandres_1_1View_1ab39dae59df5589ec0311ad67a3c7d000" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension,</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>value</highlight></codeline>
<codeline lineno="2376"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(dimension<sp/>&lt;<sp/>this-&gt;dimension()</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>value<sp/>&lt;<sp/>shape(dimension)));</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;dimension()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View</ref><sp/>v(&amp;((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(value)));</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.coordinateOrder()<sp/>=<sp/>coordinateOrder();</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View</ref><sp/>v;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.resize(this-&gt;dimension()-1);</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.coordinateOrder()<sp/>=<sp/>coordinateOrder();</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.size()<sp/>=<sp/>size()<sp/>/<sp/>shape(dimension);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0,<sp/>k=0;<sp/>j&lt;this-&gt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>!=<sp/>dimension)<sp/>{</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.shape(k)<sp/>=<sp/>shape(j);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.strides(k)<sp/>=<sp/>strides(j);</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k;</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(v.geometry_.shapeBegin(),<sp/>v.geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.geometry_.shapeStridesBegin(),<sp/>v.geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.data_<sp/>=<sp/>data_<sp/>+<sp/>strides(dimension)<sp/>*<sp/>value;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.updateSimplicity();</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.testInvariant();</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413" refid="classandres_1_1View_1a922763728fb80d24c32a5e5964537bdb" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a922763728fb80d24c32a5e5964537bdb" kindref="member">View&lt;T, isConst, A&gt;::squeeze</ref>()</highlight></codeline>
<codeline lineno="2414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>newDimension<sp/>=<sp/>dimension();</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shape(j)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--newDimension;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newDimension<sp/>!=<sp/>dimension())<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newDimension<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.resize(0);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.size()<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0,<sp/>k=0;<sp/>j&lt;geometry_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(geometry_.shape(j)<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shape(k)<sp/>=<sp/>geometry_.shape(j);</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.strides(k)<sp/>=<sp/>geometry_.strides(j);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++k;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.resize(newDimension);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(geometry_.shapeBegin(),<sp/>geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shapeStridesBegin(),<sp/>geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2453" refid="classandres_1_1View_1a4d454242ebde77898963b7bc41208bb5" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a4d454242ebde77898963b7bc41208bb5" kindref="member">View&lt;T, isConst, A&gt;::squeezedView</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2454"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>v<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/>v.squeeze();</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><ref refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" kindref="member">View&lt;T, isConst, A&gt;::permute</ref></highlight></codeline>
<codeline lineno="2472"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>permutation</highlight></codeline>
<codeline lineno="2474"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>permute(permutation.begin());</highlight></codeline>
<codeline lineno="2477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><ref refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" kindref="member">View&lt;T, isConst, A&gt;::permute</ref></highlight></codeline>
<codeline lineno="2492" refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>begin</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(dimension()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::size_t&gt;<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s1.insert(j);</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s2.insert(*it);</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(s1<sp/>==<sp/>s2);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>shape,<sp/>shape<sp/>strides,<sp/>strides,<sp/>and<sp/>simplicity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>newShape<sp/>=<sp/>std::vector&lt;std::size_t&gt;(dimension());</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>newStrides<sp/>=<sp/>std::vector&lt;std::size_t&gt;(dimension());</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newShape[j]<sp/>=<sp/>geometry_.shape(static_cast&lt;std::size_t&gt;(*begin));</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStrides[j]<sp/>=<sp/>geometry_.strides(static_cast&lt;std::size_t&gt;(*begin));</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shape(j)<sp/>=<sp/>newShape[j];</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.strides(j)<sp/>=<sp/>newStrides[j];</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(geometry_.shapeBegin(),<sp/>geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shapeStridesBegin(),<sp/>geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><ref refid="classandres_1_1View_1a278c77d7b10642fffc9ca8b3bc292cd1" kindref="member">View&lt;T, isConst, A&gt;::permutedView</ref></highlight></codeline>
<codeline lineno="2539" refid="classandres_1_1View_1a278c77d7b10642fffc9ca8b3bc292cd1" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>begin</highlight></codeline>
<codeline lineno="2541"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>out.permute(begin);</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><ref refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" kindref="member">View&lt;T, isConst, A&gt;::transpose</ref></highlight></codeline>
<codeline lineno="2557" refid="classandres_1_1View_1a3a837dd20fda8c536f9c76894a1f5944" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2</highlight></codeline>
<codeline lineno="2560"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dimension()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>c1<sp/>&lt;<sp/>dimension()<sp/>&amp;&amp;<sp/>c2<sp/>&lt;<sp/>dimension()));</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>j1<sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>j2<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>c;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>d;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>geometry_.shape(j2);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_.shape(j2)<sp/>=<sp/>geometry_.shape(j1);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_.shape(j1)<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>geometry_.strides(j2);</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_.strides(j2)<sp/>=<sp/>geometry_.strides(j1);</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_.strides(j1)<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>shape<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(geometry_.shapeBegin(),<sp/>geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shapeStridesBegin(),<sp/>geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2596" refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" kindref="member">View&lt;T, isConst, A&gt;::transpose</ref>()</highlight></codeline>
<codeline lineno="2597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension()/2;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>k<sp/>=<sp/>dimension()-j-1;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>shape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>tmp<sp/>=<sp/>geometry_.shape(j);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shape(j)<sp/>=<sp/>geometry_.shape(k);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shape(k)<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transpose<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>geometry_.strides(j);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.strides(j)<sp/>=<sp/>geometry_.strides(k);</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.strides(k)<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(geometry_.shapeBegin(),<sp/>geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_.shapeStridesBegin(),<sp/>geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><ref refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" kindref="member">View&lt;T, isConst, A&gt;::transposedView</ref></highlight></codeline>
<codeline lineno="2629" refid="classandres_1_1View_1a08fc7f17dd64241adeefac7493f39f3a" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2</highlight></codeline>
<codeline lineno="2632"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>out.transpose(c1,<sp/>c2);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2647" refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" kindref="member">View&lt;T, isConst, A&gt;::transposedView</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2648"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>out.transpose();</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><ref refid="classandres_1_1View_1a476957393b3b21333bc665e852da47ad" kindref="member">View&lt;T, isConst, A&gt;::shift</ref></highlight></codeline>
<codeline lineno="2663" refid="classandres_1_1View_1a476957393b3b21333bc665e852da47ad" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n</highlight></codeline>
<codeline lineno="2665"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>dimension()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&lt;=<sp/>-static_cast&lt;int&gt;(dimension())<sp/>||<sp/>n<sp/>&gt;=<sp/>static_cast&lt;int&gt;(dimension()))<sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift(n<sp/>%<sp/>static_cast&lt;int&gt;(dimension()));</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift(n<sp/>-<sp/>static_cast&lt;int&gt;(dimension()));</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>p(dimension());</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[j]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(j)<sp/>-<sp/>n))<sp/>%<sp/>dimension();</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>permute(p.begin());</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><ref refid="classandres_1_1View_1a267a57ffddb437e19d0a15d342aeebc9" kindref="member">View&lt;T, isConst, A&gt;::shiftedView</ref></highlight></codeline>
<codeline lineno="2695" refid="classandres_1_1View_1a267a57ffddb437e19d0a15d342aeebc9" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n</highlight></codeline>
<codeline lineno="2697"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;</ref><sp/>out<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/>out.shift(n);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;T, isConst, A&gt;::iterator</ref></highlight></codeline>
<codeline lineno="2712" refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" kindref="member">View&lt;T, isConst, A&gt;::begin</ref>()</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;T, isConst, A&gt;::iterator</ref></highlight></codeline>
<codeline lineno="2725" refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" kindref="member">View&lt;T, isConst, A&gt;::end</ref>()</highlight></codeline>
<codeline lineno="2726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>geometry_.size());</highlight></codeline>
<codeline lineno="2729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;T, isConst, A&gt;::const_iterator</ref></highlight></codeline>
<codeline lineno="2738" refid="classandres_1_1View_1a95eb85a97d6a98b3cd3271a033ddae06" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" kindref="member">View&lt;T, isConst, A&gt;::begin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2739"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, true&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;T, isConst, A&gt;::const_iterator</ref></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752" refid="classandres_1_1View_1ae55b54c50dd58caf8c128c7ec72be8c3" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" kindref="member">View&lt;T, isConst, A&gt;::end</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2753"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, true&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>geometry_.size());</highlight></codeline>
<codeline lineno="2756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aab07af42756759420211d114bb705547" kindref="member">View&lt;T, isConst, A&gt;::reverse_iterator</ref></highlight></codeline>
<codeline lineno="2765" refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" kindref="member">View&lt;T, isConst, A&gt;::rbegin</ref>()</highlight></codeline>
<codeline lineno="2766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reverse_iterator(end());</highlight></codeline>
<codeline lineno="2768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aab07af42756759420211d114bb705547" kindref="member">View&lt;T, isConst, A&gt;::reverse_iterator</ref></highlight></codeline>
<codeline lineno="2777" refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" kindref="member">View&lt;T, isConst, A&gt;::rend</ref>()</highlight></codeline>
<codeline lineno="2778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reverse_iterator(begin());</highlight></codeline>
<codeline lineno="2780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" kindref="member">View&lt;T, isConst, A&gt;::const_reverse_iterator</ref></highlight></codeline>
<codeline lineno="2789" refid="classandres_1_1View_1a7c2f923cffa4782f5d14c48d54981f46" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" kindref="member">View&lt;T, isConst, A&gt;::rbegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2790"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(end());</highlight></codeline>
<codeline lineno="2792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" kindref="member">View&lt;T, isConst, A&gt;::const_reverse_iterator</ref></highlight></codeline>
<codeline lineno="2801" refid="classandres_1_1View_1a04e6fd865daf11473573114adf296662" refkind="member"><highlight class="normal"><ref refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" kindref="member">View&lt;T, isConst, A&gt;::rend</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2802"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(begin());</highlight></codeline>
<codeline lineno="2804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><ref refid="classandres_1_1View" kindref="compound">View&lt;T, isConst, A&gt;::updateSimplicity</ref>()</highlight></codeline>
<codeline lineno="2815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>invariant<sp/>test<sp/>here<sp/>because<sp/>this<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>called<sp/>during<sp/>unsafe<sp/>updates<sp/>of<sp/>a<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_.updateSimplicity();</highlight></codeline>
<codeline lineno="2819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2829"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator[]</highlight></codeline>
<codeline lineno="2832"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset</highlight></codeline>
<codeline lineno="2834"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[offset];</highlight></codeline>
<codeline lineno="2838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T&amp;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::operator[]</highlight></codeline>
<codeline lineno="2851"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset</highlight></codeline>
<codeline lineno="2853"><highlight class="normal">)</highlight></codeline>
<codeline lineno="2854"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[offset];</highlight></codeline>
<codeline lineno="2856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal">View&lt;T,<sp/>isConst,<sp/>A&gt;::testInvariant()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2866"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2868"><highlight class="comment"><sp/><sp/><sp/><sp/>if(!MARRAY_NO_DEBUG)<sp/>{</highlight></codeline>
<codeline lineno="2869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;JOOO\n&quot;;</highlight></codeline>
<codeline lineno="2870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(geometry_.dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.isSimple()<sp/>==<sp/>true);</highlight></codeline>
<codeline lineno="2872"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(data_<sp/>!=<sp/>0)<sp/>{<sp/>//<sp/>scalar</highlight></codeline>
<codeline lineno="2873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="2874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="2878"><highlight class="comment"></highlight></codeline>
<codeline lineno="2879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>test<sp/>size_<sp/>to<sp/>be<sp/>consistent<sp/>with<sp/>shape_</highlight></codeline>
<codeline lineno="2880"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>testSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;geometry_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testSize<sp/>*=<sp/>geometry_.shape(j);</highlight></codeline>
<codeline lineno="2883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2884"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.size()<sp/>==<sp/>testSize);</highlight></codeline>
<codeline lineno="2885"><highlight class="comment"></highlight></codeline>
<codeline lineno="2886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>test<sp/>shapeStrides_<sp/>to<sp/>be<sp/>consistent<sp/>with<sp/>shape_</highlight></codeline>
<codeline lineno="2887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(geometry_.coordinateOrder()<sp/>==<sp/>FirstMajorOrder)<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>tmp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;geometry_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.shapeStrides(geometry_.dimension()-j-1)<sp/>==<sp/>tmp);</highlight></codeline>
<codeline lineno="2891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>*=<sp/>geometry_.shape(geometry_.dimension()-j-1);</highlight></codeline>
<codeline lineno="2892"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>tmp<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;geometry_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.shapeStrides(j)<sp/>==<sp/>tmp);</highlight></codeline>
<codeline lineno="2898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp<sp/>*=<sp/>geometry_.shape(j);</highlight></codeline>
<codeline lineno="2899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2901"><highlight class="comment"></highlight></codeline>
<codeline lineno="2902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>test<sp/>the<sp/>simplicity<sp/>condition</highlight></codeline>
<codeline lineno="2903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(geometry_.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="2904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;geometry_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(geometry_.strides(j)<sp/>==<sp/>geometry_.shapeStrides(j));</highlight></codeline>
<codeline lineno="2906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2909"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1afa268e37459476d9ca233d741e4bc63c" kindref="member">View&lt;T, isConst, A&gt;::overlaps</ref></highlight></codeline>
<codeline lineno="2931" refid="classandres_1_1View_1afa268e37459476d9ca233d741e4bc63c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;<sp/>v</highlight></codeline>
<codeline lineno="2933"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.testInvariant();</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_<sp/>==<sp/>0<sp/>||<sp/>v.data_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dataPointer_<sp/>=<sp/>data_;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>vDataPointer_<sp/>=<sp/>v.data_;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>maxPointer<sp/>=<sp/>&amp;<sp/>(*this)(this-&gt;size()-1);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>maxPointerV<sp/>=<sp/>&amp;<sp/>v(v.size()-1);</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/><sp/><sp/>(dataPointer_<sp/><sp/><sp/>&lt;=<sp/>vDataPointer_<sp/>&amp;&amp;<sp/>vDataPointer_<sp/>&lt;=<sp/>maxPointer)</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(vDataPointer_<sp/>&lt;=<sp/>dataPointer_<sp/><sp/><sp/>&amp;&amp;<sp/>dataPointer_<sp/><sp/><sp/>&lt;=<sp/>maxPointerV)<sp/>)</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="2959"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><ref refid="classandres_1_1View_1a2c1774da3d066b97932ea861f845d95c" kindref="member">View&lt;T, isConst, A&gt;::asString</ref></highlight></codeline>
<codeline lineno="2961" refid="classandres_1_1View_1a2c1774da3d066b97932ea861f845d95c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281f" kindref="member">StringStyle</ref>&amp;<sp/>style</highlight></codeline>
<codeline lineno="2963"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>out(std::ostringstream::out);</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(style<sp/>==<sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa8b1efd8fc40539ba5b5255b46440eeaf" kindref="member">MatrixStyle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*this)(0)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>(*this)(j)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\b\b)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A(r,c)<sp/>=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>y=0;<sp/>y&lt;this-&gt;shape(0);<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>x=0;<sp/>x&lt;this-&gt;shape(1);<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>(*this)(y,<sp/>x)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A(c,r)<sp/>=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>y=0;<sp/>y&lt;this-&gt;shape(1);<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>x=0;<sp/>x&lt;this-&gt;shape(0);<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>(*this)(x,<sp/>y)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>higher<sp/>dimensional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>c1(dimension());</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>c2(dimension());</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dimension()<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(const_iterator<sp/>it<sp/>=<sp/>this-&gt;begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.coordinate(c2.begin());</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it.index()<sp/>==<sp/>0<sp/>||<sp/>c2[q]<sp/>!=<sp/>c1[q])<sp/>{</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it.index()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension()-2;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>c2[j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A(c,r,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=2;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>c2[j]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,r,c&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c2[1]<sp/>!=<sp/>c1[1])<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c1<sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(style<sp/>==<sp/><ref refid="namespaceandres_1a69f07c437d156c7028c7d619e566281fa162a419d5299010966e7cc6a74e7b014" kindref="member">TableStyle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*this)(0)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>c(dimension());</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(const_iterator<sp/>it<sp/>=<sp/>this-&gt;begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A(&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it.coordinate(c.begin());</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;c.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>c[j]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\b)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="3063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>arithmetic<sp/>operators<sp/>of<sp/>View</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T1, false, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">+=</highlight></codeline>
<codeline lineno="3070" refid="namespaceandres_1a8336b0a095fea76e6b28903e7c9dbe94" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T2, isConst, A&gt;</ref>&amp;<sp/>w</highlight></codeline>
<codeline lineno="3073"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>w,<sp/>marray_detail::PlusEqual&lt;T1,<sp/>T2&gt;());</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">++</highlight></codeline>
<codeline lineno="3083" refid="namespaceandres_1af4cbe438bddc157789f80c8528dce4ff" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>v</highlight></codeline>
<codeline lineno="3085"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>marray_detail::PrefixIncrement&lt;T&gt;());</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Marray&lt;T,<sp/>A&gt;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">++</highlight></codeline>
<codeline lineno="3095" refid="namespaceandres_1a4f00ee1858164a9f62899872f38c8f64" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/>in,</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy</highlight></codeline>
<codeline lineno="3098"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref><sp/>out<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(in,<sp/>marray_detail::PostfixIncrement&lt;T&gt;());</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">-=</highlight></codeline>
<codeline lineno="3108" refid="namespaceandres_1a10a01738bed4f67459b210de091d3ea2" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T2, isConst, A&gt;</ref>&amp;<sp/>w</highlight></codeline>
<codeline lineno="3111"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>w,<sp/>marray_detail::MinusEqual&lt;T1,<sp/>T2&gt;());</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">--</highlight></codeline>
<codeline lineno="3121" refid="namespaceandres_1a162f7a3e5e4ec9d773d17843cbfadd55" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>v</highlight></codeline>
<codeline lineno="3123"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>marray_detail::PrefixDecrement&lt;T&gt;());</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>postfix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Marray&lt;T,<sp/>A&gt;</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">--</highlight></codeline>
<codeline lineno="3133" refid="namespaceandres_1a446cb1c63e0aa91200e79a0a762cdb9b" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/>in,</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy</highlight></codeline>
<codeline lineno="3136"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref><sp/>out<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(in,<sp/>marray_detail::PostfixDecrement&lt;T&gt;());</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">*=</highlight></codeline>
<codeline lineno="3146" refid="namespaceandres_1a766484f5dd8163c93e833b6438a49f1e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T2, isConst, A&gt;</ref>&amp;<sp/>w</highlight></codeline>
<codeline lineno="3149"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>w,<sp/>marray_detail::TimesEqual&lt;T1,<sp/>T2&gt;());</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">/=</highlight></codeline>
<codeline lineno="3158" refid="namespaceandres_1af7defe3aacf03796d2490277f8446aa7" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T2, isConst, A&gt;</ref>&amp;<sp/>w</highlight></codeline>
<codeline lineno="3161"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>w,<sp/>marray_detail::DividedByEqual&lt;T1,<sp/>T2&gt;());</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,<sp/>marray_detail::Plus&lt;T1,<sp/>T2,<sp/>typename<sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="3170" refid="namespaceandres_1a43eb4a16a1f776bc81a7f58fa93a0c71" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E1, T1&gt;</ref>&amp;<sp/>expression1,</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E2, T2&gt;</ref>&amp;<sp/>expression2</highlight></codeline>
<codeline lineno="3173"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type<sp/>promoted_type;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>marray_detail::Plus&lt;T1,<sp/>T2,<sp/>promoted_type&gt;<sp/>Functor;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,<sp/>Functor&gt;<sp/>return_type;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_type(expression1,<sp/>expression2);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,T&gt;&amp;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">+</highlight></codeline>
<codeline lineno="3184" refid="namespaceandres_1af0a5caf93e8476b870c5f3ec31d0174d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E,T&gt;</ref>&amp;<sp/>expression</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>unary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expression;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191" refid="andres_2marray_8hxx_1a538cdb43b8a882d35415d4cfeddc2d04" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARRAY_UNARY_OPERATOR(datatype,<sp/>operation,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3192"><highlight class="preprocessor">template&lt;class<sp/>T,<sp/>class<sp/>A&gt;<sp/>\</highlight></codeline>
<codeline lineno="3193"><highlight class="preprocessor">inline<sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>\</highlight></codeline>
<codeline lineno="3194"><highlight class="preprocessor">operator<sp/>operation<sp/>\</highlight></codeline>
<codeline lineno="3195"><highlight class="preprocessor">(<sp/>\</highlight></codeline>
<codeline lineno="3196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>v,<sp/>\</highlight></codeline>
<codeline lineno="3197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>datatype&amp;<sp/>x<sp/>\</highlight></codeline>
<codeline lineno="3198"><highlight class="preprocessor">)<sp/>\</highlight></codeline>
<codeline lineno="3199"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="3200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>marray_detail::operate(v,<sp/>static_cast&lt;T&gt;(x),<sp/>marray_detail::<sp/>functorname<sp/>&lt;T,<sp/>T&gt;());<sp/>\</highlight></codeline>
<codeline lineno="3201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>v;<sp/>\</highlight></codeline>
<codeline lineno="3202"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="3203"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204" refid="andres_2marray_8hxx_1a04763cb28713ff1fbe9ee688981a8d73" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARRAY_UNARY_OPERATOR_ALL_TYPES(op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(char,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(unsigned<sp/>char,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(short,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(unsigned<sp/>short,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(int,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(unsigned<sp/>int,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(long,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(unsigned<sp/>long,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(float,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(double,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_UNARY_OPERATOR(long<sp/>double,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><ref refid="andres_2marray_8hxx_1a04763cb28713ff1fbe9ee688981a8d73" kindref="member">MARRAY_UNARY_OPERATOR_ALL_TYPES</ref>(+=,<sp/>PlusEqual)</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><ref refid="andres_2marray_8hxx_1a04763cb28713ff1fbe9ee688981a8d73" kindref="member">MARRAY_UNARY_OPERATOR_ALL_TYPES</ref>(-=,<sp/>MinusEqual)</highlight></codeline>
<codeline lineno="3219"><highlight class="normal">MARRAY_UNARY_OPERATOR_ALL_TYPES(*=,<sp/>TimesEqual)</highlight></codeline>
<codeline lineno="3220"><highlight class="normal">MARRAY_UNARY_OPERATOR_ALL_TYPES(/=,<sp/>DividedByEqual)</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal">template&lt;class<sp/>E1,<sp/>class<sp/>T1,<sp/>class<sp/>E2,<sp/>class<sp/>T2&gt;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal">inline<sp/>const<sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Minus&lt;T1,<sp/>T2,<sp/>typename<sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal">operator-</highlight></codeline>
<codeline lineno="3226" refid="namespaceandres_1a30eb13a41805ae01b38c7ebf35179743" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>&lt;E1,<sp/>T1&gt;&amp;<sp/>expression1,</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>&lt;E2,<sp/>T2&gt;&amp;<sp/>expression2</highlight></codeline>
<codeline lineno="3229"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Minus&lt;T1,<sp/>T2,</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression1,<sp/>expression2);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnaryViewExpression&lt;E,T,marray_detail::Negate&lt;T&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">-</highlight></codeline>
<codeline lineno="3240" refid="namespaceandres_1a35120fff610c97905d02a9e358b14150" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E,T&gt;</ref>&amp;<sp/>expression</highlight></codeline>
<codeline lineno="3242"><highlight class="normal">)<sp/></highlight><highlight class="comment">//<sp/>unary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UnaryViewExpression&lt;E,T,marray_detail::Negate&lt;T&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression);</highlight></codeline>
<codeline lineno="3246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Times&lt;T1,<sp/>T2,<sp/>typename<sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="3252" refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E1, T1&gt;</ref>&amp;<sp/>expression1,</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E2, T2&gt;</ref>&amp;<sp/>expression2</highlight></codeline>
<codeline lineno="3255"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Times&lt;T1,<sp/>T2,</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type<sp/>&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression1,<sp/>expression2);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::DividedBy&lt;T1,<sp/>T2,<sp/>typename<sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="keyword">operator</highlight><highlight class="normal">/</highlight></codeline>
<codeline lineno="3267" refid="namespaceandres_1ae804c627d02a5db6e2e16f020dfd1683" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E1, T1&gt;</ref>&amp;<sp/>expression1,</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E2, T2&gt;</ref>&amp;<sp/>expression2</highlight></codeline>
<codeline lineno="3270"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::DividedBy&lt;T1,<sp/>T2,</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type<sp/>&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression1,<sp/>expression2);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278" refid="andres_2marray_8hxx_1af7c29c11c522e9999626e035cbf53149" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARRAY_BINARY_OPERATOR(datatype,<sp/>operation,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3279"><highlight class="preprocessor">template&lt;class<sp/>E,<sp/>class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="3280"><highlight class="preprocessor">inline<sp/>const<sp/>BinaryViewExpressionScalarSecond&lt;<sp/>\</highlight></codeline>
<codeline lineno="3281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>E,<sp/>T,<sp/>datatype,<sp/>marray_detail::<sp/>functorname<sp/>&lt;<sp/>\</highlight></codeline>
<codeline lineno="3282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>datatype,<sp/>typename<sp/>marray_detail::PromoteType&lt;T,<sp/>datatype&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="3283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="3284"><highlight class="preprocessor">&gt;<sp/>\</highlight></codeline>
<codeline lineno="3285"><highlight class="preprocessor">operator<sp/>operation<sp/>\</highlight></codeline>
<codeline lineno="3286"><highlight class="preprocessor">(<sp/>\</highlight></codeline>
<codeline lineno="3287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>ViewExpression&lt;E,<sp/>T&gt;&amp;<sp/>expression,<sp/>\</highlight></codeline>
<codeline lineno="3288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>datatype&amp;<sp/>scalar<sp/>\</highlight></codeline>
<codeline lineno="3289"><highlight class="preprocessor">)<sp/>\</highlight></codeline>
<codeline lineno="3290"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="3291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>marray_detail::PromoteType&lt;T,<sp/>datatype&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="3292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>promoted_type;<sp/>\</highlight></codeline>
<codeline lineno="3293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>marray_detail::<sp/>functorname<sp/>&lt;T,<sp/>datatype,<sp/>promoted_type&gt;<sp/>Functor;<sp/>\</highlight></codeline>
<codeline lineno="3294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>BinaryViewExpressionScalarSecond&lt;E,<sp/>T,<sp/>datatype,<sp/>Functor&gt;<sp/>\</highlight></codeline>
<codeline lineno="3295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression_type;<sp/>\</highlight></codeline>
<codeline lineno="3296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>expression_type(expression,<sp/>scalar);<sp/>\</highlight></codeline>
<codeline lineno="3297"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="3298"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="3299"><highlight class="preprocessor">template&lt;class<sp/>E,<sp/>class<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="3300"><highlight class="preprocessor">inline<sp/>const<sp/>BinaryViewExpressionScalarFirst<sp/>\</highlight></codeline>
<codeline lineno="3301"><highlight class="preprocessor">&lt;<sp/>\</highlight></codeline>
<codeline lineno="3302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>E,<sp/>T,<sp/>datatype,<sp/>marray_detail::<sp/>functorname<sp/>&lt;<sp/>\</highlight></codeline>
<codeline lineno="3303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype,<sp/>T,<sp/>typename<sp/>marray_detail::PromoteType&lt;datatype,<sp/>T&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="3304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&gt;<sp/>\</highlight></codeline>
<codeline lineno="3305"><highlight class="preprocessor">&gt;<sp/>\</highlight></codeline>
<codeline lineno="3306"><highlight class="preprocessor">operator<sp/>operation<sp/>\</highlight></codeline>
<codeline lineno="3307"><highlight class="preprocessor">(<sp/>\</highlight></codeline>
<codeline lineno="3308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>datatype&amp;<sp/>scalar,<sp/>\</highlight></codeline>
<codeline lineno="3309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>ViewExpression&lt;E,<sp/>T&gt;&amp;<sp/>expression<sp/>\</highlight></codeline>
<codeline lineno="3310"><highlight class="preprocessor">)<sp/>\</highlight></codeline>
<codeline lineno="3311"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="3312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>typename<sp/>marray_detail::PromoteType&lt;T,<sp/>datatype&gt;::type<sp/>\</highlight></codeline>
<codeline lineno="3313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>promoted_type;<sp/>\</highlight></codeline>
<codeline lineno="3314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>marray_detail::<sp/>functorname<sp/>&lt;datatype,<sp/>T,<sp/>promoted_type&gt;<sp/>Functor;<sp/>\</highlight></codeline>
<codeline lineno="3315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>typedef<sp/>BinaryViewExpressionScalarFirst&lt;E,<sp/>T,<sp/>datatype,<sp/>Functor&gt;<sp/>\</highlight></codeline>
<codeline lineno="3316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression_type;<sp/>\</highlight></codeline>
<codeline lineno="3317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>expression_type(expression,<sp/>scalar);<sp/>\</highlight></codeline>
<codeline lineno="3318"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320" refid="andres_2marray_8hxx_1a77c7c3614a2ac1f709b44d5cc149afd0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MARRAY_BINARY_OPERATOR_ALL_TYPES(op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(char,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(unsigned<sp/>char,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(short,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(unsigned<sp/>short,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(int,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(unsigned<sp/>int,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(long,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(unsigned<sp/>long,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(float,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(double,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MARRAY_BINARY_OPERATOR(long<sp/>double,<sp/>op,<sp/>functorname)<sp/>\</highlight></codeline>
<codeline lineno="3332"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><ref refid="andres_2marray_8hxx_1a77c7c3614a2ac1f709b44d5cc149afd0" kindref="member">MARRAY_BINARY_OPERATOR_ALL_TYPES</ref>(+,<sp/>Plus)</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><ref refid="andres_2marray_8hxx_1a77c7c3614a2ac1f709b44d5cc149afd0" kindref="member">MARRAY_BINARY_OPERATOR_ALL_TYPES</ref>(-,<sp/>Minus)</highlight></codeline>
<codeline lineno="3335"><highlight class="normal">MARRAY_BINARY_OPERATOR_ALL_TYPES(*,<sp/>Times)</highlight></codeline>
<codeline lineno="3336"><highlight class="normal">MARRAY_BINARY_OPERATOR_ALL_TYPES(/,<sp/>DividedBy)</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>Marray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal">template&lt;class<sp/>T,<sp/>class<sp/>A&gt;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal">inline<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal">Marray&lt;T,<sp/>A&gt;::assign</highlight></codeline>
<codeline lineno="3351" refid="classandres_1_1Marray_1a680a02cc61393dddb44fb88e337f29b7" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;data_<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/>dataAllocator_<sp/>=<sp/>allocator;</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/>base::assign();</highlight></codeline>
<codeline lineno="3361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3370" refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3372"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal">:<sp/>base(allocator),</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3391" refid="classandres_1_1Marray_1af0c5c9182383cc5db6ce3ef36f039b7d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3395"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3396"><highlight class="normal">:<sp/><sp/><sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(1);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_[0]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>geometry_type(0,<sp/>coordinateOrder,<sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>allocator);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3411" refid="classandres_1_1Marray_1aad23a5b853c0c69bf0e912a44d549f79" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="3413"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3414"><highlight class="normal">:<sp/><sp/><sp/>dataAllocator_(in.dataAllocator_)</highlight></codeline>
<codeline lineno="3415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.testInvariant();</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.data_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(in.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(this-&gt;data_,<sp/>in.data_,<sp/>(in.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>())*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>in.geometry_;</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3438" refid="classandres_1_1Marray_1a0b6a165fd753d5caf8ead55868a856ac" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="3440"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3441"><highlight class="normal">:<sp/>dataAllocator_()</highlight></codeline>
<codeline lineno="3442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.testInvariant();</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adapt<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>in.geometry_;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;in.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.strides(j)<sp/>=<sp/>in.geometry_.shapeStrides(j);<sp/></highlight><highlight class="comment">//<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;geometry_.isSimple()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(in.size());</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.isSimple()<sp/>&amp;&amp;<sp/>marray_detail::IsEqual&lt;T,<sp/>TLocal&gt;::type)<sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(this-&gt;data_,<sp/>in.data_,<sp/>(in.size())*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;::const_iterator</ref><sp/>it<sp/>=<sp/>in.begin();</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;size();<sp/>++j,<sp/>++it)<sp/><sp/>{</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[j]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3483" refid="classandres_1_1Marray_1a5489b4b2b1013e3232f1749d66a6db91" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;<sp/>expression,</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3486"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3487"><highlight class="normal">:<sp/><sp/><sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(expression.<ref refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expression.<ref refid="classandres_1_1ViewExpression_1a93b140494015c1b01455083aaad98d15" kindref="member">dimension</ref>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>geometry_type(0,</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>E&amp;&gt;(expression).coordinateOrder(),</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>dataAllocator_);</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>geometry_type(</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>E&amp;&gt;(expression).shapeBegin(),</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>E&amp;&gt;(expression).shapeEnd(),</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>E&amp;&gt;(expression).coordinateOrder(),</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>E&amp;&gt;(expression).coordinateOrder(),</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_);</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>e<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(expression);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>e.size()<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e(0));</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>e.size()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e,<sp/>marray_detail::Assign&lt;T,<sp/>Te&gt;());</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3530" refid="classandres_1_1Marray_1a88a89dc7f1fa0e775c6abaabb995d991" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3536"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3537"><highlight class="normal">:<sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size<sp/>=<sp/>std::accumulate(begin,<sp/>end,<sp/>static_cast&lt;std::size_t&gt;(1),</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;std::size_t&gt;());</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>size<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>base::assign(begin,<sp/>end,<sp/>dataAllocator_.allocate(size),<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;size;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3560"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3564" refid="classandres_1_1Marray_1a2f4ca97b0126cd3d72519a2c0bf33f08" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>&amp;<sp/>is,</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3570"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3571"><highlight class="normal">:<sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size<sp/>=<sp/>std::accumulate(begin,<sp/>end,<sp/>static_cast&lt;std::size_t&gt;(1),</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multiplies&lt;std::size_t&gt;());</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>size<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>base::assign(begin,<sp/>end,<sp/>dataAllocator_.allocate(size),<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinateOrder,<sp/>allocator);</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray&lt;T, A&gt;::Marray</ref></highlight></codeline>
<codeline lineno="3593"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value,</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder,</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3600"><highlight class="normal">:<sp/>dataAllocator_(allocator)</highlight></codeline>
<codeline lineno="3601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref><sp/>=<sp/>std::accumulate(shape.begin(),<sp/>shape.end(),</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1),<sp/>std::multiplies&lt;std::size_t&gt;());</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>size<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1adb82f950ac02e2482376914be5c5595c" kindref="member">base::assign</ref>(shape.begin(),<sp/>shape.end(),<sp/>dataAllocator_.allocate(size),</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" kindref="member">coordinateOrder</ref>,<sp/><ref refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" kindref="member">coordinateOrder</ref>,<sp/>allocator);</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3618" refid="classandres_1_1Marray_1a6b900bedc740214e8b60684a8b0ad621" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Marray_1a6b900bedc740214e8b60684a8b0ad621" kindref="member">Marray&lt;T, A&gt;::~Marray</ref>()</highlight></codeline>
<codeline lineno="3619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;::operator</ref>=</highlight></codeline>
<codeline lineno="3639" refid="classandres_1_1Marray_1a7519023d16efb739c0248a84c006e9e6" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="3641"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.testInvariant();</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;in)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.data_<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>un-initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size()<sp/>!=<sp/>in.size())<sp/>{</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(in.size());</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(this-&gt;data_,<sp/>in.data_,<sp/>in.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>in.geometry_;</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TLocal,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ALocal&gt;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal">Marray&lt;T,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="3687" refid="classandres_1_1Marray_1a50c57bb0dbb133dc9e477ec2dbccdad9" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="3689"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in.testInvariant();</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(&amp;in)<sp/>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.data_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_<sp/>=<sp/>in.geometry_;</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;overlaps(in))<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref><sp/>m<sp/>=<sp/>in;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-alloc<sp/>memory<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size()<sp/>!=<sp/>in.size())<sp/>{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(in.size());</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"></highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.<ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(in.dimension());</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;in.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.shape(j)<sp/>=<sp/>in.geometry_.shape(j);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.shapeStrides(j)<sp/>=<sp/>in.geometry_.shapeStrides(j);</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.strides(j)<sp/>=<sp/>in.geometry_.shapeStrides(j);<sp/></highlight><highlight class="comment">//<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.size()<sp/>=<sp/>in.size();</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.isSimple()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.coordinateOrder()<sp/>=<sp/>in.coordinateOrder();</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.isSimple()<sp/>&amp;&amp;<sp/>marray_detail::IsEqual&lt;T,<sp/>TLocal&gt;::type)<sp/>{</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(this-&gt;data_,<sp/>in.data_,<sp/>(in.size())*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;1,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;2,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;3,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;4,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;5,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;6,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;7,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;8,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;9,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(in.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::OperateHelperBinary&lt;10,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;,<sp/>T,<sp/>TLocal,<sp/>isConstLocal,<sp/>A,<sp/>ALocal&gt;::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>in,<sp/>marray_detail::Assign&lt;T,<sp/>TLocal&gt;(),<sp/>this-&gt;data_,<sp/>&amp;in(0));</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">View&lt;TLocal, isConstLocal, ALocal&gt;::const_iterator</ref><sp/>it<sp/>=<sp/>in.begin();</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;size();<sp/>++j,<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[j]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="3766"><highlight class="normal">Marray&lt;T,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="3767" refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value</highlight></codeline>
<codeline lineno="3769"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>this-&gt;data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;this-&gt;size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_[j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Te&gt;</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal">Marray&lt;T,<sp/>A&gt;::operator=</highlight></codeline>
<codeline lineno="3782" refid="classandres_1_1Marray_1a248d8da450653279912cec325a4309d2" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, Te&gt;</ref>&amp;<sp/>expression</highlight></codeline>
<codeline lineno="3784"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(expression.<ref refid="classandres_1_1ViewExpression_1ac06ec98e7837bc72c87ef5c9881ad19f" kindref="member">overlaps</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;</ref><sp/>m(expression);<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)<sp/>=<sp/>m;<sp/></highlight><highlight class="comment">//<sp/>recursive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>re-allocate<sp/>memory<sp/>(if<sp/>necessary)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;size()<sp/>!=<sp/>expression.<ref refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>dataAllocator_.allocate(expression.<ref refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>geometry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.<ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">resize</ref>(expression.<ref refid="classandres_1_1ViewExpression_1a93b140494015c1b01455083aaad98d15" kindref="member">dimension</ref>());</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;expression.<ref refid="classandres_1_1ViewExpression_1a93b140494015c1b01455083aaad98d15" kindref="member">dimension</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.shape(j)<sp/>=<sp/>expression.<ref refid="classandres_1_1ViewExpression_1a1cf03409893f5b7386a9458e9c8e1d9b" kindref="member">shape</ref>(j);</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.size()<sp/>=<sp/>expression.<ref refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.isSimple()<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.coordinateOrder()<sp/>=<sp/>expression.<ref refid="classandres_1_1ViewExpression_1a7936210ed21025b77e35c9a6f4f40619" kindref="member">coordinateOrder</ref>();</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;geometry_.dimension()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(this-&gt;geometry_.shapeBegin(),<sp/>this-&gt;geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.shapeStridesBegin(),<sp/>this-&gt;geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::stridesFromShape(this-&gt;geometry_.shapeBegin(),<sp/>this-&gt;geometry_.shapeEnd(),</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.stridesBegin(),<sp/>this-&gt;geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::operate(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>expression,<sp/>marray_detail::Assign&lt;T,<sp/>Te&gt;());</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SKIP_INITIALIZATION,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><ref refid="classandres_1_1Marray" kindref="compound">Marray&lt;T, A&gt;::resizeHelper</ref></highlight></codeline>
<codeline lineno="3822"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value</highlight></codeline>
<codeline lineno="3826"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>newShape;</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>newSize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ShapeIterator<sp/>it<sp/>=<sp/>begin;<sp/>it<sp/>!=<sp/>end;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>x<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>x<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newShape.push_back(x);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSize<sp/>*=<sp/>x;</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>value_type*<sp/>newData<sp/>=<sp/>dataAllocator_.allocate(newSize);</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!SKIP_INITIALIZATION)<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;newSize;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData[j]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>old<sp/>data<sp/>in<sp/>region<sp/>of<sp/>overlap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;data_<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newSize<sp/>==<sp/>1<sp/>||<sp/>this-&gt;dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData[0]<sp/>=<sp/>this-&gt;data_[0];</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>base1(this-&gt;dimension());</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>base2(newShape.size());</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>shape1(this-&gt;dimension(),<sp/>1);</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>shape2(newShape.size(),<sp/>1);</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;std::min(this-&gt;dimension(),<sp/>newShape.size());<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape1[j]<sp/>=<sp/>std::min(this-&gt;shape(j),<sp/>newShape[j]);</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape2[j]<sp/>=<sp/>shape1[j];</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>true,<sp/>A&gt;<sp/>view1;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;constView(base1.begin(),<sp/>shape1.begin(),<sp/>view1);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;<sp/>viewT(newShape.begin(),<sp/>newShape.end(),</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData,<sp/>this-&gt;coordinateOrder(),</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;coordinateOrder());</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;<sp/>view2;</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewT.view(base2.begin(),<sp/>shape2.begin(),<sp/>view2);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view1.squeeze();</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view2.squeeze();</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view2<sp/>=<sp/>view1;<sp/></highlight><highlight class="comment">//<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataAllocator_.deallocate(this-&gt;data_,<sp/>this-&gt;size());</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/>base::assign(begin,<sp/>end,<sp/>newData,<sp/>this-&gt;geometry_.coordinateOrder(),</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;geometry_.coordinateOrder());</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="3876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">Marray&lt;T, A&gt;::resize</ref></highlight></codeline>
<codeline lineno="3889" refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value</highlight></codeline>
<codeline lineno="3893"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>resizeHelper&lt;false&gt;(begin,<sp/>end,<sp/>value);</highlight></codeline>
<codeline lineno="3896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">Marray&lt;T, A&gt;::resize</ref></highlight></codeline>
<codeline lineno="3909" refid="classandres_1_1Marray_1af3b327724eaf79ce9482644f86956a42" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref>&amp;<sp/>is,</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end</highlight></codeline>
<codeline lineno="3913"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/>resizeHelper&lt;true&gt;(begin,<sp/>end);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_CPP11_INITIALIZER_LISTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">Marray&lt;T, A&gt;::resize</ref></highlight></codeline>
<codeline lineno="3927"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape,</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/>resizeHelper&lt;false&gt;(shape.begin(),<sp/>shape.end(),<sp/>value);</highlight></codeline>
<codeline lineno="3933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><ref refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" kindref="member">Marray&lt;T, A&gt;::resize</ref></highlight></codeline>
<codeline lineno="3943"><highlight class="normal">(</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InitializationSkipping&amp;<sp/>si,</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/>std::initializer_list&lt;std::size_t&gt;<sp/>shape</highlight></codeline>
<codeline lineno="3946"><highlight class="normal">)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/>resizeHelper&lt;true&gt;(shape.begin(),<sp/>shape.end());</highlight></codeline>
<codeline lineno="3949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal">Marray&lt;T,<sp/>A&gt;::testInvariant()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3957"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;::testInvariant();</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>this-&gt;geometry_.isSimple());</highlight></codeline>
<codeline lineno="3960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterator<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::testInvariant()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3969"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_DEBUG)<sp/>{</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_.size()<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>index_<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>pointer_<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;size()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>un-initialized<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_.size()<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>index_<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>pointer_<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>initialized<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(index_<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>index_<sp/>&lt;=<sp/>view_-&gt;size());</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>==<sp/>view_-&gt;size())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(pointer_<sp/>==<sp/>&amp;((*view_)(view_-&gt;size()-1))<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(pointer_<sp/>==<sp/>&amp;((*view_)(index_)));</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_.size()<sp/>==<sp/>view_-&gt;dimension());</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>==<sp/>view_-&gt;size())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_[0]<sp/>==<sp/>view_-&gt;shape(0));</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;coordinates_.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_[j]<sp/>==<sp/>view_-&gt;shape(j)-1);</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>d<sp/>=<sp/>view_-&gt;dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_[d]<sp/>==<sp/>view_-&gt;shape(d));</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;d;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_[j]<sp/>==<sp/>view_-&gt;shape(j)-1);</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>testCoord(coordinates_.size());</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_-&gt;indexToCoordinates(index_,<sp/>testCoord.begin());</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;coordinates_.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(coordinates_[j]<sp/>==<sp/>testCoord[j]);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4022" refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator&lt;T, isConst, A&gt;::Iterator</ref>()</highlight></codeline>
<codeline lineno="4023"><highlight class="normal">:<sp/><sp/><sp/>view_(0),</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer_(0),</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>index_(0),</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates_(std::vector&lt;std::size_t&gt;())</highlight></codeline>
<codeline lineno="4027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator&lt;T, isConst, A&gt;::Iterator</ref></highlight></codeline>
<codeline lineno="4038" refid="classandres_1_1Iterator_1aba0cdb5062a14318d9c45c6c71646285" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, true, A&gt;</ref>&amp;<sp/>view,</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>index</highlight></codeline>
<codeline lineno="4041"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4042"><highlight class="normal">:<sp/><sp/><sp/>view_(&amp;view),</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer_(0),</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>index_(index),</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates_(std::vector&lt;std::size_t&gt;(view.dimension()))</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>for<sp/>developers:<sp/>If<sp/>isConst==false,<sp/>the<sp/>construction<sp/>view_(&amp;view)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fails<sp/>due<sp/>to<sp/>incompatible<sp/>types.<sp/>This<sp/>is<sp/>intended<sp/>because<sp/>it<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>possible<sp/>to<sp/>construct<sp/>a<sp/>mutable<sp/>iterator<sp/>on<sp/>constant<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.size()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>un-initialized<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>&lt;=<sp/>view.size());</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(0)<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>view.size())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[0]<sp/>=<sp/>view.shape(0);</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;view.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.shape(j)-1;</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>d<sp/>=<sp/>view_-&gt;dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[d]<sp/>=<sp/>view.shape(d);</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;d;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.shape(j)-1;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(view.size()-1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.indexToCoordinates(index,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(index);</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator&lt;T, isConst, A&gt;::Iterator</ref></highlight></codeline>
<codeline lineno="4091" refid="classandres_1_1Iterator_1a7b3a9873e6c06df90bd70a0262c90de1" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>view,</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>index</highlight></codeline>
<codeline lineno="4094"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4095"><highlight class="normal">:<sp/><sp/><sp/>view_(reinterpret_cast&lt;view_pointer&gt;(&amp;view)),</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer_(0),</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/>index_(index),</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates_(std::vector&lt;std::size_t&gt;(view.<ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">dimension</ref>()))</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>for<sp/>developers:<sp/>If<sp/>isConst==true,<sp/>the<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>view_(reinterpret_cast&lt;view_pointer&gt;(&amp;view))<sp/>works<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>intended<sp/>because<sp/>it<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>constant<sp/>iterator<sp/>on<sp/>mutable<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>un-initialized<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.<ref refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" kindref="member">isSimple</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>&lt;=<sp/>view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(0)<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[0]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(0);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;view.<ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">dimension</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(j)-1;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>d<sp/>=<sp/>view_-&gt;dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[d]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(d);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;d;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(j)-1;</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>()-1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.<ref refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" kindref="member">indexToCoordinates</ref>(index,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(index);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator&lt;T, isConst, A&gt;::Iterator</ref></highlight></codeline>
<codeline lineno="4145" refid="classandres_1_1Iterator_1a182a2080c203da0d9a92045e12c0ac9d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;T, false, A&gt;</ref>&amp;<sp/>view,</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>index</highlight></codeline>
<codeline lineno="4148"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4149"><highlight class="normal">:<sp/><sp/><sp/>view_(reinterpret_cast&lt;view_pointer&gt;(&amp;view)),</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer_(0),</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/>index_(index),</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates_(std::vector&lt;std::size_t&gt;(view.<ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">dimension</ref>()))</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>for<sp/>developers:<sp/>If<sp/>isConst==true,<sp/>the<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>view_(reinterpret_cast&lt;view_pointer&gt;(&amp;view))<sp/>works<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>intended<sp/>because<sp/>it<sp/>should<sp/>be<sp/>possible<sp/>to<sp/>construct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>constant<sp/>iterator<sp/>on<sp/>mutable<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>()<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>un-initialized<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view.<ref refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" kindref="member">isSimple</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index<sp/>&lt;=<sp/>view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(0)<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[0]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(0);</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;view.<ref refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" kindref="member">dimension</ref>();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(j)-1;</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>d<sp/>=<sp/>view_-&gt;dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[d]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(d);</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;d;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view.<ref refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" kindref="member">shape</ref>(j)-1;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(view.<ref refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" kindref="member">size</ref>()-1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.<ref refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" kindref="member">indexToCoordinates</ref>(index,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;view(index);</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a6a97994e2999c992ed829b3da6c748bf" kindref="member">Iterator&lt;T, isConst, A&gt;::Iterator</ref></highlight></codeline>
<codeline lineno="4196" refid="classandres_1_1Iterator_1a6c650c1a0c2ae10324cb33cb22336172" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, false, A&gt;</ref>&amp;<sp/>in</highlight></codeline>
<codeline lineno="4198"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4199"><highlight class="normal">:<sp/><sp/><sp/>view_(<ref refid="classandres_1_1Iterator_1a937adfd36b5e7b01be53d16bd823af12" kindref="member">view_pointer</ref>(in.view_)),</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>pointer_(pointer(in.pointer_)),</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/>index_(in.index_),</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>coordinates_(in.coordinates_)</highlight></codeline>
<codeline lineno="4203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a9805f26813688f04c33e798f7999e5f7" kindref="member">Iterator&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="4211" refid="classandres_1_1Iterator_1a2ea1f1bf8a9d61241f6ab9e68d051663" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a2ea1f1bf8a9d61241f6ab9e68d051663" kindref="member">Iterator&lt;T, isConst, A&gt;::operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4212"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>index_<sp/>&lt;<sp/>view_-&gt;size()));</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pointer_;</highlight></codeline>
<codeline lineno="4215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"></highlight></codeline>
<codeline lineno="4219"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1adf2ba3f1a3cc9c98bff9c544afdb22f9" kindref="member">Iterator&lt;T, isConst, A&gt;::pointer</ref></highlight></codeline>
<codeline lineno="4221" refid="classandres_1_1Iterator_1a41397c945f86104d4553e264f360862b" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a41397c945f86104d4553e264f360862b" kindref="member">Iterator&lt;T, isConst, A&gt;::operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4222"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>index_<sp/>&lt;<sp/>view_-&gt;size()));</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pointer_;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a9805f26813688f04c33e798f7999e5f7" kindref="member">Iterator&lt;T, isConst, A&gt;::reference</ref></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;::operator</ref>[]</highlight></codeline>
<codeline lineno="4232" refid="classandres_1_1Iterator_1a3dda3a1f02423997143ed405766ed26d" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>x</highlight></codeline>
<codeline lineno="4234"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>x+index_<sp/>&lt;<sp/>view_-&gt;size()));</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*view_)(x+index_);</highlight></codeline>
<codeline lineno="4238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"></highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;::operator</ref>+=</highlight></codeline>
<codeline lineno="4243" refid="classandres_1_1Iterator_1ad35d9bf0e2f5079c444353292f5def0c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>&amp;<sp/>x</highlight></codeline>
<codeline lineno="4245"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>&lt;<sp/>view_-&gt;size())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>view<sp/>initialized<sp/>and<sp/>iterator<sp/>not<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>+<sp/>x<sp/>&lt;<sp/>view_-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;((*view_)(index_));</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_-&gt;indexToCoordinates(index_,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_<sp/>=<sp/>view_-&gt;size();</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;(*view_)(0)<sp/>+<sp/>view_-&gt;size();</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>(&amp;(*view_)(view_-&gt;size()-1))<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_-&gt;indexToCoordinates(view_-&gt;size()-1,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[0];</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[view_-&gt;dimension()-1];</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator-=</highlight></codeline>
<codeline lineno="4284" refid="classandres_1_1Iterator_1a2d9d6f6b6b9c3e1843f00b3162f9dfeb" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>&amp;<sp/>x</highlight></codeline>
<codeline lineno="4286"><highlight class="normal">)</highlight></codeline>
<codeline lineno="4287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>static_cast&lt;difference_type&gt;(index_)<sp/>&gt;=<sp/>x);</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/>index_<sp/>-=<sp/>x;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>-=<sp/>x;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;((*view_)(index_));</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_-&gt;indexToCoordinates(index_,<sp/>coordinates_.begin());</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="4306" refid="classandres_1_1Iterator_1aa25f91324c261608591f0d072afa8ac2" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1aa25f91324c261608591f0d072afa8ac2" kindref="member">Iterator&lt;T, isConst, A&gt;::operator++</ref>()</highlight></codeline>
<codeline lineno="4307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>&lt;<sp/>view_-&gt;size())<sp/>{<sp/></highlight><highlight class="comment">//<sp/>view<sp/>initialized<sp/>and<sp/>iterator<sp/>not<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index_;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++pointer_;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>&lt;<sp/>view_-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;coordinates_.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinates_[j]<sp/>==<sp/>view_-&gt;shape(j)-1)<sp/>{</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>-=<sp/>view_-&gt;strides(j)<sp/>*<sp/>coordinates_[j];</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>+=<sp/>view_-&gt;strides(j);</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[j];</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>coordinates_.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinates_[j]<sp/>==<sp/>view_-&gt;shape(j)-1)<sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>-=<sp/>view_-&gt;strides(j)<sp/>*<sp/>coordinates_[j];</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>+=<sp/>view_-&gt;strides(j);</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[j];</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>to<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>=<sp/>&amp;((*view_)(view_-&gt;size()-1))<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[0];</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinates_[view_-&gt;dimension()-1];</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="4370" refid="classandres_1_1Iterator_1a2e7a4ffd36e64600b7a785dd5fcf9920" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a2e7a4ffd36e64600b7a785dd5fcf9920" kindref="member">Iterator&lt;T, isConst, A&gt;::operator--</ref>()</highlight></codeline>
<codeline lineno="4371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>index_<sp/>&gt;<sp/>0));</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/><sp/><sp/>--index_;</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pointer_;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index_<sp/>==<sp/>view_-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decrement<sp/>from<sp/>end<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--pointer_;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--coordinates_[0];</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--coordinates_[view_-&gt;dimension()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;coordinateOrder()<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba586bd03d7519be47cac8605d4833b7ae" kindref="member">LastMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;coordinates_.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinates_[j]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view_-&gt;shape(j)-1;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>+=<sp/>view_-&gt;strides(j)<sp/>*<sp/>coordinates_[j];</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>-=<sp/>view_-&gt;strides(j);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--coordinates_[j];</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>FirstMajorOrder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>j<sp/>=<sp/>view_-&gt;dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinates_[j]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinates_[j]<sp/>=<sp/>view_-&gt;shape(j)-1;</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>+=<sp/>view_-&gt;strides(j)<sp/>*<sp/>coordinates_[j];</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer_<sp/>-=<sp/>view_-&gt;strides(j);</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--coordinates_[j];</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--j;</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/>testInvariant();</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="4432" refid="classandres_1_1Iterator_1a3f16288a75cc46f0f597da32d4af4cc8" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1aa25f91324c261608591f0d072afa8ac2" kindref="member">Iterator&lt;T, isConst, A&gt;::operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/>copy<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/>++(*this);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="4444" refid="classandres_1_1Iterator_1acfde3bc208623f9105a8ea0d5103aec3" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a2e7a4ffd36e64600b7a785dd5fcf9920" kindref="member">Iterator&lt;T, isConst, A&gt;::operator--</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>(view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>index_<sp/>&gt;<sp/>0));</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/>copy<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>--(*this);</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="4454"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator+</highlight></codeline>
<codeline lineno="4455" refid="classandres_1_1Iterator_1ac11e0481263bcc5b0d9b6d85d5d35cee" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>&amp;<sp/>x</highlight></codeline>
<codeline lineno="4457"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>+=<sp/>x;</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="4463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref></highlight></codeline>
<codeline lineno="4467"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator-</highlight></codeline>
<codeline lineno="4468" refid="classandres_1_1Iterator_1a397e725017a0c85f3625c4cca9c78f19" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>&amp;<sp/>x</highlight></codeline>
<codeline lineno="4470"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConst, A&gt;</ref><sp/>tmp<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>-=<sp/>x;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"></highlight></codeline>
<codeline lineno="4478"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">Iterator&lt;T, isConst, A&gt;::difference_type</ref></highlight></codeline>
<codeline lineno="4481"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator-</highlight></codeline>
<codeline lineno="4482" refid="classandres_1_1Iterator_1a76bf815f78f5f151987ddabaa711d3c4" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4484"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>it.view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>(index_)-<ref refid="classandres_1_1Iterator_1a10f8053d87b6b597d9fe011f66a240ca" kindref="member">difference_type</ref>(it.index_);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator==</highlight></codeline>
<codeline lineno="4495" refid="classandres_1_1Iterator_1ad5ffd4771bc3865c3d97943a0eddf96c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4497"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(it.view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)it.view_<sp/>==<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)view_));</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>==<sp/>it.index_;</highlight></codeline>
<codeline lineno="4502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator!=</highlight></codeline>
<codeline lineno="4508" refid="classandres_1_1Iterator_1ad0006aa63862a839230521e571642b9e" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4510"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>it.view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;const<sp/>void*&gt;(it.view_)<sp/>==<sp/>static_cast&lt;const<sp/>void*&gt;(view_));</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>!=<sp/>it.index_;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator&lt;</highlight></codeline>
<codeline lineno="4523" refid="classandres_1_1Iterator_1ac8c047ae76cffe6f91e0d45bea1fb94c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4525"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(it.view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>it.view_<sp/>==<sp/>view_));</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(index_<sp/>&lt;<sp/>it.index_);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator&gt;</highlight></codeline>
<codeline lineno="4536" refid="classandres_1_1Iterator_1a0ddb701b0ac1b721eee2348e016050fc" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4538"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(it.view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>it.view_<sp/>==<sp/>view_));</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(index_<sp/>&gt;<sp/>it.index_);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator&lt;=</highlight></codeline>
<codeline lineno="4549" refid="classandres_1_1Iterator_1a303fe7634819191eff8e2bb676083f9c" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4551"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(it.view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>it.view_<sp/>==<sp/>view_));</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(index_<sp/>&lt;=<sp/>it.index_);</highlight></codeline>
<codeline lineno="4556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"></highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstLocal&gt;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal">Iterator&lt;T,<sp/>isConst,<sp/>A&gt;::operator&gt;=</highlight></codeline>
<codeline lineno="4562" refid="classandres_1_1Iterator_1a8ab389dea14eeceb8bbee9a9d7d6a04a" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1Iterator" kindref="compound">Iterator&lt;T, isConstLocal, A&gt;</ref>&amp;<sp/>it</highlight></codeline>
<codeline lineno="4564"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>(it.view_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>it.view_<sp/>==<sp/>view_));</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(index_<sp/>&gt;=<sp/>it.index_);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577" refid="classandres_1_1Iterator_1aa00e98e48b060ec6de7593d473643ef7" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1aa00e98e48b060ec6de7593d473643ef7" kindref="member">Iterator&lt;T, isConst, A&gt;::hasMore</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4578"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_<sp/>&lt;<sp/>view_-&gt;size();</highlight></codeline>
<codeline lineno="4581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="4589" refid="classandres_1_1Iterator_1a2f5bd43ca080a25450423d5f874b3cdd" refkind="member"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a2f5bd43ca080a25450423d5f874b3cdd" kindref="member">Iterator&lt;T, isConst, A&gt;::index</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4590"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_;</highlight></codeline>
<codeline lineno="4592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>CoordinateIterator&gt;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><ref refid="classandres_1_1Iterator_1a6b0076e5b74f548e820cbfa6fb7681d7" kindref="member">Iterator&lt;T, isConst, A&gt;::coordinate</ref></highlight></codeline>
<codeline lineno="4603" refid="classandres_1_1Iterator_1a6b0076e5b74f548e820cbfa6fb7681d7" refkind="member"><highlight class="normal">(</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/>CoordinateIterator<sp/>it</highlight></codeline>
<codeline lineno="4605"><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_DEBUG<sp/>||<sp/>view_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/>marray_detail::Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>index_<sp/>&lt;<sp/>view_-&gt;size());</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(view_-&gt;isSimple())<sp/>{</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view_-&gt;indexToCoordinates(index_,<sp/>it);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;coordinates_.size();<sp/>++j,<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*it<sp/>=<sp/>coordinates_[j];</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>expression<sp/>templates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4625" refid="classandres_1_1ViewExpression_1a0b26c0956d2167c6c07ba2841066d450" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E<sp/><ref refid="classandres_1_1ViewExpression_1a0b26c0956d2167c6c07ba2841066d450" kindref="member">expression_type</ref>;</highlight></codeline>
<codeline lineno="4626" refid="classandres_1_1ViewExpression_1aad128b08207a68e92797aa2c7342feff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/><ref refid="classandres_1_1ViewExpression_1aad128b08207a68e92797aa2c7342feff" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight></codeline>
<codeline lineno="4628" refid="classandres_1_1ViewExpression_1a93b140494015c1b01455083aaad98d15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1ViewExpression_1a93b140494015c1b01455083aaad98d15" kindref="member">dimension</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4629"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).dimension();<sp/>}</highlight></codeline>
<codeline lineno="4630" refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1ViewExpression_1abc822f7af9444b7f59a8fd08d84cefb8" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4631"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).size();<sp/>}</highlight></codeline>
<codeline lineno="4632" refid="classandres_1_1ViewExpression_1a1cf03409893f5b7386a9458e9c8e1d9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/><ref refid="classandres_1_1ViewExpression_1a1cf03409893f5b7386a9458e9c8e1d9b" kindref="member">shape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4633"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).shape(j);<sp/>}</highlight></codeline>
<codeline lineno="4634" refid="classandres_1_1ViewExpression_1a84e6e19c4523d47747e5c21c261c80c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1ViewExpression_1a84e6e19c4523d47747e5c21c261c80c7" kindref="member">shapeBegin</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4635"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).shapeBegin();<sp/>}</highlight></codeline>
<codeline lineno="4636" refid="classandres_1_1ViewExpression_1aba3a1565372cdf4c99ca76c860e087aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/><ref refid="classandres_1_1ViewExpression_1aba3a1565372cdf4c99ca76c860e087aa" kindref="member">shapeEnd</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4637"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).shapeEnd();<sp/>}</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4639" refid="classandres_1_1ViewExpression_1ac06ec98e7837bc72c87ef5c9881ad19f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression_1ac06ec98e7837bc72c87ef5c9881ad19f" kindref="member">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View" kindref="compound">View&lt;Tv, isConst, A&gt;</ref>&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4640"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).overlaps(v);<sp/>}</highlight></codeline>
<codeline lineno="4641" refid="classandres_1_1ViewExpression_1a7936210ed21025b77e35c9a6f4f40619" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/><ref refid="classandres_1_1ViewExpression_1a7936210ed21025b77e35c9a6f4f40619" kindref="member">coordinateOrder</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4642"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4643" refid="classandres_1_1ViewExpression_1ad4b49fe44d502e48c0286c01d23d28d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression_1ad4b49fe44d502e48c0286c01d23d28d8" kindref="member">isSimple</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4644"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).isSimple();<sp/>}</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor&gt;</highlight></codeline>
<codeline lineno="4646" refid="classandres_1_1ViewExpression_1a40e69cbc4391f7acf38f2d2e827c7d9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1a40e69cbc4391f7acf38f2d2e827c7d9c" kindref="member">operator()</ref>(Accessor<sp/>it)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4647"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)(it);<sp/>}</highlight></codeline>
<codeline lineno="4648" refid="classandres_1_1ViewExpression_1a6cc016c4b3fc5c7b635d3fe4ad1a0c4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1a6cc016c4b3fc5c7b635d3fe4ad1a0c4c" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4649"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)(c0,<sp/>c1);<sp/>}</highlight></codeline>
<codeline lineno="4650" refid="classandres_1_1ViewExpression_1acee883b8b06c7f739a1d584efe2d183f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1acee883b8b06c7f739a1d584efe2d183f" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4651"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)(c0,<sp/>c1,<sp/>c2);<sp/>}</highlight></codeline>
<codeline lineno="4652" refid="classandres_1_1ViewExpression_1ae098a083ea9e3e07f3bb297f8d792908" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1ae098a083ea9e3e07f3bb297f8d792908" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4653"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)(c0,<sp/>c1,<sp/>c2,<sp/>c3);<sp/>}</highlight></codeline>
<codeline lineno="4654" refid="classandres_1_1ViewExpression_1afed1b53168bfa8af74a8806cdc0511be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1afed1b53168bfa8af74a8806cdc0511be" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4655"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4);<sp/>}</highlight></codeline>
<codeline lineno="4656" refid="classandres_1_1ViewExpression_1a5623026765591cb13b9f09e207610b79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classandres_1_1ViewExpression_1a5623026765591cb13b9f09e207610b79" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4657"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)[offset];<sp/>}</highlight></codeline>
<codeline lineno="4658" refid="classandres_1_1ViewExpression_1a7e8ad61ca588af63869d01f8666b57e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>E&amp;()</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);<sp/>}</highlight></codeline>
<codeline lineno="4660" refid="classandres_1_1ViewExpression_1aaa41406565c736e06ec21dabf3f32378" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>E<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">E&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);<sp/>}</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"></highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionIterator<sp/>{</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression&lt;E, T&gt;</ref>&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expression_(expression),<sp/></highlight><highlight class="comment">//<sp/>cast!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_(&amp;expression_(0)),</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_(0)</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>incrementCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>offset_<sp/>+=<sp/>expression_.strides(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>offset_<sp/>-=<sp/>expression_.strides(coordinateIndex)</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(expression_.shape(coordinateIndex)<sp/>-<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4678"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="comment">//<sp/>return<sp/>expression_[offset_];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>would<sp/>require<sp/>making<sp/>this<sp/>nested<sp/>class<sp/>a<sp/>friend<sp/>of<sp/>View</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>in<sp/>turn<sp/>would<sp/>require<sp/>a<sp/>forward<sp/>declaration<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>class.<sp/>work<sp/>around:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[offset_];<sp/>}</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>expression_;</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>data_;</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset_;</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\endcond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>UnaryFunctor&gt;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnaryViewExpression</highlight></codeline>
<codeline lineno="4694"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ViewExpression&lt;UnaryViewExpression&lt;E,<sp/>T,<sp/>UnaryFunctor&gt;,<sp/>T&gt;</highlight></codeline>
<codeline lineno="4695"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E<sp/>expression_type;</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryViewExpression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,<sp/>T&gt;&amp;<sp/>e)</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>e_(e),<sp/></highlight><highlight class="comment">//<sp/>cast!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unaryFunctor_(UnaryFunctor())</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4705"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.dimension();<sp/>}</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4707"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.size();<sp/>}</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4709"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shape(j);<sp/>}</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4711"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeBegin();<sp/>}</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4713"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeEnd();<sp/>}</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overlaps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;Tv,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4716"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.overlaps(v);<sp/>}</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4718"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4720"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.isSimple();<sp/>}</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor&gt;</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator()(Accessor<sp/>it)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4723"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_(it));<sp/>}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4725"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_(c0,<sp/>c1));<sp/>}</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4727"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_(c0,<sp/>c1,<sp/>c2));<sp/>}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4729"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_(c0,<sp/>c1,<sp/>c2,<sp/>c3));<sp/>}</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4731"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4));<sp/>}</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4733"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(e_[offset]);<sp/>}</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionIterator<sp/>{</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UnaryViewExpression&lt;E,<sp/>T,<sp/>UnaryFunctor&gt;&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>unaryFunctor_(expression.unaryFunctor_),</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_(expression.e_)</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>incrementCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.incrementCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.resetCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4746"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unaryFunctor_(*iterator_);<sp/>}</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>unaryFunctor_;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::ExpressionIterator<sp/>iterator_;</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>e_;</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/>UnaryFunctor<sp/>unaryFunctor_;</highlight></codeline>
<codeline lineno="4755"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpression</highlight></codeline>
<codeline lineno="4759"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type&gt;</highlight></codeline>
<codeline lineno="4761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E1<sp/>expression_type_1;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E2<sp/>expression_type_2;</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T1<sp/>value_type_1;</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T2<sp/>value_type_2;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T1,<sp/>T2&gt;::type<sp/>value_type;</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BinaryFunctor<sp/>functor_type;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type&gt;<sp/>base;</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryViewExpression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E1,<sp/>T1&gt;&amp;<sp/>e1,</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E2,<sp/>T2&gt;&amp;<sp/>e2)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>e1_(e1),<sp/>e2_(e2),<sp/></highlight><highlight class="comment">//<sp/>cast!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binaryFunctor_(BinaryFunctor())</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_DEBUG)<sp/>{</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(e1_.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>e2_.size()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(e1_.dimension()<sp/>==<sp/>e2_.dimension());</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;e1_.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marray_detail::Assert(e1_.shape(j)<sp/>==<sp/>e2_.shape(j));</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4786"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.dimension()<sp/>&lt;<sp/>e2_.dimension()<sp/>?<sp/>e2_.dimension()<sp/>:<sp/>e1_.dimension();<sp/>}</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4788"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.size()<sp/>&lt;<sp/>e2_.size()<sp/>?<sp/>e2_.size()<sp/>:<sp/>e1_.size();<sp/>}</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4790"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.dimension()<sp/>&lt;<sp/>e2_.dimension()<sp/>?<sp/>e2_.shape(j)<sp/>:<sp/>e1_.shape(j);<sp/>}</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4792"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.dimension()<sp/>&lt;<sp/>e2_.dimension()<sp/>?<sp/>e2_.shapeBegin()<sp/>:<sp/>e1_.shapeBegin();<sp/>}</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4794"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.dimension()<sp/>&lt;<sp/>e2_.dimension()<sp/>?<sp/>e2_.shapeEnd()<sp/>:<sp/>e1_.shapeEnd();<sp/>}</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overlaps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;Tv,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4797"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.overlaps(v)<sp/>||<sp/>e2_.overlaps(v);<sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4799"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4801"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e1_.isSimple()<sp/>&amp;&amp;<sp/>e2_.isSimple()</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>e1_.coordinateOrder()<sp/>==<sp/>e2_.coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor&gt;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(Accessor<sp/>it)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4805"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_(it),<sp/>e2_(it));<sp/>}</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4807"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_(c0,<sp/>c1),<sp/>e2_(c0,<sp/>c1));<sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4809"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_(c0,<sp/>c1,<sp/>c2),<sp/>e2_(c0,<sp/>c1,<sp/>c2));<sp/>}</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4811"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_(c0,<sp/>c1,<sp/>c2,<sp/>c3),<sp/>e2_(c0,<sp/>c1,<sp/>c2,<sp/>c3));<sp/>}</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4813"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4),<sp/>e2_(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4));<sp/>}</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4815"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e1_[offset],<sp/>e2_[offset]);<sp/>}</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionIterator<sp/>{</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpression&lt;E1,<sp/>T1,<sp/>E2,<sp/>T2,<sp/>BinaryFunctor&gt;&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>binaryFunctor_(expression.binaryFunctor_),</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator1_(expression.e1_),</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator2_(expression.e2_)</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>incrementCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>iterator1_.incrementCoordinate(coordinateIndex);</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator2_.incrementCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/>iterator1_.resetCoordinate(coordinateIndex);</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator2_.resetCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/><ref refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4831"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(*iterator1_,<sp/>*iterator2_);<sp/>}</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1::ExpressionIterator<sp/>iterator1_;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2::ExpressionIterator<sp/>iterator2_;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expression_type_1&amp;<sp/>e1_;</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expression_type_2&amp;<sp/>e2_;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarFirst</highlight></codeline>
<codeline lineno="4846"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpressionScalarFirst&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>marray_detail::PromoteType&lt;T,<sp/>S&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E<sp/>expression_type;</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type_1;</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>S<sp/>scalar_type;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T,<sp/>S&gt;::type<sp/>value_type;</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BinaryFunctor<sp/>functor_type;</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpressionScalarFirst&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type&gt;<sp/>base;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryViewExpressionScalarFirst(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,<sp/>T&gt;&amp;<sp/>e,</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_type&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>e_(e),<sp/></highlight><highlight class="comment">//<sp/>cast!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_(scalar),<sp/>binaryFunctor_(BinaryFunctor())</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4863"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.dimension();<sp/>}</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4865"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.size();<sp/>}</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4867"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shape(j);<sp/>}</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4869"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeBegin();<sp/>}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4871"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeEnd();<sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overlaps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;Tv,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4874"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.overlaps(v);<sp/>}</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4876"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4878"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.isSimple();<sp/>}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor&gt;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(Accessor<sp/>it)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4881"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_(it));<sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4883"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_(c0,<sp/>c1));<sp/>}</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4885"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_(c0,<sp/>c1,<sp/>c2));<sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4887"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_(c0,<sp/>c1,<sp/>c2,<sp/>c3));<sp/>}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4889"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4));<sp/>}</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4891"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>e_[offset]);<sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionIterator<sp/>{</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpressionScalarFirst&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>binaryFunctor_(expression.binaryFunctor_),</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_(expression.scalar_),</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_(expression.e_)</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>incrementCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.incrementCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.resetCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4905"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(scalar_,<sp/>*iterator_);<sp/>}</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryViewExpressionScalarFirst&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;::scalar_type&amp;<sp/>scalar_;</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::ExpressionIterator<sp/>iterator_;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"></highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expression_type&amp;<sp/>e_;</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_type<sp/>scalar_;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4916"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>BinaryFunctor&gt;</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryViewExpressionScalarSecond</highlight></codeline>
<codeline lineno="4920"><highlight class="normal">:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpressionScalarSecond&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>marray_detail::PromoteType&lt;T,<sp/>S&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type_1;</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>E<sp/>expression_type;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>S<sp/>scalar_type;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>marray_detail::PromoteType&lt;T,<sp/>S&gt;::type<sp/>value_type;</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BinaryFunctor<sp/>functor_type;</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ViewExpression&lt;BinaryViewExpressionScalarSecond&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;,</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type&gt;<sp/>base;</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryViewExpressionScalarSecond(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,<sp/>T&gt;&amp;<sp/>e,</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_type&amp;<sp/>scalar)</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>e_(e),<sp/></highlight><highlight class="comment">//<sp/>cast!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_(scalar),<sp/>binaryFunctor_(BinaryFunctor())</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4937"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.dimension();<sp/>}</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4939"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.size();<sp/>}</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4941"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shape(j);<sp/>}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4943"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeBegin();<sp/>}</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4945"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.shapeEnd();<sp/>}</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Tv,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>overlaps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;Tv,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4948"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.overlaps(v);<sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4950"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.coordinateOrder();<sp/>}</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4952"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e_.isSimple();<sp/>}</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Accessor&gt;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(Accessor<sp/>it)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4955"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_(it),<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4957"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_(c0,<sp/>c1),<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4959"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_(c0,<sp/>c1,<sp/>c2),<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4961"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_(c0,<sp/>c1,<sp/>c2,<sp/>c3),<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>c4)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4963"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_(c0,<sp/>c1,<sp/>c2,<sp/>c3,<sp/>c4),<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type<sp/>operator[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4965"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(e_[offset],<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionIterator<sp/>{</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionIterator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BinaryViewExpressionScalarSecond&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;&amp;<sp/>expression)</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>binaryFunctor_(expression.binaryFunctor_),</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_(expression.scalar_),</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator_(expression.e_)</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>incrementCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.incrementCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetCoordinate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>coordinateIndex)</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>iterator_.resetCoordinate(coordinateIndex);<sp/>}</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/><ref refid="namespaceandres_1a37613f54e69908e108526ff99ad8b4ab" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="4979"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binaryFunctor_(*iterator_,<sp/>scalar_);<sp/>}</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BinaryViewExpressionScalarSecond&lt;E,<sp/>T,<sp/>S,<sp/>BinaryFunctor&gt;::scalar_type&amp;<sp/>scalar_;</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::ExpressionIterator<sp/>iterator_;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expression_type&amp;<sp/>e_;</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_type<sp/>scalar_;</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/>BinaryFunctor<sp/>binaryFunctor_;</highlight></codeline>
<codeline lineno="4990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\endcond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>of<sp/>marray_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\cond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">marray_detail<sp/>{</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Geometry</highlight></codeline>
<codeline lineno="5000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A::template<sp/>rebind&lt;std::size_t&gt;::other<sp/>allocator_type;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/>Geometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/>allocator_type());</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>Geometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>=<sp/>0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/>allocator_type());</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Geometry(ShapeIterator,<sp/>ShapeIterator,</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/>allocator_type());</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Geometry(ShapeIterator,<sp/>ShapeIterator,<sp/>StrideIterator,</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>=<sp/>defaultOrder,</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>allocator_type&amp;<sp/>=<sp/>allocator_type());</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/>Geometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;&amp;);</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/>~Geometry();</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>Geometry&lt;A&gt;&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;&amp;);</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension);</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>shapeStrides(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>shapeStrides(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>strides(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>strides(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t);</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeBegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shapeBegin();</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeEnd()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shapeEnd();</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeStridesBegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shapeStridesBegin();</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>shapeStridesEnd()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shapeStridesEnd();</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>stridesBegin()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>stridesBegin();</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*<sp/>stridesEnd()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>stridesEnd();</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t&amp;<sp/>size();</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder();</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>isSimple();</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator_type<sp/>allocator_;</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shape_;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>shapeStrides_;</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intended<sp/>redundancy:<sp/>shapeStrides_<sp/>could<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computed<sp/>from<sp/>shape_<sp/>and<sp/>coordinateOrder_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t*<sp/>strides_;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>dimension_;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>size_;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intended<sp/>redundancy:<sp/>size_<sp/>could<sp/>be<sp/>computed<sp/>from<sp/>shape_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref><sp/>coordinateOrder_;</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple_;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>simple<sp/>array:<sp/>an<sp/>array<sp/>which<sp/>is<sp/>unstrided<sp/>(i.e.<sp/>the<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equal<sp/>the<sp/>shape<sp/>strides),<sp/>cf.<sp/>the<sp/>function<sp/>testInvariant<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>View<sp/>for<sp/>the<sp/>formal<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal">Geometry&lt;A&gt;::Geometry</highlight></codeline>
<codeline lineno="5070"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;::allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="5072"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5073"><highlight class="normal">:<sp/>allocator_(allocator),</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/>shape_(0),</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/>shapeStrides_(0),</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>strides_(0),</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/>dimension_(0),</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/>size_(0),</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>coordinateOrder_(defaultOrder),</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/>isSimple_(true)</highlight></codeline>
<codeline lineno="5081"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5086"><highlight class="normal">Geometry&lt;A&gt;::Geometry</highlight></codeline>
<codeline lineno="5087"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;&amp;<sp/>g</highlight></codeline>
<codeline lineno="5089"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5090"><highlight class="normal">:<sp/>allocator_(g.allocator_),</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/>shape_(g.dimension_==0<sp/>?<sp/>0<sp/>:<sp/>allocator_.allocate(g.dimension_*3)),</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/>shapeStrides_(shape_<sp/>+<sp/>g.dimension_),</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/>strides_(shapeStrides_<sp/>+<sp/>g.dimension_),</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/>dimension_(g.dimension_),</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>size_(g.size_),</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/>coordinateOrder_(g.coordinateOrder_),</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/>isSimple_(g.isSimple_)</highlight></codeline>
<codeline lineno="5098"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5100"><highlight class="comment"><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;dimension_;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_[j]<sp/>=<sp/>g.shape_[j];</highlight></codeline>
<codeline lineno="5102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStrides_[j]<sp/>=<sp/>g.shapeStrides_[j];</highlight></codeline>
<codeline lineno="5103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_[j]<sp/>=<sp/>g.strides_[j];</highlight></codeline>
<codeline lineno="5104"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5105"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(shape_,<sp/>g.shape_,<sp/>(dimension_*3)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::size_t));</highlight></codeline>
<codeline lineno="5107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal">Geometry&lt;A&gt;::Geometry</highlight></codeline>
<codeline lineno="5112"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension,</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>order,</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size,</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSimple,</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;::allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="5118"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5119"><highlight class="normal">:<sp/>allocator_(allocator),</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/>shape_(allocator_.allocate(dimension*3)),</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/>shapeStrides_(shape_+dimension),</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/>strides_(shapeStrides_+dimension),</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/>dimension_(dimension),</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/>size_(size),</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/>coordinateOrder_(order),</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/>isSimple_(isSimple)</highlight></codeline>
<codeline lineno="5127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator&gt;</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal">Geometry&lt;A&gt;::Geometry</highlight></codeline>
<codeline lineno="5134"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>externalCoordinateOrder,</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;::allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="5140"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5141"><highlight class="normal">:<sp/>allocator_(allocator),</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/>shape_(allocator_.allocate(std::distance(begin,<sp/>end)<sp/>*<sp/>3)),</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>shapeStrides_(shape_<sp/>+<sp/>std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/>strides_(shapeStrides_<sp/>+<sp/>std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/>dimension_(std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/>size_(1),</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/>coordinateOrder_(internalCoordinateOrder),</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/>isSimple_(true)</highlight></codeline>
<codeline lineno="5149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension_<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>array<sp/>is<sp/>not<sp/>a<sp/>scalar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSimple_<sp/>=<sp/>(externalCoordinateOrder<sp/>==<sp/>internalCoordinateOrder);</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j,<sp/>++begin)<sp/>{</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>s<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape(j)<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size()<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stridesFromShape(shapeBegin(),<sp/>shapeEnd(),<sp/>stridesBegin(),</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>externalCoordinateOrder);</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stridesFromShape(shapeBegin(),<sp/>shapeEnd(),<sp/>shapeStridesBegin(),</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder);</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">eIterator&gt;</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal">Geometry&lt;A&gt;::Geometry</highlight></codeline>
<codeline lineno="5168"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>StrideIterator<sp/>it,</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>internalCoordinateOrder,</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;::allocator_type&amp;<sp/>allocator</highlight></codeline>
<codeline lineno="5174"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5175"><highlight class="normal">:<sp/>allocator_(allocator),</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/>shape_(allocator_.allocate(std::distance(begin,<sp/>end)<sp/>*<sp/>3)),</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/>shapeStrides_(shape_<sp/>+<sp/>std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/>strides_(shapeStrides_<sp/>+<sp/>std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/>dimension_(std::distance(begin,<sp/>end)),</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/>size_(1),</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/>coordinateOrder_(internalCoordinateOrder),</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>isSimple_(true)</highlight></codeline>
<codeline lineno="5183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j,<sp/>++begin,<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>s<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin);</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape(j)<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size()<sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides(j)<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stridesFromShape(shapeBegin(),<sp/>shapeEnd(),<sp/>shapeStridesBegin(),</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internalCoordinateOrder);</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updateSimplicity();</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal">Geometry&lt;A&gt;::~Geometry()</highlight></codeline>
<codeline lineno="5200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/>allocator_.deallocate(shape_,<sp/>dimension_*3);</highlight></codeline>
<codeline lineno="5202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;&amp;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal">Geometry&lt;A&gt;::operator=</highlight></codeline>
<codeline lineno="5207"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Geometry&lt;A&gt;&amp;<sp/>g</highlight></codeline>
<codeline lineno="5209"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(&amp;g<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(g.dimension_<sp/>!=<sp/>dimension_)<sp/>{</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_.deallocate(shape_,<sp/>dimension_*3);</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_<sp/>=<sp/>g.dimension_;</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/>allocator_.allocate(dimension_*3);</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStrides_<sp/>=<sp/>shape_+dimension_;</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_<sp/>=<sp/>shapeStrides_+dimension_;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_<sp/>=<sp/>g.dimension_;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(std::size_t<sp/>j=0;<sp/>j&lt;dimension_;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_[j]<sp/>=<sp/>g.shape_[j];</highlight></codeline>
<codeline lineno="5223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStrides_[j]<sp/>=<sp/>g.shapeStrides_[j];</highlight></codeline>
<codeline lineno="5224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_[j]<sp/>=<sp/>g.strides_[j];</highlight></codeline>
<codeline lineno="5225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(shape_,<sp/>g.shape_,<sp/>(dimension_*3)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::size_t));</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>g.size_;</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinateOrder_<sp/>=<sp/>g.coordinateOrder_;</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSimple_<sp/>=<sp/>g.isSimple_;</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal">Geometry&lt;A&gt;::resize</highlight></codeline>
<codeline lineno="5238"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>dimension</highlight></codeline>
<codeline lineno="5240"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dimension<sp/>!=<sp/>dimension_)<sp/>{</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t*<sp/>newShape<sp/>=<sp/>allocator_.allocate(dimension*3);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t*<sp/>newShapeStrides<sp/>=<sp/>newShape<sp/>+<sp/>dimension;</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t*<sp/>newStrides<sp/>=<sp/>newShapeStrides<sp/>+<sp/>dimension;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;(<sp/>(dimension<sp/>&lt;<sp/>dimension_)<sp/>?<sp/>dimension<sp/>:<sp/>dimension_);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>existing<sp/>entries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newShape[j]<sp/>=<sp/>shape(j);</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newShapeStrides[j]<sp/>=<sp/>shapeStrides(j);</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStrides[j]<sp/>=<sp/>strides(j);</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_.deallocate(shape_,<sp/>dimension_*3);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape_<sp/>=<sp/>newShape;</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeStrides_<sp/>=<sp/>newShapeStrides;</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strides_<sp/>=<sp/>newStrides;</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimension_<sp/>=<sp/>dimension;</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="5262"><highlight class="normal">Geometry&lt;A&gt;::dimension()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5263"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dimension_;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="5269"><highlight class="normal">Geometry&lt;A&gt;::shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5270"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_[j];</highlight></codeline>
<codeline lineno="5273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"></highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t&amp;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal">Geometry&lt;A&gt;::shape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j)</highlight></codeline>
<codeline lineno="5278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_[j];</highlight></codeline>
<codeline lineno="5281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="5285"><highlight class="normal">Geometry&lt;A&gt;::shapeStrides</highlight></codeline>
<codeline lineno="5286"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j</highlight></codeline>
<codeline lineno="5288"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5289"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_[j];</highlight></codeline>
<codeline lineno="5292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t&amp;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal">Geometry&lt;A&gt;::shapeStrides</highlight></codeline>
<codeline lineno="5297"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j</highlight></codeline>
<codeline lineno="5299"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_[j];</highlight></codeline>
<codeline lineno="5303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="5307"><highlight class="normal">Geometry&lt;A&gt;::strides</highlight></codeline>
<codeline lineno="5308"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j</highlight></codeline>
<codeline lineno="5310"><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5311"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_[j];</highlight></codeline>
<codeline lineno="5314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t&amp;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal">Geometry&lt;A&gt;::strides</highlight></codeline>
<codeline lineno="5319"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>j</highlight></codeline>
<codeline lineno="5321"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>j&lt;dimension_);</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_[j];</highlight></codeline>
<codeline lineno="5325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5329"><highlight class="normal">Geometry&lt;A&gt;::shapeBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5330"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5336"><highlight class="normal">Geometry&lt;A&gt;::shapeBegin()</highlight></codeline>
<codeline lineno="5337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5343"><highlight class="normal">Geometry&lt;A&gt;::shapeEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5344"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"></highlight></codeline>
<codeline lineno="5348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5350"><highlight class="normal">Geometry&lt;A&gt;::shapeEnd()</highlight></codeline>
<codeline lineno="5351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"></highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5357"><highlight class="normal">Geometry&lt;A&gt;::shapeStridesBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5358"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5364"><highlight class="normal">Geometry&lt;A&gt;::shapeStridesBegin()</highlight></codeline>
<codeline lineno="5365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_;</highlight></codeline>
<codeline lineno="5367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5371"><highlight class="normal">Geometry&lt;A&gt;::shapeStridesEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5372"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5378"><highlight class="normal">Geometry&lt;A&gt;::shapeStridesEnd()</highlight></codeline>
<codeline lineno="5379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shapeStrides_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"></highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5385"><highlight class="normal">Geometry&lt;A&gt;::stridesBegin()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5386"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5392"><highlight class="normal">Geometry&lt;A&gt;::stridesBegin()</highlight></codeline>
<codeline lineno="5393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_;</highlight></codeline>
<codeline lineno="5395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5399"><highlight class="normal">Geometry&lt;A&gt;::stridesEnd()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5400"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t*</highlight></codeline>
<codeline lineno="5406"><highlight class="normal">Geometry&lt;A&gt;::stridesEnd()</highlight></codeline>
<codeline lineno="5407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strides_<sp/>+<sp/>dimension_;</highlight></codeline>
<codeline lineno="5409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t</highlight></codeline>
<codeline lineno="5413"><highlight class="normal">Geometry&lt;A&gt;::size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5414"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t&amp;</highlight></codeline>
<codeline lineno="5420"><highlight class="normal">Geometry&lt;A&gt;::size()</highlight></codeline>
<codeline lineno="5421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="5423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"></highlight></codeline>
<codeline lineno="5425"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal">Geometry&lt;A&gt;::coordinateOrder()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5428"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coordinateOrder_;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"></highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;</highlight></codeline>
<codeline lineno="5434"><highlight class="normal">Geometry&lt;A&gt;::coordinateOrder()</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coordinateOrder_;</highlight></codeline>
<codeline lineno="5437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal">Geometry&lt;A&gt;::isSimple()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="5442"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isSimple_;</highlight></codeline>
<codeline lineno="5444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"></highlight></codeline>
<codeline lineno="5446"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal">Geometry&lt;A&gt;::isSimple()</highlight></codeline>
<codeline lineno="5449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isSimple_;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5455"><highlight class="normal">Geometry&lt;A&gt;::updateSimplicity()</highlight></codeline>
<codeline lineno="5456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shapeStrides(j)<sp/>!=<sp/>strides(j))<sp/>{</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isSimple_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/>isSimple_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>0-dimensional<sp/>geometry<sp/>is<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ShapeIterator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Str</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">esIterator&gt;</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal">stridesFromShape</highlight></codeline>
<codeline lineno="5470"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>begin,</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>end,</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/>StridesIterator<sp/>strideBegin,</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref>&amp;<sp/>coordinateOrder</highlight></codeline>
<codeline lineno="5475"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/>std::distance(begin,<sp/>end)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>dimension<sp/>=<sp/>std::distance(begin,<sp/>end);</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/>ShapeIterator<sp/>shapeIt;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/>StridesIterator<sp/>strideIt;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinateOrder<sp/>==<sp/><ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306ba88e74e8570fc8b1bee29f708f391fe69" kindref="member">FirstMajorOrder</ref>)<sp/>{</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeIt<sp/>=<sp/>begin<sp/>+<sp/>(dimension-1);</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strideIt<sp/>=<sp/>strideBegin<sp/>+<sp/>(dimension-1);</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*strideIt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;dimension;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>tmp<sp/>=<sp/>*strideIt;</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--strideIt;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*strideIt)<sp/>=<sp/>tmp<sp/>*<sp/>(*shapeIt);</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--shapeIt;</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shapeIt<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strideIt<sp/>=<sp/>strideBegin;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*strideIt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=1;<sp/>j&lt;dimension;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>tmp<sp/>=<sp/>*strideIt;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++strideIt;</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*strideIt)<sp/>=<sp/>tmp<sp/>*<sp/>(*shapeIt);</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++shapeIt;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"></highlight></codeline>
<codeline lineno="5505"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperUnary</highlight></codeline>
<codeline lineno="5507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.shape(N-1);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;N-1,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>data);</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>-=<sp/>v.shape(N-1)<sp/>*<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5521"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperUnary&lt;0,<sp/>Functor,<sp/>T,<sp/>A&gt;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*data);</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5536"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinaryScalar</highlight></codeline>
<codeline lineno="5540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>x,</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>data</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.shape(N-1);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;N-1,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>x,<sp/>f,<sp/>data);</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>-=<sp/>v.shape(N-1)<sp/>*<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5556"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinaryScalar&lt;0,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;</highlight></codeline>
<codeline lineno="5560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>x,</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>data</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*data,<sp/>x);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5571"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Functor,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T2,</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A1,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A2&gt;</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinary</highlight></codeline>
<codeline lineno="5576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A1&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T2,<sp/>isConst,<sp/>A2&gt;&amp;<sp/>w,</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>data1,</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2*<sp/>data2</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.shape(N-1);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;N-1,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A1,<sp/>A2&gt;::operate(</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>w,<sp/>f,<sp/>data1,<sp/>data2);</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data1<sp/>+=<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>+=<sp/>w.strides(N-1);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data1<sp/>-=<sp/>v.shape(N-1)<sp/>*<sp/>v.strides(N-1);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data2<sp/>-=<sp/>w.shape(N-1)<sp/>*<sp/>w.strides(N-1);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5595"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A2&gt;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OperateHelperBinary&lt;0,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A1,<sp/>A2&gt;</highlight></codeline>
<codeline lineno="5599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A1&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T2,<sp/>isConst,<sp/>A2&gt;&amp;<sp/>w,</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functor<sp/>f,</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>data1,</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2*<sp/>data2</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*data1,<sp/>*data2);</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"></highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ATo&gt;</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssignmentOperatorHelper&lt;false,<sp/>TFrom,<sp/>TTo,<sp/>AFrom,<sp/>ATo&gt;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>constant<sp/>to<sp/>mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here,<sp/>&apos;to&apos;<sp/>must<sp/>be<sp/>initialized<sp/>(which<sp/>is<sp/>asserted)<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>the<sp/>pointer<sp/>to.data_<sp/>to<sp/>mutable<sp/>data<sp/>would<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>initialized<sp/>with<sp/>the<sp/>pointer<sp/>from.data_<sp/>to<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>which<sp/>we<sp/>don&apos;t<sp/>do.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>execute</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;TFrom,<sp/>true,<sp/>AFrom&gt;&amp;<sp/>from,</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;TTo,<sp/>false,<sp/>ATo&gt;&amp;<sp/>to</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;TFrom,<sp/>true,<sp/>AFrom&gt;::const_iterator<sp/>FromIterator;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;TTo,<sp/>false,<sp/>ATo&gt;::iterator<sp/>ToIterator;</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(from.data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>from.dimension()<sp/>==<sp/>to.dimension());</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;from.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(from.shape(j)<sp/>==<sp/>to.shape(j));</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.overlaps(to))<sp/>{</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Marray&lt;TFrom,<sp/>AFrom&gt;<sp/>m<sp/>=<sp/>from;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute(m,<sp/>to);</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.coordinateOrder()<sp/>==<sp/>to.coordinateOrder()</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>from.isSimple()<sp/>&amp;&amp;<sp/>to.isSimple()</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>IsEqual&lt;TFrom,<sp/>TTo&gt;::type)<sp/>{</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(to.data_,<sp/>from.data_,<sp/>(from.size())*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TFrom));</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;1,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;2,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;3,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;4,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;5,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;6,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;7,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;8,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;9,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;10,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FromIterator<sp/>itFrom<sp/>=<sp/>from.begin();</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToIterator<sp/>itTo<sp/>=<sp/>to.begin();</highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>itFrom.hasMore();<sp/>++itFrom,<sp/>++itTo)<sp/>{</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itTo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TTo</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*itFrom);</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>execute</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;TFrom,<sp/>false,<sp/>AFrom&gt;&amp;<sp/>from,</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;TTo,<sp/>false,<sp/>ATo&gt;&amp;<sp/>to</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;TFrom,<sp/>false,<sp/>AFrom&gt;::const_iterator<sp/>FromIterator;</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;TTo,<sp/>false,<sp/>ATo&gt;::iterator<sp/>ToIterator;</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(static_cast&lt;const<sp/>void*&gt;(&amp;from)<sp/>!=<sp/>static_cast&lt;const<sp/>void*&gt;(&amp;to))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>self-assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(to.data_<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>view<sp/>&apos;to&apos;<sp/>is<sp/>not<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>view<sp/>&apos;to&apos;<sp/>with<sp/>source<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TTo)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TFrom));</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to.data_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TTo*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from.data_));<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to.geometry_<sp/>=<sp/>from.geometry_;</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>view<sp/>&apos;to&apos;<sp/>is<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(from.data_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>from.dimension()<sp/>==<sp/>to.dimension());</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;from.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(from.shape(j)<sp/>==<sp/>to.shape(j));</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.overlaps(to))<sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Marray&lt;TFrom,<sp/>AFrom&gt;<sp/>m<sp/>=<sp/>from;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute(m,<sp/>to);</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.coordinateOrder()<sp/>==<sp/>to.coordinateOrder()</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>from.isSimple()<sp/>&amp;&amp;<sp/>to.isSimple()</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>IsEqual&lt;TFrom,<sp/>TTo&gt;::type)<sp/>{</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(to.data_,<sp/>from.data_,<sp/>(from.size())*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TFrom));</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;1,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;2,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;3,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;4,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;5,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;6,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;7,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;8,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;9,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(from.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;10,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;,<sp/>TTo,<sp/>TFrom,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>ATo,<sp/>AFrom&gt;::operate(to,<sp/>from,<sp/>Assign&lt;TTo,<sp/>TFrom&gt;(),<sp/>&amp;to(0),<sp/>&amp;from(0));</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FromIterator<sp/>itFrom<sp/>=<sp/>from.begin();</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ToIterator<sp/>itTo<sp/>=<sp/>to.begin();</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>itFrom.hasMore();<sp/>++itFrom,<sp/>++itTo)<sp/>{</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*itTo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TTo</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*itFrom);</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5740"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"></highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TTo,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AFrom,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ATo&gt;</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssignmentOperatorHelper&lt;true,<sp/>TFrom,<sp/>TTo,<sp/>AFrom,<sp/>ATo&gt;</highlight></codeline>
<codeline lineno="5744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConstFrom&gt;</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>execute</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;TFrom,<sp/>isConstFrom,<sp/>AFrom&gt;&amp;<sp/>from,</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>View&lt;TTo,<sp/>true,<sp/>ATo&gt;&amp;<sp/>to</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_ARG_TEST<sp/>||<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TFrom)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TTo));</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to.data_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">TTo*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(from.data_));<sp/></highlight><highlight class="comment">//<sp/>copy<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to.geometry_<sp/>=<sp/>from.geometry_;</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5758"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight></codeline>
<codeline lineno="5760"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AccessOperatorHelper&lt;true&gt;</highlight></codeline>
<codeline lineno="5762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>by<sp/>scalar<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/>execute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;<sp/>index)</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.testInvariant();</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>v.data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>v.dimension()<sp/>!=<sp/>0<sp/>||<sp/>index<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset;</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.indexToOffset(index,<sp/>offset);</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.data_[offset];</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5775"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"></highlight></codeline>
<codeline lineno="5777"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AccessOperatorHelper&lt;false&gt;</highlight></codeline>
<codeline lineno="5779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>access<sp/>by<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;::reference</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/>execute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T,<sp/>isConst,<sp/>A&gt;&amp;<sp/>v,<sp/>U<sp/>it)</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.testInvariant();</highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>v.data_<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>v.dimension()<sp/>!=<sp/>0<sp/>||<sp/>*it<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offset;</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.coordinatesToOffset(it,<sp/>offset);</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.data_[offset];</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5792"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"></highlight></codeline>
<codeline lineno="5794"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal">operate</highlight></codeline>
<codeline lineno="5797"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"><sp/><sp/><sp/><sp/>Functor<sp/>f</highlight></codeline>
<codeline lineno="5800"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/>&amp;v(0);</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(data[j]);</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;1,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;2,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;3,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;4,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;5,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;6,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;7,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;8,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;9,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperUnary&lt;10,<sp/>Functor,<sp/>T,<sp/>A&gt;::operate(v,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" kindref="member">View&lt;T, false, A&gt;::iterator</ref><sp/>it<sp/>=<sp/>v.begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*it);</highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"></highlight></codeline>
<codeline lineno="5835"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5837"><highlight class="normal">operate</highlight></codeline>
<codeline lineno="5838"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/>Functor<sp/>f</highlight></codeline>
<codeline lineno="5842"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>data<sp/>=<sp/>&amp;v(0);</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(data[j],<sp/>x);</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;1,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;2,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;3,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;4,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;5,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;6,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;7,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;8,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;9,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;10,<sp/>Functor,<sp/>T,<sp/>T,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" kindref="member">View&lt;T, false, A&gt;::iterator</ref><sp/>it<sp/>=<sp/>v.begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*it,<sp/>x);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight></codeline>
<codeline lineno="5877"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isConst,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5879"><highlight class="normal">operate</highlight></codeline>
<codeline lineno="5880"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>View&lt;T2,<sp/>isConst,<sp/>A&gt;&amp;<sp/>w,</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/>Functor<sp/>f</highlight></codeline>
<codeline lineno="5884"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_ARG_TEST)<sp/>{</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(v.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>w.size()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(w.dimension()<sp/>==<sp/>0<sp/>||<sp/>v.dimension()<sp/>==<sp/>w.dimension());</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(w.dimension()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(v.shape(j)<sp/>==<sp/>w.shape(j));</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(w.dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2<sp/>x<sp/>=<sp/>w(0);</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>dataV<sp/>=<sp/>&amp;v(0);</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(dataV[j],<sp/>x);</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;1,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;2,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;3,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;4,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;5,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;6,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;7,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;8,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;9,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinaryScalar&lt;10,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>A&gt;::operate(v,<sp/>x,<sp/>f,<sp/>&amp;v(0));</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T1,<sp/>false&gt;::iterator<sp/>it<sp/>=<sp/>v.begin();<sp/>it.hasMore();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*it,<sp/>x);</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.overlaps(w))<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Marray&lt;T2&gt;<sp/>m<sp/>=<sp/>w;<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operate(v,<sp/>m,<sp/>f);<sp/></highlight><highlight class="comment">//<sp/>recursive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.coordinateOrder()<sp/>==<sp/>w.coordinateOrder()</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>v.isSimple()<sp/>&amp;&amp;<sp/>w.isSimple())<sp/>{</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T1*<sp/>dataV<sp/>=<sp/>&amp;v(0);</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2*<sp/>dataW<sp/>=<sp/>&amp;w(0);</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(dataV[j],<sp/>dataW[j]);</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;1,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;2,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>3)</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;3,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;4,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>5)</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;5,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>6)</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;6,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;7,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;8,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>9)</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;9,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OperateHelperBinary&lt;10,<sp/>Functor,<sp/>T1,<sp/>T2,<sp/>isConst,<sp/>A,<sp/>A&gt;::operate(v,<sp/>w,<sp/>f,<sp/>&amp;v(0),<sp/>&amp;w(0));</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T1,<sp/>false&gt;::iterator<sp/>itV<sp/>=<sp/>v.begin();</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>View&lt;T2,<sp/>isConst&gt;::const_iterator<sp/>itW<sp/>=<sp/>w.begin();</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;<sp/>itV.hasMore();<sp/>++itV,<sp/>++itW)<sp/>{</highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>itW.hasMore());</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(*itV,<sp/>*itW);</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(MARRAY_NO_DEBUG<sp/>||<sp/>!itW.hasMore());</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Functor,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>E,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operate</highlight></codeline>
<codeline lineno="5978"><highlight class="normal">(</highlight></codeline>
<codeline lineno="5979"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;T1,<sp/>false,<sp/>A&gt;&amp;<sp/>v,</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ViewExpression&lt;E,<sp/>T2&gt;&amp;<sp/>expression,</highlight></codeline>
<codeline lineno="5981"><highlight class="normal"><sp/><sp/><sp/><sp/>Functor<sp/>f</highlight></codeline>
<codeline lineno="5982"><highlight class="normal">)</highlight></codeline>
<codeline lineno="5983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E&amp;<sp/>e<sp/>=<sp/>expression;<sp/></highlight><highlight class="comment">//<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!MARRAY_NO_DEBUG)<sp/>{</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(v.size()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>e.size()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(e.dimension()<sp/>==<sp/>v.dimension());</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(v.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>e.size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assert(v.shape(j)<sp/>==<sp/>e.shape(j));</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e.overlaps(v))<sp/>{</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Marray&lt;T1,<sp/>A&gt;<sp/>m(e);<sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operate(v,<sp/>m,<sp/>f);</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.dimension()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(v[0],<sp/>e[0]);</highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(v.isSimple()<sp/>&amp;&amp;<sp/>e.isSimple()</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>v.coordinateOrder()<sp/>==<sp/>e.coordinateOrder())<sp/>{</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(v[j],<sp/>e[j]);</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>unrolling<sp/>does<sp/>not<sp/>improve<sp/>performance<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E::ExpressionIterator<sp/>itE(e);</highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>offsetV<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>coordinate(v.dimension());</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>maxDimension<sp/>=<sp/>v.dimension()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(v[offsetV],<sp/>*itE);</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>j=0;<sp/>j&lt;v.dimension();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(coordinate[j]+1<sp/>==<sp/>v.shape(j))<sp/>{</highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j<sp/>==<sp/>maxDimension)<sp/>{</highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetV<sp/>-=<sp/>coordinate[j]<sp/>*<sp/>v.strides(j);</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itE.resetCoordinate(j);</highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coordinate[j]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetV<sp/>+=<sp/>v.strides(j);</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itE.incrementCoordinate(j);</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++coordinate[j];</highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6039"><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>marray_detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\endcond<sp/>suppress_doxygen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6042"><highlight class="normal"></highlight></codeline>
<codeline lineno="6043"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>andres</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6044"><highlight class="normal"></highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>#ifndef<sp/>NIFTY_ANDRES_MARRAY_HXX</highlight></codeline>
    </programlisting>
    <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx"/>
  </compounddef>
</doxygen>
