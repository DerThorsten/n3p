<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classandres_1_1ViewExpression" kind="class" language="C++" prot="public">
    <compoundname>andres::ViewExpression</compoundname>
    <includes refid="andres_2marray_8hxx" local="no">marray.hxx</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>E</declname>
        <defname>E</defname>
      </param>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classandres_1_1ViewExpression_1a0b26c0956d2167c6c07ba2841066d450" prot="public" static="no">
        <type>E</type>
        <definition>typedef E andres::ViewExpression&lt; E, T &gt;::expression_type</definition>
        <argsstring></argsstring>
        <name>expression_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4625" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1ViewExpression_1aad128b08207a68e92797aa2c7342feff" prot="public" static="no">
        <type>T</type>
        <definition>typedef T andres::ViewExpression&lt; E, T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4626" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4626" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a3ab6c2c6b98c8d353a9de82ce35a94c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::size_t</type>
        <definition>const std::size_t andres::ViewExpression&lt; E, T &gt;::dimension</definition>
        <argsstring>() const</argsstring>
        <name>dimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4628" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4628" bodyend="4629"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1aec0e6310accbc6774bc40e1e2c2a2c1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::size_t</type>
        <definition>const std::size_t andres::ViewExpression&lt; E, T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4630" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4630" bodyend="4631"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1ae81de4e50d07d2587951a4b23d5a5490" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::size_t</type>
        <definition>const std::size_t andres::ViewExpression&lt; E, T &gt;::shape</definition>
        <argsstring>(const std::size_t j) const</argsstring>
        <name>shape</name>
        <param>
          <type>const std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4632" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4632" bodyend="4633"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1aeeb7dd43b8dbbd5b16e9e79f9de5b31a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::size_t *</type>
        <definition>const std::size_t* andres::ViewExpression&lt; E, T &gt;::shapeBegin</definition>
        <argsstring>() const</argsstring>
        <name>shapeBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4634" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4634" bodyend="4635"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1aa379edb9a9c633b93391f5f696954a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::size_t *</type>
        <definition>const std::size_t* andres::ViewExpression&lt; E, T &gt;::shapeEnd</definition>
        <argsstring>() const</argsstring>
        <name>shapeEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4636" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4636" bodyend="4637"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a13f42c4594a3ab70270d0e09b2274fdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tv</type>
          </param>
          <param>
            <type>bool</type>
            <declname>isConst</declname>
            <defname>isConst</defname>
          </param>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool andres::ViewExpression&lt; E, T &gt;::overlaps</definition>
        <argsstring>(const View&lt; Tv, isConst, A &gt; &amp;v) const</argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="classandres_1_1View" kindref="compound">View</ref>&lt; Tv, isConst, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4639" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4639" bodyend="4640"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a67a24ee7d620da58cf7d83995b411149" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref> &amp;</type>
        <definition>const CoordinateOrder&amp; andres::ViewExpression&lt; E, T &gt;::coordinateOrder</definition>
        <argsstring>() const</argsstring>
        <name>coordinateOrder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4641" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4641" bodyend="4642"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1ad9d83c265ad470fca0403cab659dbf0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool andres::ViewExpression&lt; E, T &gt;::isSimple</definition>
        <argsstring>() const</argsstring>
        <name>isSimple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4643" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4643" bodyend="4644"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a48402109c0f13163f994ce447edccce7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Accessor</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator()</definition>
        <argsstring>(Accessor it) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Accessor</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4646" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4646" bodyend="4647"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a5df049ddbd24fadc19990fd7b7cee50e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator()</definition>
        <argsstring>(const std::size_t c0, const std::size_t c1) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4648" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4648" bodyend="4649"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a70a004e660132d2e014a7c9fba4e2f52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator()</definition>
        <argsstring>(const std::size_t c0, const std::size_t c1, const std::size_t c2) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4650" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4650" bodyend="4651"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1aefa796d758293ea9deee4307f7a3d3f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator()</definition>
        <argsstring>(const std::size_t c0, const std::size_t c1, const std::size_t c2, const std::size_t c3) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4652" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4652" bodyend="4653"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1a0aaf6280a5c2b03bc2787a16cc8bd782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator()</definition>
        <argsstring>(const std::size_t c0, const std::size_t c1, const std::size_t c2, const std::size_t c3, const std::size_t c4) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::size_t</type>
          <declname>c0</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c2</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c3</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>c4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4654" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4654" bodyend="4655"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1aaee8008ec3c5e1c7e4d3cf689215b1fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; andres::ViewExpression&lt; E, T &gt;::operator[]</definition>
        <argsstring>(const std::size_t offset) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4656" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4656" bodyend="4657"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1ac86ef8d95feb437c9b2707b6e7917f9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::ViewExpression&lt; E, T &gt;::operator E&amp;</definition>
        <argsstring>()</argsstring>
        <name>operator E &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4658" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4658" bodyend="4659"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1ViewExpression_1ad89af7848bb9e7c9ea2255e19d51aadb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::ViewExpression&lt; E, T &gt;::operator E const &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator E const &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="4660" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="4660" bodyend="4661"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Expression template for efficient arithmetic operations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="101" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="101" bodyend="-1"/>
    <listofallmembers>
      <member refid="classandres_1_1ViewExpression_1a67a24ee7d620da58cf7d83995b411149" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>coordinateOrder</name></member>
      <member refid="classandres_1_1ViewExpression_1a3ab6c2c6b98c8d353a9de82ce35a94c4" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>dimension</name></member>
      <member refid="classandres_1_1ViewExpression_1a0b26c0956d2167c6c07ba2841066d450" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>expression_type</name></member>
      <member refid="classandres_1_1ViewExpression_1ad9d83c265ad470fca0403cab659dbf0a" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>isSimple</name></member>
      <member refid="classandres_1_1ViewExpression_1ac86ef8d95feb437c9b2707b6e7917f9e" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator E &amp;</name></member>
      <member refid="classandres_1_1ViewExpression_1ad89af7848bb9e7c9ea2255e19d51aadb" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator E const &amp;</name></member>
      <member refid="classandres_1_1ViewExpression_1a48402109c0f13163f994ce447edccce7" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1a5df049ddbd24fadc19990fd7b7cee50e" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1a70a004e660132d2e014a7c9fba4e2f52" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1aefa796d758293ea9deee4307f7a3d3f0" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1a0aaf6280a5c2b03bc2787a16cc8bd782" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1aaee8008ec3c5e1c7e4d3cf689215b1fa" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>operator[]</name></member>
      <member refid="classandres_1_1ViewExpression_1a13f42c4594a3ab70270d0e09b2274fdf" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>overlaps</name></member>
      <member refid="classandres_1_1ViewExpression_1ae81de4e50d07d2587951a4b23d5a5490" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>shape</name></member>
      <member refid="classandres_1_1ViewExpression_1aeeb7dd43b8dbbd5b16e9e79f9de5b31a" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>shapeBegin</name></member>
      <member refid="classandres_1_1ViewExpression_1aa379edb9a9c633b93391f5f696954a3a" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>shapeEnd</name></member>
      <member refid="classandres_1_1ViewExpression_1aec0e6310accbc6774bc40e1e2c2a2c1b" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>size</name></member>
      <member refid="classandres_1_1ViewExpression_1aad128b08207a68e92797aa2c7342feff" prot="public" virt="non-virtual"><scope>andres::ViewExpression</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
