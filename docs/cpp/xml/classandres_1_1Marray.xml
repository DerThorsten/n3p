<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="classandres_1_1Marray" kind="class" language="C++" prot="public">
    <compoundname>andres::Marray</compoundname>
    <basecompoundref refid="classandres_1_1View" prot="public" virt="non-virtual">andres::View&lt; T, false, A &gt;</basecompoundref>
    <includes refid="andres_2marray_8hxx" local="no">marray.hxx</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>A</declname>
        <defname>A</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classandres_1_1Marray_1ad954a5c638124bd4cbfdedf8fed54f0c" prot="public" static="no">
        <type><ref refid="classandres_1_1View" kindref="compound">View</ref>&lt; T, false, A &gt;</type>
        <definition>typedef View&lt;T, false, A&gt; andres::Marray&lt; T, A &gt;::base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="667" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a902cba550c99fb1db7b6b95edb0ca4df" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1abe3d48ac2b0d65536e54dbfad0a44929" kindref="member">base::value_type</ref></type>
        <definition>typedef base::value_type andres::Marray&lt; T, A &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="668" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a42f16cbe0ebc93347dd9eed78484e951" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1a9a201594c82be89fccd0fe644ea2f09c" kindref="member">base::pointer</ref></type>
        <definition>typedef base::pointer andres::Marray&lt; T, A &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="669" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="669" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a6e9d79616cdeed14221d96431ab5f678" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1a947d02064bced23437b804a8050e6ccb" kindref="member">base::const_pointer</ref></type>
        <definition>typedef base::const_pointer andres::Marray&lt; T, A &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="670" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a20b76b3ff5480625dfad98caf0ec9649" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1aebdd1f19272b743b4422ff8ba18fc11a" kindref="member">base::reference</ref></type>
        <definition>typedef base::reference andres::Marray&lt; T, A &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="671" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1ae5ecc2e9f1b747ffaaff04ab15568783" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1a69e3d49e3d8242a33c03d42dd5ecc5b8" kindref="member">base::const_reference</ref></type>
        <definition>typedef base::const_reference andres::Marray&lt; T, A &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="672" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1afa294c08fe2bf282f9c3b65ac8da1622" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1aef54ee0a58e755b897398493d05a44df" kindref="member">base::iterator</ref></type>
        <definition>typedef base::iterator andres::Marray&lt; T, A &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="673" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a9125dfa109e0a43ccd18081fd64ed65e" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1aab07af42756759420211d114bb705547" kindref="member">base::reverse_iterator</ref></type>
        <definition>typedef base::reverse_iterator andres::Marray&lt; T, A &gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="674" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a0b3be7ebc2bd3a247b59a8ed7be24102" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1a7b6f125a7b3830f30cd34887b61858a7" kindref="member">base::const_iterator</ref></type>
        <definition>typedef base::const_iterator andres::Marray&lt; T, A &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="675" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a03aa08b455a9fcb7c3ba9072799cad92" prot="public" static="no">
        <type><ref refid="classandres_1_1View_1a61656971b73a48c8bf009e3200aad900" kindref="member">base::const_reverse_iterator</ref></type>
        <definition>typedef base::const_reverse_iterator andres::Marray&lt; T, A &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="676" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" prot="public" static="no">
        <type>A::template rebind&lt; <ref refid="classandres_1_1Marray_1a902cba550c99fb1db7b6b95edb0ca4df" kindref="member">value_type</ref> &gt;::other</type>
        <definition>typedef A::template rebind&lt;value_type&gt;::other andres::Marray&lt; T, A &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="677" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="677" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classandres_1_1Marray_1a7db538573ba132bcbcc1476494d928de" prot="private" static="no">
        <type>base::geometry_type</type>
        <definition>typedef base::geometry_type andres::Marray&lt; T, A &gt;::geometry_type</definition>
        <argsstring></argsstring>
        <name>geometry_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="724" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="724" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classandres_1_1Marray_1a969b324767bf22c99737169b0f48db6b" prot="private" static="no" mutable="no">
        <type><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref></type>
        <definition>allocator_type andres::Marray&lt; T, A &gt;::dataAllocator_</definition>
        <argsstring></argsstring>
        <name>dataAllocator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="730" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="730" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const allocator_type &amp;=allocator_type())</argsstring>
        <name>Marray</name>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="680" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3370" bodyend="3377"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1af0c5c9182383cc5db6ce3ef36f039b7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const T &amp;, const CoordinateOrder &amp;=defaultOrder, const allocator_type &amp;=allocator_type())</argsstring>
        <name>Marray</name>
        <param>
          <type>const T &amp;</type>
          <defname>value</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref> &amp;</type>
          <defname>coordinateOrder</defname>
          <defval>defaultOrder</defval>
        </param>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct 0-dimensional (scalar) array.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the single data item. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coordinateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag specifying whether FirstMajorOrder or LastMajorOrder is to be used. As the <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> can be resized after construction, the coordinate order has to be set even for a 0-dimensional <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="681" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3391" bodyend="3402"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a88a89dc7f1fa0e775c6abaabb995d991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ShapeIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(ShapeIterator, ShapeIterator, const T &amp;=T(), const CoordinateOrder &amp;=defaultOrder, const allocator_type &amp;=allocator_type())</argsstring>
        <name>Marray</name>
        <param>
          <type>ShapeIterator</type>
          <defname>begin</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>end</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>value</defname>
          <defval>T()</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref> &amp;</type>
          <defname>coordinateOrder</defname>
          <defval>defaultOrder</defval>
        </param>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> with initialization.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the beginning of a sequence that determines the shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the end of that sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value with which all entries are initialized. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coordinateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag specifying whether FirstMajorOrder or LastMajorOrder is to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="684" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3530" bodyend="3548"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a2f4ca97b0126cd3d72519a2c0bf33f08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ShapeIterator</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const InitializationSkipping &amp;, ShapeIterator, ShapeIterator, const CoordinateOrder &amp;=defaultOrder, const allocator_type &amp;=allocator_type())</argsstring>
        <name>Marray</name>
        <param>
          <type>const <ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref> &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>begin</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>end</defname>
        </param>
        <param>
          <type>const <ref refid="namespaceandres_1a2ac8b7aa89d44e8188a7c0ba50f4306b" kindref="member">CoordinateOrder</ref> &amp;</type>
          <defname>coordinateOrder</defname>
          <defval>defaultOrder</defval>
        </param>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> without initialization.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to be set to SkipInitialization. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the beginning of a sequence that determines the shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the end of that sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coordinateOrder</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag specifying whether FirstMajorOrder or LastMajorOrder is to be used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="688" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3564" bodyend="3579"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1aad23a5b853c0c69bf0e912a44d549f79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const Marray&lt; T, A &gt; &amp;)</argsstring>
        <name>Marray</name>
        <param>
          <type>const <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
          <defname>in</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy from a <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> (source). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="696" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3411" bodyend="3428"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a5489b4b2b1013e3232f1749d66a6db91" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
          <param>
            <type>class Te</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const ViewExpression&lt; E, Te &gt; &amp;, const allocator_type &amp;=allocator_type())</argsstring>
        <name>Marray</name>
        <param>
          <type>const <ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>&lt; E, Te &gt; &amp;</type>
          <defname>expression</defname>
        </param>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> from <ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expression</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="698" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3483" bodyend="3514"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a0b6a165fd753d5caf8ead55868a856ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TLocal</type>
          </param>
          <param>
            <type>bool</type>
            <declname>isConstLocal</declname>
            <defname>isConstLocal</defname>
          </param>
          <param>
            <type>class ALocal</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::Marray</definition>
        <argsstring>(const View&lt; TLocal, isConstLocal, ALocal &gt; &amp;)</argsstring>
        <name>Marray</name>
        <param>
          <type>const <ref refid="classandres_1_1View" kindref="compound">View</ref>&lt; TLocal, isConstLocal, ALocal &gt; &amp;</type>
          <defname>in</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy from a <ref refid="classandres_1_1View" kindref="compound">View</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1View" kindref="compound">View</ref> (source). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="701" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3438" bodyend="3472"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a6b900bedc740214e8b60684a8b0ad621" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>andres::Marray&lt; T, A &gt;::~Marray</definition>
        <argsstring>()</argsstring>
        <name>~Marray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="702" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3618" bodyend="3621"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
        <definition>Marray&lt; T, A &gt; &amp; andres::Marray&lt; T, A &gt;::operator=</definition>
        <argsstring>(const T &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value.</para></parameterdescription>
</parameteritem>
</parameterlist>
All entries are set to value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="705" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3767" bodyend="3776"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a7519023d16efb739c0248a84c006e9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
        <definition>Marray&lt; T, A &gt; &amp; andres::Marray&lt; T, A &gt;::operator=</definition>
        <argsstring>(const Marray&lt; T, A &gt; &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
          <defname>in</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment.</para><para>This operator works as follows:<itemizedlist>
<listitem><para>It always attempts to copy the data from &apos;in&apos;.</para></listitem><listitem><para>If &apos;in&apos; and *this have the same size, already allocated memory is re-used. Otherwise, the memory allocated for *this is freed, and new memory is allocated to take the copy of &apos;in&apos;.</para></listitem><listitem><para>If &apos;in&apos; is un-initialized, memory allocated for *this is freed.</para></listitem></itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> (source). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="706" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3639" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a50c57bb0dbb133dc9e477ec2dbccdad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TLocal</type>
          </param>
          <param>
            <type>bool</type>
            <declname>isConstLocal</declname>
            <defname>isConstLocal</defname>
          </param>
          <param>
            <type>class ALocal</type>
          </param>
        </templateparamlist>
        <type><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
        <definition>Marray&lt; T, A &gt; &amp; andres::Marray&lt; T, A &gt;::operator=</definition>
        <argsstring>(const View&lt; TLocal, isConstLocal, ALocal &gt; &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classandres_1_1View" kindref="compound">View</ref>&lt; TLocal, isConstLocal, ALocal &gt; &amp;</type>
          <defname>in</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment from <ref refid="classandres_1_1View" kindref="compound">View</ref>.</para><para>This operator works as follows:<itemizedlist>
<listitem><para>It always attempts to copy the data from &apos;in&apos;.</para></listitem><listitem><para>If &apos;in&apos; and *this have overlap, a copy of &apos;in&apos; is made and assigned to *this.</para></listitem><listitem><para>If &apos;in&apos; and *this have the same size, already allocated memory is re-used. Otherwise, the memory allocated for *this is freed, and new memory is allocated to take the copy of &apos;in&apos;.</para></listitem><listitem><para>If &apos;in&apos; is un-initialized, memory allocated for *this is freed.</para></listitem></itemizedlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1View" kindref="compound">View</ref> (source). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="708" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3687" bodyend="3756"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a248d8da450653279912cec325a4309d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class E</type>
          </param>
          <param>
            <type>class Te</type>
          </param>
        </templateparamlist>
        <type><ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>&lt; T, A &gt; &amp;</type>
        <definition>Marray&lt; T, A &gt; &amp; andres::Marray&lt; T, A &gt;::operator=</definition>
        <argsstring>(const ViewExpression&lt; E, Te &gt; &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classandres_1_1ViewExpression" kindref="compound">ViewExpression</ref>&lt; E, Te &gt; &amp;</type>
          <defname>expression</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="710" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3782" bodyend="3816"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a680a02cc61393dddb44fb88e337f29b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void andres::Marray&lt; T, A &gt;::assign</definition>
        <argsstring>(const allocator_type &amp;=allocator_type())</argsstring>
        <name>assign</name>
        <param>
          <type>const <ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref> &amp;</type>
          <defname>allocator</defname>
          <defval><ref refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" kindref="member">allocator_type</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref>.</para><para>Leaves the <ref refid="classandres_1_1Marray" kindref="compound">Marray</ref> in the same state as if the empty constructor had been called. Previously allocated memory is de-allocated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" kindref="member">Marray()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="711" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3351" bodyend="3361"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ShapeIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void andres::Marray&lt; T, A &gt;::resize</definition>
        <argsstring>(ShapeIterator, ShapeIterator, const T &amp;=T())</argsstring>
        <name>resize</name>
        <param>
          <type>ShapeIterator</type>
          <defname>begin</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>end</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>value</defname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize (existing entries are preserved, new entries are initialized).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the beginning of a sequence that determines the new shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the end of that sequence. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value to be assigned to newly allocated entries. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="715" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3889" bodyend="3896"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1af3b327724eaf79ce9482644f86956a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ShapeIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void andres::Marray&lt; T, A &gt;::resize</definition>
        <argsstring>(const InitializationSkipping &amp;, ShapeIterator, ShapeIterator)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="structandres_1_1InitializationSkipping" kindref="compound">InitializationSkipping</ref> &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>begin</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>end</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize (existing entries are preserved).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>is</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag to be set to SkipInitialization. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the beginning of a sequence that determines the new shape. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classandres_1_1Iterator" kindref="compound">Iterator</ref> to the end of that sequence. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="717" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3909" bodyend="3916"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classandres_1_1Marray_1a4c44a8dc042adec8ba0d7e67deb49ff5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void andres::Marray&lt; T, A &gt;::testInvariant</definition>
        <argsstring>() const </argsstring>
        <name>testInvariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invariant test. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="726" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3956" bodyend="3960"/>
      </memberdef>
      <memberdef kind="function" id="classandres_1_1Marray_1a6ff6a8eb59d3d600d1d04ddf5aa833ca" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>SKIP_INITIALIZATION</declname>
            <defname>SKIP_INITIALIZATION</defname>
          </param>
          <param>
            <type>class ShapeIterator</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void andres::Marray&lt; T, A &gt;::resizeHelper</definition>
        <argsstring>(ShapeIterator, ShapeIterator, const T &amp;=T())</argsstring>
        <name>resizeHelper</name>
        <param>
          <type>ShapeIterator</type>
          <defname>begin</defname>
        </param>
        <param>
          <type>ShapeIterator</type>
          <defname>end</defname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>value</defname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="728" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="3822" bodyend="3876"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Runtime-Flexible multi-dimensional array. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1410">
        <label>andres::View&lt; T, false, A &gt;</label>
        <link refid="classandres_1_1View"/>
        <childnode refid="1411" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1411">
        <label>andres::ViewExpression&lt; View&lt; T, isConst, A &gt;, T &gt;</label>
        <link refid="classandres_1_1ViewExpression"/>
      </node>
      <node id="1409">
        <label>andres::Marray&lt; T, A &gt;</label>
        <link refid="classandres_1_1Marray"/>
        <childnode refid="1410" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1413">
        <label>andres::View&lt; T, false, A &gt;</label>
        <link refid="classandres_1_1View"/>
        <childnode refid="1414" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1414">
        <label>andres::ViewExpression&lt; View&lt; T, isConst, A &gt;, T &gt;</label>
        <link refid="classandres_1_1ViewExpression"/>
      </node>
      <node id="1412">
        <label>andres::Marray&lt; T, A &gt;</label>
        <link refid="classandres_1_1Marray"/>
        <childnode refid="1413" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" line="119" column="1" bodyfile="/home/tbeier/src/nifty/include/nifty/marray/andres/marray.hxx" bodystart="119" bodyend="-1"/>
    <listofallmembers>
      <member refid="classandres_1_1Marray_1a1e38873cb38bd8568be81bfb804deefd" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>allocator_type</name></member>
      <member refid="classandres_1_1Marray_1a680a02cc61393dddb44fb88e337f29b7" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>assign</name></member>
      <member refid="classandres_1_1View_1ab227fd41b348249cbc149b5cff2cee49" prot="public" virt="non-virtual" ambiguityscope="View&lt; T, false, A &gt;::"><scope>andres::Marray</scope><name>assign</name></member>
      <member refid="classandres_1_1View_1a0bee9a9e389a0d9af1c8cc4bbe85aeb7" prot="public" virt="non-virtual" ambiguityscope="View&lt; T, false, A &gt;::"><scope>andres::Marray</scope><name>assign</name></member>
      <member refid="classandres_1_1View_1a2c1774da3d066b97932ea861f845d95c" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>asString</name></member>
      <member refid="classandres_1_1Marray_1ad954a5c638124bd4cbfdedf8fed54f0c" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>base</name></member>
      <member refid="classandres_1_1View_1acd1f71e27ea01d536e1539877afedfa9" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>begin</name></member>
      <member refid="classandres_1_1View_1a95eb85a97d6a98b3cd3271a033ddae06" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>begin</name></member>
      <member refid="classandres_1_1View_1ab39dae59df5589ec0311ad67a3c7d000" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>boundView</name></member>
      <member refid="classandres_1_1Marray_1a0b3be7ebc2bd3a247b59a8ed7be24102" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>const_iterator</name></member>
      <member refid="classandres_1_1Marray_1a6e9d79616cdeed14221d96431ab5f678" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>const_pointer</name></member>
      <member refid="classandres_1_1Marray_1ae5ecc2e9f1b747ffaaff04ab15568783" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>const_reference</name></member>
      <member refid="classandres_1_1Marray_1a03aa08b455a9fcb7c3ba9072799cad92" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>const_reverse_iterator</name></member>
      <member refid="classandres_1_1View_1aeeaae20aebd1f90c3b3f1aba2071e98d" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>constView</name></member>
      <member refid="classandres_1_1View_1a331568a945dc85ab30f03de5f993b792" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>constView</name></member>
      <member refid="classandres_1_1View_1ab329255f0d1c9f7acaa4460482ca1fe1" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>constView</name></member>
      <member refid="classandres_1_1View_1ab3bfeed6e84bccb0669497f64eb88557" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>constView</name></member>
      <member refid="classandres_1_1View_1a7ca5aa89f5c22d80e3c7037e55c78cdb" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>coordinateOrder</name></member>
      <member refid="classandres_1_1View_1aaaf0d7e0d18c8ce235da39d006abfb44" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>coordinatesToIndex</name></member>
      <member refid="classandres_1_1View_1aae65d4fe9cb58845479be7ea4cbb7591" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>coordinatesToOffset</name></member>
      <member refid="classandres_1_1Marray_1a969b324767bf22c99737169b0f48db6b" prot="private" virt="non-virtual"><scope>andres::Marray</scope><name>dataAllocator_</name></member>
      <member refid="classandres_1_1View_1a36308e1cf6bb6b17e8b0df6537c1ec39" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>dimension</name></member>
      <member refid="classandres_1_1View_1af778a1e9839f2f90e503514e36d41b78" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>end</name></member>
      <member refid="classandres_1_1View_1ae55b54c50dd58caf8c128c7ec72be8c3" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>end</name></member>
      <member refid="classandres_1_1ViewExpression_1a0b26c0956d2167c6c07ba2841066d450" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>expression_type</name></member>
      <member refid="classandres_1_1Marray_1a7db538573ba132bcbcc1476494d928de" prot="private" virt="non-virtual"><scope>andres::Marray</scope><name>geometry_type</name></member>
      <member refid="classandres_1_1View_1aac74ad12de420f62a474ebed05e06640" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>indexToCoordinates</name></member>
      <member refid="classandres_1_1View_1abe37dcbd69af25882d45bdff5745e95f" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>indexToOffset</name></member>
      <member refid="classandres_1_1View_1ad747c5f0d3caecaa535afd85c1e5c250" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>isSimple</name></member>
      <member refid="classandres_1_1Marray_1afa294c08fe2bf282f9c3b65ac8da1622" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>iterator</name></member>
      <member refid="classandres_1_1Marray_1ae04d0a668897b7c72eb548c303804254" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1af0c5c9182383cc5db6ce3ef36f039b7d" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1a88a89dc7f1fa0e775c6abaabb995d991" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1a2f4ca97b0126cd3d72519a2c0bf33f08" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1aad23a5b853c0c69bf0e912a44d549f79" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1a5489b4b2b1013e3232f1749d66a6db91" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1Marray_1a0b6a165fd753d5caf8ead55868a856ac" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>Marray</name></member>
      <member refid="classandres_1_1ViewExpression_1a7e8ad61ca588af63869d01f8666b57e7" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator View&lt; T, isConst, A &gt; &amp;</name></member>
      <member refid="classandres_1_1ViewExpression_1aaa41406565c736e06ec21dabf3f32378" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator View&lt; T, isConst, A &gt; const &amp;</name></member>
      <member refid="classandres_1_1View_1a8c9e16f74973fefb3bacb1c7fb844441" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1ae06586b90683457833c4f76ac6bc714e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1a216831a61d22edc3b74cf09df8e537f3" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1aea4e4eddd7cd0b1fc5ac97dee672b031" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1a46b12868d2aa22f89f65d604885dc1eb" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1a50af7993da2ae2efad8a250ce51bb416" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1acd5927bb3d8203e4811c6f17872b1c84" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1ad7c89152e0d8d06c5ccf4377b9684d14" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1aee5664db40d9e07abe0dd57262b5191e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1ac188ed9042fce60401acd72ac489fed9" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1a2be86ccd328fc276f37686fb1872cb9c" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1View_1aa9fa791b4f14b9c8b8c15aea0f53527e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1ViewExpression_1a40e69cbc4391f7acf38f2d2e827c7d9c" prot="public" virt="non-virtual" ambiguityscope="ViewExpression&lt; View&lt; T, isConst, A &gt;, T &gt;::"><scope>andres::Marray</scope><name>operator()</name></member>
      <member refid="classandres_1_1Marray_1a18534988db521fe763e84eef0b3e6c8c" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1Marray_1a7519023d16efb739c0248a84c006e9e6" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1Marray_1a50c57bb0dbb133dc9e477ec2dbccdad9" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1Marray_1a248d8da450653279912cec325a4309d2" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1View_1a604e4fe802e5d712a4e99ae44e496a3f" prot="public" virt="non-virtual" ambiguityscope="View&lt; T, false, A &gt;::"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1View_1a24aacc568e0bd3a5c69fe1d9550d03f7" prot="public" virt="non-virtual" ambiguityscope="View&lt; T, false, A &gt;::"><scope>andres::Marray</scope><name>operator=</name></member>
      <member refid="classandres_1_1View_1afa268e37459476d9ca233d741e4bc63c" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>overlaps</name></member>
      <member refid="classandres_1_1ViewExpression_1ac06ec98e7837bc72c87ef5c9881ad19f" prot="public" virt="non-virtual" ambiguityscope="ViewExpression&lt; View&lt; T, isConst, A &gt;, T &gt;::"><scope>andres::Marray</scope><name>overlaps</name></member>
      <member refid="classandres_1_1View_1a375d3e199e219568d8a6205e4088289b" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>permute</name></member>
      <member refid="classandres_1_1View_1a278c77d7b10642fffc9ca8b3bc292cd1" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>permutedView</name></member>
      <member refid="classandres_1_1Marray_1a42f16cbe0ebc93347dd9eed78484e951" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>pointer</name></member>
      <member refid="classandres_1_1View_1a035fa9d7c83683bfbfb9141251336ba5" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>rbegin</name></member>
      <member refid="classandres_1_1View_1a7c2f923cffa4782f5d14c48d54981f46" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>rbegin</name></member>
      <member refid="classandres_1_1Marray_1a20b76b3ff5480625dfad98caf0ec9649" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>reference</name></member>
      <member refid="classandres_1_1View_1a27d6bad469c2e4590e0fa9f00108c36e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>rend</name></member>
      <member refid="classandres_1_1View_1a04e6fd865daf11473573114adf296662" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>rend</name></member>
      <member refid="classandres_1_1View_1a7d0432d097b8ce03a413006ec2fe9469" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>reshape</name></member>
      <member refid="classandres_1_1View_1accc2cf4c41007424b33948b24f1eb61e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>reshapedView</name></member>
      <member refid="classandres_1_1Marray_1aa6f53a2bb7002c69146ae9e2e3544ba2" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>resize</name></member>
      <member refid="classandres_1_1Marray_1af3b327724eaf79ce9482644f86956a42" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>resize</name></member>
      <member refid="classandres_1_1Marray_1a6ff6a8eb59d3d600d1d04ddf5aa833ca" prot="private" virt="non-virtual"><scope>andres::Marray</scope><name>resizeHelper</name></member>
      <member refid="classandres_1_1Marray_1a9125dfa109e0a43ccd18081fd64ed65e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>reverse_iterator</name></member>
      <member refid="classandres_1_1View_1a9bc3d88b3e2bdf432dd68f36ff33deb3" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>shape</name></member>
      <member refid="classandres_1_1View_1ad43d1b74245d56970176c75746c7c88b" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>shapeBegin</name></member>
      <member refid="classandres_1_1View_1ac56e049443673fe1311b312030fadc2d" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>shapeEnd</name></member>
      <member refid="classandres_1_1View_1a476957393b3b21333bc665e852da47ad" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>shift</name></member>
      <member refid="classandres_1_1View_1a267a57ffddb437e19d0a15d342aeebc9" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>shiftedView</name></member>
      <member refid="classandres_1_1View_1afc9504378ae2eefd7540a71d9f227338" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>size</name></member>
      <member refid="classandres_1_1View_1aa80ab78f6e3a32ead389d657f6ec7308" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>size_type</name></member>
      <member refid="classandres_1_1View_1a922763728fb80d24c32a5e5964537bdb" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>squeeze</name></member>
      <member refid="classandres_1_1View_1a4d454242ebde77898963b7bc41208bb5" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>squeezedView</name></member>
      <member refid="classandres_1_1View_1a3c4b2cee088b6cf8232289cbb50bd2b4" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>strides</name></member>
      <member refid="classandres_1_1View_1a44f545270b7e66a749c2a8988a5dcd92" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>stridesBegin</name></member>
      <member refid="classandres_1_1View_1ab4ee3379ba0903bb14645c397d2a85b6" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>stridesEnd</name></member>
      <member refid="classandres_1_1Marray_1a4c44a8dc042adec8ba0d7e67deb49ff5" prot="private" virt="non-virtual"><scope>andres::Marray</scope><name>testInvariant</name></member>
      <member refid="classandres_1_1View_1a3a837dd20fda8c536f9c76894a1f5944" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>transpose</name></member>
      <member refid="classandres_1_1View_1ad7acad354a5be4086b9b21ab88b18d82" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>transpose</name></member>
      <member refid="classandres_1_1View_1a08fc7f17dd64241adeefac7493f39f3a" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>transposedView</name></member>
      <member refid="classandres_1_1View_1a2045868486d978f41125dd59c4834fa2" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>transposedView</name></member>
      <member refid="classandres_1_1Marray_1a902cba550c99fb1db7b6b95edb0ca4df" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>value_type</name></member>
      <member refid="classandres_1_1View_1a190ebba7d686129ac18075e7650e0341" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>view</name></member>
      <member refid="classandres_1_1View_1a81d4d44cfe0b4373f5488d6b01346189" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>view</name></member>
      <member refid="classandres_1_1View_1a4da55e4518bb93761e275b5340373ccd" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>view</name></member>
      <member refid="classandres_1_1View_1a6ec3e4ec58da8405e3e8b4bf6d4912e4" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>view</name></member>
      <member refid="classandres_1_1View_1a4368fd5dbfc08a75115341bfa7123a87" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>View</name></member>
      <member refid="classandres_1_1View_1af4519c20472df4ed36905b3b6574cc46" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>View</name></member>
      <member refid="classandres_1_1View_1ae2969a649e8ced36cb05e79985f4656f" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>View</name></member>
      <member refid="classandres_1_1View_1ad7ee18ef33ab6e92138ba0ded346086d" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>View</name></member>
      <member refid="classandres_1_1View_1a3abf83b3422d78b41560e6f87ecb542e" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>View</name></member>
      <member refid="classandres_1_1Marray_1a6b900bedc740214e8b60684a8b0ad621" prot="public" virt="non-virtual"><scope>andres::Marray</scope><name>~Marray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
